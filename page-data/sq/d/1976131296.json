{"data":{"site":{"siteMetadata":{"mdPlayground":{"splitPaneMainSize":"75%"},"playground":{"extraLib":"declare module '@antv/s2-site'{\n          /// <reference types=\"lodash\" />\r\n/// <reference types=\"node\" />\r\n\r\nimport { BBox } from '@antv/g-canvas';\r\nimport { Canvas } from '@antv/g-canvas';\r\nimport * as CSS_2 from 'csstype';\r\nimport * as d3Timer from 'd3-timer';\r\nimport { DebouncedFunc } from 'lodash';\r\nimport EE from '@antv/event-emitter';\r\nimport { Event as Event_2 } from '@antv/g-canvas';\r\nimport { Group } from '@antv/g-canvas';\r\nimport type { IElement } from '@antv/g-canvas';\r\nimport { IGroup } from '@antv/g-canvas';\r\nimport { IGroup as IGroup_2 } from '@antv/g-base';\r\nimport { IShape } from '@antv/g-canvas';\r\nimport { IShape as IShape_2 } from '@antv/g-base';\r\nimport { MemoizedFunction } from 'lodash';\r\nimport { Omit as Omit_2 } from 'lodash';\r\nimport { Point } from '@antv/g-canvas';\r\nimport { Point as Point_2 } from '@antv/g-base';\r\nimport { ShapeAttrs } from '@antv/g-canvas';\r\nimport { SimpleBBox } from '@antv/g-canvas';\r\nimport { Wheel } from '@antv/g-gesture';\r\n\r\nexport declare type Aggregation = EAggregation.SUM;\r\n\r\nexport declare interface AreaRange {\r\n    start: number;\r\n    width: number;\r\n}\r\n\r\n/**\r\n * 自动格式化\r\n * 规则\r\n *  1，小于1w，使用逗号分割，例如 3,459\r\n *  2，大于1w，使用语义化，例如 3.2万，3.4亿 2,234万\r\n * @param v\r\n * @param fixed\r\n * @param formatter\r\n */\r\nexport declare const auto: (v: number, fixed?: number, formatter?: any) => string;\r\n\r\nexport declare interface AutoAdjustPositionOptions {\r\n    position: TooltipPosition;\r\n    tooltipContainer: HTMLElement;\r\n    spreadsheet: SpreadSheet;\r\n    autoAdjustBoundary: TooltipAutoAdjustBoundary;\r\n}\r\n\r\nexport declare const BACK_GROUND_GROUP_CONTAINER_Z_INDEX = 0;\r\n\r\nexport declare interface Background {\r\n    opacity?: number;\r\n    color?: string;\r\n}\r\n\r\ndeclare abstract class BaseBBox implements BBox {\r\n    protected spreadsheet: SpreadSheet;\r\n    protected facet: BaseFacet;\r\n    protected layoutResult: LayoutResult;\r\n    x: number;\r\n    y: number;\r\n    minX: number;\r\n    minY: number;\r\n    maxX: number;\r\n    maxY: number;\r\n    width: number;\r\n    height: number;\r\n    originalWidth: number;\r\n    originalHeight: number;\r\n    viewportHeight: number;\r\n    viewportWidth: number;\r\n    constructor(facet: BaseFacet, autoCalculateBBoxWhenCreated?: boolean);\r\n    abstract calculateBBox(): void;\r\n}\r\n\r\nexport declare abstract class BaseCell<T extends SimpleBBox> extends Group {\r\n    protected meta: T;\r\n    protected spreadsheet: SpreadSheet;\r\n    protected theme: S2Theme;\r\n    protected backgroundShape: IShape;\r\n    protected textShape: IShape;\r\n    protected linkFieldShape: IShape;\r\n    protected actualText: string;\r\n    protected actualTextWidth: number;\r\n    protected stateShapes: Map<StateShapeLayer, IShape>;\r\n    constructor(meta: T, spreadsheet: SpreadSheet, ...restOptions: unknown[]);\r\n    getMeta(): T;\r\n    setMeta(viewMeta: T): void;\r\n    getIconStyle(): IconTheme;\r\n    getTextAndIconPosition(iconCount?: number): {\r\n        text: {\r\n            x: number;\r\n            y: number;\r\n        };\r\n        icon: {\r\n            x: number;\r\n            y: number;\r\n        };\r\n    };\r\n    getActualText(): string;\r\n    getFieldValue(): string;\r\n    /**\r\n     * in case there are more params to be handled\r\n     * @param options any type's rest params\r\n     */\r\n    protected handleRestOptions(...options: unknown[]): void;\r\n    /**\r\n     * Return the type of the cell\r\n     */\r\n    abstract get cellType(): CellTypes;\r\n    /**\r\n     * Determine how to render this cell area\r\n     */\r\n    protected abstract initCell(): void;\r\n    /**\r\n     * Update cell's selected state\r\n     */\r\n    abstract update(): void;\r\n    protected abstract getTextStyle(): TextTheme;\r\n    protected abstract getFormattedFieldValue(): FormatResult;\r\n    protected abstract getMaxTextWidth(): number;\r\n    protected abstract getTextPosition(): Point;\r\n    getStyle<K extends keyof S2Theme = keyof CellThemes>(name?: K): S2Theme[K];\r\n    protected getResizeAreaStyle(): ResizeArea;\r\n    protected shouldDrawResizeAreaByType(type: keyof ResizeActiveOptions): boolean | ResizeType;\r\n    protected getCellArea(): {\r\n        x: number;\r\n        y: number;\r\n        height: number;\r\n        width: number;\r\n    };\r\n    getContentArea(): {\r\n        x: number;\r\n        y: number;\r\n        width: number;\r\n        height: number;\r\n    };\r\n    protected getIconPosition(iconCount?: number): {\r\n        x: number;\r\n        y: number;\r\n    };\r\n    protected drawTextShape(): void;\r\n    protected drawLinkFieldShape(showLinkFieldShape: boolean, linkFillColor: string): void;\r\n    updateByState(stateName: InteractionStateName, cell: S2CellType): void;\r\n    hideInteractionShape(): void;\r\n    clearUnselectedState(): void;\r\n}\r\n\r\nexport declare abstract class BaseDataSet {\r\n    fields: Fields;\r\n    meta: Meta[];\r\n    originData: DataType[];\r\n    totalData: DataType[];\r\n    indexesData: DataType[][] | DataType[];\r\n    sortParams: SortParams;\r\n    filterParams: FilterParam[];\r\n    protected spreadsheet: SpreadSheet;\r\n    constructor(spreadsheet: SpreadSheet);\r\n    protected displayData: DataType[];\r\n    /**\r\n     * 查找字段信息\r\n     */\r\n    getFieldMeta: ((field: string, meta?: Meta[]) => Meta) & MemoizedFunction;\r\n    /**\r\n     * 获得字段名称\r\n     * @param field\r\n     */\r\n    getFieldName(field: string): string;\r\n    /**\r\n     * 获得字段格式方法\r\n     * @param field\r\n     */\r\n    getFieldFormatter(field: string): Formatter;\r\n    /**\r\n     * 获得字段描述\r\n     * @param field\r\n     */\r\n    getFieldDescription(field: string): string;\r\n    setDataCfg(dataCfg: S2DataConfig): void;\r\n    getDisplayDataSet(): DataType[];\r\n    getValueRangeByField(field: string): ValueRange;\r\n    /** ******************NEED IMPLEMENT BY USER CASE************************ */\r\n    /**\r\n     * Try to process dataConfig in different mode\r\n     * @param dataCfg\r\n     */\r\n    abstract processDataCfg(dataCfg: S2DataConfig): S2DataConfig;\r\n    /**\r\n     * 1、query !== null\r\n     * province  city => field\r\n     *   辽宁省\r\n     *          达州市\r\n     *          芜湖市\r\n     *  field = province\r\n     *  query = {province: '辽宁省'}\r\n     *  => [达州市,芜湖市]\r\n     *\r\n     *  2、query = null\r\n     *  query param is not necessary, when just\r\n     *  get some field's all dimension values\r\n     *\r\n     * @param field current dimensions\r\n     * @param query dimension value query\r\n     */\r\n    abstract getDimensionValues(field: string, query?: DataType): string[];\r\n    /**\r\n     * In most cases, this function to get the specific\r\n     * cross data cell data\r\n     * @param params\r\n     */\r\n    abstract getCellData(params: CellDataParams): DataType;\r\n    /**\r\n     * To get a row or column cells data;\r\n     * if query is empty, return all data\r\n     * @param query\r\n     * @param isTotals\r\n     * @param isRow\r\n     * @param drillDownFields\r\n     */\r\n    abstract getMultiData(query: DataType, isTotals?: boolean, isRow?: boolean, drillDownFields?: string[]): DataType[];\r\n    moreThanOneValue(): boolean;\r\n}\r\n\r\nexport declare abstract class BaseEvent {\r\n    spreadsheet: SpreadSheet;\r\n    constructor(spreadsheet: SpreadSheet);\r\n    abstract bindEvents(): void;\r\n}\r\n\r\nexport declare interface BaseEventImplement {\r\n    bindEvents: () => void;\r\n}\r\n\r\ndeclare abstract class BaseFacet {\r\n    spreadsheet: SpreadSheet;\r\n    cornerBBox: CornerBBox;\r\n    panelBBox: PanelBBox;\r\n    backgroundGroup: IGroup;\r\n    panelGroup: IGroup;\r\n    foregroundGroup: IGroup;\r\n    cfg: SpreadSheetFacetCfg;\r\n    layoutResult: LayoutResult;\r\n    viewCellWidths: number[];\r\n    viewCellHeights: ViewCellHeights;\r\n    protected mobileWheel: Wheel;\r\n    protected timer: d3Timer.Timer;\r\n    hScrollBar: ScrollBar;\r\n    hRowScrollBar: ScrollBar;\r\n    vScrollBar: ScrollBar;\r\n    rowHeader: RowHeader;\r\n    columnHeader: ColHeader;\r\n    cornerHeader: CornerHeader;\r\n    rowIndexHeader: SeriesNumberHeader;\r\n    centerFrame: Frame;\r\n    protected abstract doLayout(): LayoutResult;\r\n    protected abstract getViewCellHeights(layoutResult: LayoutResult): ViewCellHeights;\r\n    protected scrollFrameId: ReturnType<typeof requestAnimationFrame>;\r\n    get scrollBarTheme(): ScrollBarTheme;\r\n    get scrollBarSize(): number;\r\n    protected preCellIndexes: PanelIndexes;\r\n    constructor(cfg: SpreadSheetFacetCfg);\r\n    hideScrollBar: () => void;\r\n    delayHideScrollBar: DebouncedFunc<() => void>;\r\n    delayHideScrollbarOnMobile: () => void;\r\n    showVerticalScrollBar: () => void;\r\n    showHorizontalScrollBar: () => void;\r\n    onContainerWheel: () => void;\r\n    onContainerWheelForPc: () => void;\r\n    onContainerWheelForMobile: () => void;\r\n    bindEvents: () => void;\r\n    /**\r\n     * Start render, call from outside\r\n     */\r\n    render(): void;\r\n    /**\r\n     * 在每次render, 校验scroll offset是否在合法范围中\r\n     * 比如在滚动条已经滚动到100%的状态的前提下：（ maxAvailableScrollOffsetX = colsHierarchy.width - viewportBBox.width ）\r\n     *     此时changeSize，sheet从 small width 变为 big width\r\n     *     导致后者 viewport 区域更大，其结果就是后者的 maxAvailableScrollOffsetX 更小\r\n     *     此时就需要重置 scrollOffsetX，否则就会导致滚动过多，出现空白区域\r\n     */\r\n    protected adjustScrollOffset(): void;\r\n    getSeriesNumberWidth(): number;\r\n    getCanvasHW(): {\r\n        width: number;\r\n        height: number;\r\n    };\r\n    getContentHeight(): number;\r\n    updateScrollOffset(offsetConfig: OffsetConfig): void;\r\n    getPaginationScrollY(): number;\r\n    destroy(): void;\r\n    setScrollOffset: (scrollOffset: ScrollOffset) => void;\r\n    getScrollOffset: () => ScrollOffset;\r\n    emitPaginationEvent: () => void;\r\n    private unbindEvents;\r\n    clipPanelGroup: () => void;\r\n    calculateCellWidthHeight: () => void;\r\n    /**\r\n     * The purpose of this rewrite is to take into account that when rowHeader supports scrollbars\r\n     the panel viewable area must vary with the horizontal distance of the scroll\r\n     * @param scrollX\r\n     * @param scrollY\r\n     * @public\r\n     */\r\n    calculateXYIndexes(scrollX: number, scrollY: number): PanelIndexes;\r\n    getRealScrollX: (scrollX: number, hRowScroll?: number) => number;\r\n    protected calculateCornerBBox(): void;\r\n    protected calculatePanelBBox: () => void;\r\n    getRealWidth: () => number;\r\n    getCellRange(): {\r\n        start: number;\r\n        end: number;\r\n    };\r\n    getRealHeight: () => number;\r\n    clearAllGroup: () => void;\r\n    scrollWithAnimation: (offsetConfig: OffsetConfig) => void;\r\n    scrollImmediately: (offsetConfig: OffsetConfig) => void;\r\n    startScroll: (newX: number, newY: number) => void;\r\n    getRendererHeight: () => number;\r\n    private getAdjustedRowScrollX;\r\n    private getAdjustedScrollX;\r\n    private getAdjustedScrollY;\r\n    private getAdjustedScrollOffset;\r\n    renderRowScrollBar: (rowScrollX: number) => void;\r\n    getValidScrollBarOffset: (offset: number, maxOffset: number) => number;\r\n    renderHScrollBar: (width: number, realWidth: number, scrollX: number) => void;\r\n    private getScrollbarPosition;\r\n    renderVScrollBar: (height: number, realHeight: number, scrollY: number) => void;\r\n    getScrollBarOffset: (offset: number, scrollbar: ScrollBar) => number;\r\n    isScrollOverThePanelArea: ({ layerX, layerY }: Partial<S2WheelEvent>) => boolean;\r\n    isScrollOverTheCornerArea: ({ layerX, layerY }: Partial<S2WheelEvent>) => boolean;\r\n    updateHorizontalRowScrollOffset: ({ offset, layerX, layerY }: {\r\n        offset: any;\r\n        layerX: any;\r\n        layerY: any;\r\n    }) => void;\r\n    updateHorizontalScrollOffset: ({ offset, layerX, layerY }: {\r\n        offset: any;\r\n        layerX: any;\r\n        layerY: any;\r\n    }) => void;\r\n    isScrollToLeft: (deltaX: number) => boolean;\r\n    isScrollToRight: (deltaX: number) => boolean;\r\n    isScrollToTop: (deltaY: number) => boolean;\r\n    isScrollToBottom: (deltaY: number) => boolean;\r\n    isVerticalScrollOverTheViewport: (deltaY: number) => boolean;\r\n    isHorizontalScrollOverTheViewport: (deltaX: number) => boolean;\r\n    /**\r\n     在当前表格滚动分两种情况:\r\n     1. 当前表格无滚动条: 无需阻止外部容器滚动\r\n     2. 当前表格有滚动条:\r\n     - 未滚动到顶部或底部: 当前表格滚动, 阻止外部容器滚动\r\n     - 滚动到顶部或底部: 恢复外部容器滚动\r\n     */\r\n    isScrollOverTheViewport: (deltaX: number, deltaY: number, layerY: number) => boolean;\r\n    cancelScrollFrame: () => boolean;\r\n    clearScrollFrameIdOnMobile: () => void;\r\n    onWheel: (event: S2WheelEvent) => void;\r\n    protected clip(scrollX: number, scrollY: number): void;\r\n    /**\r\n     * Translate panelGroup, rowHeader, cornerHeader, columnHeader ect\r\n     * according to new scroll offset\r\n     * @param scrollX\r\n     * @param scrollY\r\n     * @param hRowScroll\r\n     * @protected\r\n     */\r\n    protected translateRelatedGroups(scrollX: number, scrollY: number, hRowScroll: number): void;\r\n    addCell: (cell: S2CellType<ViewMeta>) => void;\r\n    realCellRender: (scrollX: number, scrollY: number) => void;\r\n    /**\r\n     * How long about the delay period, need be re-considered,\r\n     * for now only delay, oppose to immediately\r\n     * @private\r\n     */\r\n    debounceRenderCell: (scrollX: number, scrollY: number) => void;\r\n    protected init(): void;\r\n    protected renderBackground(): void;\r\n    /**\r\n     * Render all scrollbars, default horizontal scrollbar only control viewport\r\n     * area(it means not contains row header)\r\n     * 1. individual row scrollbar\r\n     * 2. horizontal scroll bar(can control whether contains row header)\r\n     * 3. vertical scroll bar\r\n     */\r\n    protected renderScrollBars(): void;\r\n    /**\r\n     * Render all headers in {@link #foregroundGroup}, contains:\r\n     * 1. row header\r\n     * 2. col header\r\n     * 3. center frame\r\n     * 4. corner header\r\n     * 5. series number header\r\n     */\r\n    protected renderHeaders(): void;\r\n    protected getRowHeader(): RowHeader;\r\n    protected getColHeader(): ColHeader;\r\n    protected getCornerHeader(): CornerHeader;\r\n    protected getSeriesNumberHeader(): SeriesNumberHeader;\r\n    protected getCenterFrame(): Frame;\r\n    /**\r\n     * When scroll behavior happened, only render one time in a period,\r\n     * but render immediately in initiate\r\n     * @param delay debounce render cell\r\n     * @protected\r\n     */\r\n    protected dynamicRenderCell(delay?: boolean): void;\r\n    protected onAfterScroll: DebouncedFunc<() => void>;\r\n    protected saveInitColumnLeafNodes(columnNodes?: Node_2[]): void;\r\n}\r\n\r\n/**\r\n * New Base Header for all headers(cornerHeader, rowHeader, colHeader)\r\n * NOTE: Do not use this.cfg(which lays in group) to get header config,\r\n * use {@see headerConfig} instead\r\n */\r\ndeclare abstract class BaseHeader<T extends BaseHeaderConfig> extends Group {\r\n    protected headerConfig: T;\r\n    protected constructor(cfg: T);\r\n    /**\r\n     * 清空热区，为重绘做准备，防止热区重复渲染\r\n     * @param type 当前重绘的header类型\r\n     */\r\n    protected clearResizeAreaGroup(type: string): void;\r\n    render(type: string): void;\r\n    /**\r\n     * Scroll header group's x,y\r\n     * @param scrollX hScrollBar horizontal offset\r\n     * @param scrollY hScrollBar vertical offset\r\n     * @param type\r\n     */\r\n    onScrollXY(scrollX: number, scrollY: number, type: string): void;\r\n    /**\r\n     * Only call when hRowScrollBar scrolls\r\n     * @param rowScrollX  hRowScrollbar horizontal offset\r\n     * @param type\r\n     */\r\n    onRowScrollX(rowScrollX: number, type: string): void;\r\n    protected abstract layout(): any;\r\n    protected abstract offset(): any;\r\n    protected abstract clip(): any;\r\n    clear(): void;\r\n    /**\r\n     * Check whether header cell in viewPort\r\n     * @param gridPos\r\n     * @param gridSize\r\n     * @param viewportPos\r\n     * @param viewportSize\r\n     */\r\n    protected isHeaderCellInViewport: (gridPos: any, gridSize: any, viewportPos: any, viewportSize: any) => boolean;\r\n}\r\n\r\n/**\r\n * Base header config interface\r\n */\r\ndeclare interface BaseHeaderConfig {\r\n    scrollX?: number;\r\n    scrollY?: number;\r\n    width: number;\r\n    height: number;\r\n    originalWidth?: number;\r\n    originalHeight?: number;\r\n    viewportWidth: number;\r\n    viewportHeight: number;\r\n    position: Point;\r\n    data: Node_2[];\r\n    spreadsheet: SpreadSheet;\r\n    sortParam?: SortParam;\r\n}\r\n\r\ndeclare interface BaseNodeConfig {\r\n    id: string;\r\n    key: string;\r\n    value: string;\r\n    label?: string;\r\n    level?: number;\r\n    rowIndex?: number;\r\n    colIndex?: number;\r\n    parent?: Node_2;\r\n    isTotals?: boolean;\r\n    isSubTotals?: boolean;\r\n    isCollapsed?: boolean;\r\n    isGrandTotals?: boolean;\r\n    hierarchy?: Hierarchy;\r\n    isPivotMode?: boolean;\r\n    seriesNumberWidth?: number;\r\n    field?: string;\r\n    spreadsheet?: SpreadSheet;\r\n    query?: Record<string, any>;\r\n    belongsCell?: S2CellType;\r\n    isTotalMeasure?: boolean;\r\n    inCollapseNode?: boolean;\r\n    isLeaf?: boolean;\r\n    x?: number;\r\n    y?: number;\r\n    width?: number;\r\n    height?: number;\r\n    padding?: number;\r\n    children?: Node_2[];\r\n    extra?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * Base tooltips component\r\n */\r\nexport declare class BaseTooltip {\r\n    spreadsheet: SpreadSheet;\r\n    container: HTMLElement;\r\n    options: TooltipShowOptions;\r\n    position: TooltipPosition;\r\n    constructor(spreadsheet: SpreadSheet);\r\n    /**\r\n     * Show toolTips\r\n     * @param position\r\n     * @param data\r\n     * @param options {@link TooltipOptions}\r\n     * @param content\r\n     */\r\n    show<T = Element | string>(showOptions: TooltipShowOptions<T>): void;\r\n    hide(): void;\r\n    destroy(): void;\r\n    renderContent<T = TooltipContentType>(content: T): void;\r\n    clearContent(): void;\r\n    disablePointerEvent(): void;\r\n    private resetPosition;\r\n    /**\r\n     * ToolTips container element\r\n     */\r\n    protected getContainer(): HTMLElement;\r\n}\r\n\r\nexport declare interface BaseTooltipConfig<T = TooltipContentType> {\r\n    readonly showTooltip?: boolean;\r\n    readonly content?: TooltipShowOptions<T>['content'];\r\n    readonly operation?: TooltipOperation;\r\n    readonly autoAdjustBoundary?: TooltipAutoAdjustBoundary;\r\n    readonly renderTooltip?: (spreadsheet: SpreadSheet) => BaseTooltip;\r\n}\r\n\r\nexport declare interface BrushPoint {\r\n    rowIndex: number;\r\n    colIndex: number;\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport declare interface BrushRange {\r\n    start: BrushPoint;\r\n    end: BrushPoint;\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\n/**\r\n * Panel area's brush selection interaction\r\n */\r\nexport declare class BrushSelection extends BaseEvent implements BaseEventImplement {\r\n    displayedDataCells: DataCell[];\r\n    prepareSelectMaskShape: IShape;\r\n    startBrushPoint: BrushPoint;\r\n    endBrushPoint: BrushPoint;\r\n    brushRangeDataCells: DataCell[];\r\n    brushSelectionStage: InteractionBrushSelectionStage;\r\n    private brushSelectionMinimumMoveDistance;\r\n    bindEvents(): void;\r\n    private getPrepareSelectMaskTheme;\r\n    private initPrepareSelectMaskShape;\r\n    private setBrushSelectionStage;\r\n    private bindMouseDown;\r\n    private bindMouseMove;\r\n    private bindMouseUp;\r\n    private resetDrag;\r\n    private isValidBrushSelection;\r\n    private setDisplayedDataCells;\r\n    private updatePrepareSelectMask;\r\n    hidePrepareSelectMaskShape(): void;\r\n    private getBrushPoint;\r\n    private getBrushRange;\r\n    private isInBrushRange;\r\n    private getBrushRangeDataCells;\r\n    private showPrepareSelectedCells;\r\n    private updateSelectedCells;\r\n}\r\n\r\nexport declare const buildTableHierarchy: (params: TableHeaderParams) => void;\r\n\r\nexport declare interface CalcTotals {\r\n    aggregation?: Aggregation;\r\n    calcFunc?: (query: DataType, arr: DataType[]) => number;\r\n}\r\n\r\ndeclare type CanvasEventHandler = (event: Event_2) => void;\r\n\r\nexport declare interface CellAppendInfo<T = Node_2> extends Partial<ResizeInfo> {\r\n    isRowHeaderText?: boolean;\r\n    cellData?: T;\r\n}\r\n\r\nexport declare interface CellAttrs<T extends Record<string, unknown> = Node_2> extends ShapeAttrs {\r\n    text?: string;\r\n    appendInfo?: CellAppendInfo<T>;\r\n}\r\n\r\nexport declare enum CellBorderPosition {\r\n    TOP = \"TOP\",\r\n    BOTTOM = \"BOTTOM\",\r\n    LEFT = \"LEFT\",\r\n    RIGHT = \"RIGHT\"\r\n}\r\n\r\nexport declare type CellCallback<T extends BaseHeaderConfig> = (node: Node_2, spreadsheet: SpreadSheet, headerConfig: T) => S2CellType;\r\n\r\nexport declare interface CellCfg {\r\n    width?: number;\r\n    height?: number;\r\n    valuesCfg?: {\r\n        originalValueField?: string;\r\n        widthPercentCfg?: number[];\r\n        conditions?: {\r\n            text: Condition;\r\n        };\r\n    };\r\n}\r\n\r\nexport declare interface CellDataParams {\r\n    query: DataType;\r\n    isTotals?: boolean;\r\n    rowNode?: Node_2;\r\n    isRow?: boolean;\r\n}\r\n\r\nexport declare interface CellMeta {\r\n    id: string;\r\n    colIndex: number;\r\n    rowIndex: number;\r\n    type: CellTypes;\r\n}\r\n\r\nexport declare interface CellScrollPosition {\r\n    scrollX: number;\r\n    scrollY: number;\r\n    thumbOffset?: number;\r\n}\r\n\r\nexport declare interface CellTheme {\r\n    crossBackgroundColor?: string;\r\n    backgroundColor?: string;\r\n    backgroundColorOpacity?: number;\r\n    horizontalBorderColor?: string;\r\n    horizontalBorderColorOpacity?: number;\r\n    verticalBorderColor?: string;\r\n    verticalBorderColorOpacity?: number;\r\n    horizontalBorderWidth?: number;\r\n    verticalBorderWidth?: number;\r\n    padding: Padding;\r\n    interactionState?: InteractionState;\r\n    miniBarChartHeight?: number;\r\n    miniBarChartFillColor?: string;\r\n}\r\n\r\nexport declare type CellThemes = {\r\n    [K in CellTypes]?: DefaultCellTheme;\r\n};\r\n\r\nexport declare enum CellTypes {\r\n    DATA_CELL = \"dataCell\",\r\n    HEADER_CELL = \"headerCell\",\r\n    ROW_CELL = \"rowCell\",\r\n    COL_CELL = \"colCell\",\r\n    CORNER_CELL = \"cornerCell\",\r\n    MERGED_CELL = \"mergedCell\"\r\n}\r\n\r\n/**\r\n * @desc clear the interaction state information\r\n * @param spreadsheet sheet instance\r\n */\r\nexport declare const clearState: (spreadsheet: SpreadSheet) => void;\r\n\r\nexport declare class ColCell extends HeaderCell {\r\n    protected headerConfig: ColHeaderConfig;\r\n    protected textAndIconPositionWhenHorizontalScrolling: Point;\r\n    get cellType(): CellTypes;\r\n    protected initCell(): void;\r\n    protected drawBackgroundShape(): void;\r\n    protected drawInteractiveBgShape(): void;\r\n    protected getTextStyle(): TextTheme;\r\n    protected getFormattedFieldValue(): FormatResult;\r\n    protected getMaxTextWidth(): number;\r\n    protected getIconPosition(): Point;\r\n    protected getTextPosition(): Point;\r\n    protected getActionIconsWidth(): number;\r\n    protected getColResizeAreaKey(): string;\r\n    protected getColResizeArea(): IGroup;\r\n    protected getHorizontalResizeAreaName(): string;\r\n    protected drawHorizontalResizeArea(): void;\r\n    protected shouldAddVerticalResizeArea(): boolean;\r\n    protected getVerticalResizeAreaOffset(): {\r\n        x: number;\r\n        y: number;\r\n    };\r\n    protected drawVerticalResizeArea(): void;\r\n    private drawResizeArea;\r\n    protected drawHorizontalBorder(): void;\r\n    protected drawVerticalBorder(): void;\r\n    protected drawBorders(): void;\r\n    protected hasHiddenColumnCell(): boolean;\r\n    private getExpandIconTheme;\r\n    private addExpandColumnSplitLine;\r\n    private addExpandColumnIconShapes;\r\n    private addExpandColumnIcon;\r\n    private getExpandColumnIconConfig;\r\n    private isLastColumn;\r\n}\r\n\r\nexport declare interface ColCfg {\r\n    height?: number;\r\n    widthByFieldValue?: Record<string, number>;\r\n    heightByField?: Record<string, number>;\r\n    hideMeasureColumn?: boolean;\r\n}\r\n\r\n/**\r\n * Column Header for SpreadSheet\r\n */\r\nexport declare class ColHeader extends BaseHeader<ColHeaderConfig> {\r\n    protected scrollGroup: IGroup_2;\r\n    protected background: IShape_2;\r\n    constructor(cfg: ColHeaderConfig);\r\n    /**\r\n     * Make colHeader scroll with hScrollBar\r\n     * @param scrollX horizontal offset\r\n     * @param cornerWidth only has real meaning when scroll contains rowCell\r\n     * @param type\r\n     */\r\n    onColScroll(scrollX: number, type: string): void;\r\n    protected clip(): void;\r\n    clear(): void;\r\n    protected getCellInstance(item: Node_2, spreadsheet: SpreadSheet, headerConfig: ColHeaderConfig): ColCell;\r\n    protected getCellGroup(node: Node_2): IGroup_2;\r\n    protected isColCellInRect(item: Node_2): boolean;\r\n    protected layout(): void;\r\n    protected offset(): void;\r\n}\r\n\r\nexport declare interface ColHeaderConfig extends BaseHeaderConfig {\r\n    formatter: (field: string) => Formatter;\r\n    cornerWidth?: number;\r\n    scrollContainsRowHeader?: boolean;\r\n}\r\n\r\ndeclare type CollapsedRowsType = {\r\n    collapsedRows: Record<string, boolean> & {\r\n        [x: number]: any;\r\n    };\r\n};\r\n\r\n/**\r\n * One field can hold a condition\r\n */\r\nexport declare interface Condition {\r\n    readonly field: string | RegExp;\r\n    readonly mapping: MappingFunction;\r\n}\r\n\r\nexport declare interface Conditions {\r\n    readonly text?: Condition[];\r\n    readonly background?: Condition[];\r\n    readonly interval?: Condition[];\r\n    readonly icon?: IconCondition[];\r\n}\r\n\r\nexport declare const convertString: (v: string) => string;\r\n\r\n/**\r\n * Copy data\r\n * @param sheetInstance\r\n * @param isFormat\r\n * @param split\r\n */\r\nexport declare const copyData: (sheetInstance: SpreadSheet, split: string, isFormat?: boolean) => string;\r\n\r\nexport declare const copyToClipboard: (str: string) => Promise<void>;\r\n\r\nexport declare const copyToClipboardByClipboard: (str: string) => Promise<void>;\r\n\r\nexport declare const copyToClipboardByExecCommand: (str: string) => Promise<void>;\r\n\r\nexport declare const CORNER_MAX_WIDTH_RATIO = 0.5;\r\n\r\ndeclare class CornerBBox extends BaseBBox {\r\n    calculateBBox(): void;\r\n    private getCornerBBoxHeight;\r\n    private getCornerBBoxWidth;\r\n    private adjustCornerBBoxWidth;\r\n}\r\n\r\nexport declare class CornerCell extends HeaderCell {\r\n    protected headerConfig: CornerHeaderConfig;\r\n    protected textShapes: IShape[];\r\n    cornerType: CornerNodeType;\r\n    get cellType(): CellTypes;\r\n    update(): void;\r\n    protected initCell(): void;\r\n    protected drawCellText(): void;\r\n    /**\r\n     * 绘制折叠展开的icon\r\n     */\r\n    private drawTreeIcon;\r\n    private drawBackgroundShape;\r\n    /**\r\n     * Render cell horizontalBorder border\r\n     * @private\r\n     */\r\n    protected drawBorderShape(): void;\r\n    private isLastRowCornerCell;\r\n    private getResizeAreaEffect;\r\n    private drawResizeArea;\r\n    private showTreeIcon;\r\n    protected getIconPosition(): Point;\r\n    private getTreeIconWidth;\r\n    protected getTextStyle(): TextTheme;\r\n    protected getFormattedFieldValue(): FormatResult;\r\n    protected getMaxTextWidth(): number;\r\n    protected getTextPosition(): Point;\r\n}\r\n\r\n/**\r\n * Corner Header for SpreadSheet\r\n */\r\nexport declare class CornerHeader extends BaseHeader<CornerHeaderConfig> {\r\n    /**\r\n     * Get corner Header by config\r\n     * @param panelBBox\r\n     * @param cornerBBox\r\n     * @param seriesNumberWidth\r\n     * @param cfg\r\n     * @param layoutResult\r\n     * @param s2 spreadsheet\r\n     */\r\n    static getCornerHeader(panelBBox: PanelBBox, cornerBBox: CornerBBox, seriesNumberWidth: number, cfg: SpreadSheetFacetCfg, layoutResult: LayoutResult, s2: SpreadSheet): CornerHeader;\r\n    static getCornerNodes(position: Point, width: number, height: number, rows: string[], columns: string[], rowsHierarchy: Hierarchy, colsHierarchy: Hierarchy, dataSet: BaseDataSet, seriesNumberWidth: number, s2: SpreadSheet): Node_2[];\r\n    constructor(cfg: CornerHeaderConfig);\r\n    /**\r\n     *  Make cornerHeader scroll with hScrollBar\r\n     * @param scrollX\r\n     */\r\n    onCorScroll(scrollX: number, type: string): void;\r\n    destroy(): void;\r\n    protected layout(): void;\r\n    protected renderCells(): void;\r\n    protected offset(): void;\r\n    protected clip(): void;\r\n    protected addBgRect(): void;\r\n}\r\n\r\nexport declare type CornerHeaderCallback = (parent: S2CellType, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => void;\r\n\r\nexport declare interface CornerHeaderConfig extends BaseHeaderConfig {\r\n    hierarchyType: S2Options['hierarchyType'];\r\n    hierarchyCollapse: boolean;\r\n    rows: string[];\r\n    columns: string[];\r\n    seriesNumberWidth: number;\r\n}\r\n\r\nexport declare enum CornerNodeType {\r\n    Row = \"row\",\r\n    Col = \"col\",\r\n    Series = \"series\"\r\n}\r\n\r\n/**\r\n * the label names of rows or columns.\r\n * Using the ID_SEPARATOR('[&]') to join two labels\r\n * when there are hierarchical relations between them.\r\n */\r\nexport declare interface CustomHeaderCells {\r\n    cellLabels: string[];\r\n    mode?: 'pick' | 'omit';\r\n}\r\n\r\nexport declare interface CustomInteraction {\r\n    key: string;\r\n    interaction: InteractionConstructor;\r\n}\r\n\r\nexport declare const customMerge: (...objects: unknown[]) => any;\r\n\r\nexport declare interface CustomSVGIcon {\r\n    name: string;\r\n    svg: string;\r\n}\r\n\r\nexport declare interface CustomTreeItem {\r\n    key: string;\r\n    title: string;\r\n    collapsed?: boolean;\r\n    description?: string;\r\n    children?: CustomTreeItem[];\r\n}\r\n\r\nexport declare class CustomTreePivotDataSet extends PivotDataSet {\r\n    getCellData(params: CellDataParams): DataType;\r\n    setDataCfg(dataCfg: S2DataConfig): void;\r\n    processDataCfg(dataCfg: S2DataConfig): S2DataConfig;\r\n}\r\n\r\nexport declare type Data = Record<string, DataItem>;\r\n\r\n/**\r\n * DataCell for panelGroup area\r\n * ----------------------------\r\n * |                  |       |\r\n * |interval      text| icon  |\r\n * |                  |       |\r\n * ----------------------------\r\n * There are four conditions(]{@see BaseCell.conditions}) to determine how to render\r\n * 1、background color\r\n * 2、icon align in right with size {@link ICON_SIZE}\r\n * 3、left rect area is interval(in left) and text(in right)\r\n */\r\nexport declare class DataCell extends BaseCell<ViewMeta> {\r\n    protected conditions: Conditions;\r\n    protected conditionIntervalShape: IShape;\r\n    protected conditionIconShape: GuiIcon;\r\n    get cellType(): CellTypes;\r\n    protected handlePrepareSelect(cells: CellMeta[]): void;\r\n    protected handleSelect(cells: CellMeta[]): void;\r\n    protected handleHover(cells: CellMeta[]): void;\r\n    update(): void;\r\n    setMeta(viewMeta: ViewMeta): void;\r\n    protected initCell(): void;\r\n    protected getTextStyle(): TextTheme;\r\n    getIconStyle(): IconCfg | undefined;\r\n    protected getFormattedFieldValue(): FormatResult;\r\n    protected getMaxTextWidth(): number;\r\n    protected getTextPosition(): Point_2;\r\n    protected drawConditionIconShapes(): void;\r\n    /**\r\n     * 计算柱图的 scale 函数（两种情况）\r\n     *\r\n     * min_________x_____0___________________________max\r\n     * |<----r---->|\r\n     *\r\n     * 0_________________min_________x_______________max\r\n     * |<-------------r------------->|\r\n     *\r\n     * @param minValue in current field values\r\n     * @param max in current field values\r\n     */\r\n    private getIntervalScale;\r\n    /**\r\n     * Draw interval condition shape\r\n     * @private\r\n     */\r\n    protected drawConditionIntervalShape(): void;\r\n    getBackgroundColor(): {\r\n        backgroundColor: string;\r\n        strokeColor: string;\r\n    };\r\n    /**\r\n     * Draw cell background\r\n     */\r\n    protected drawBackgroundShape(): void;\r\n    /**\r\n     * 绘制hover悬停，刷选的外框\r\n     */\r\n    protected drawInteractiveBorderShape(): void;\r\n    /**\r\n     * Draw interactive color\r\n     */\r\n    protected drawInteractiveBgShape(): void;\r\n    private changeRowColSelectState;\r\n    /**\r\n     * Render cell border controlled by verticalBorder & horizontalBorder\r\n     * @private\r\n     */\r\n    protected drawBorderShape(): void;\r\n    /**\r\n     * Find current field related condition\r\n     * @param conditions\r\n     */\r\n    protected findFieldCondition(conditions: Condition[]): Condition;\r\n    /**\r\n     * Mapping value to get condition related attrs\r\n     * @param condition\r\n     */\r\n    protected mappingValue(condition: Condition): MappingResult;\r\n    updateByState(stateName: InteractionStateName): void;\r\n    clearUnselectedState(): void;\r\n    protected drawLeftBorder(): void;\r\n}\r\n\r\nexport declare type DataCellCallback = (viewMeta: ViewMeta) => S2CellType;\r\n\r\nexport declare class DataCellClick extends BaseEvent implements BaseEventImplement {\r\n    bindEvents(): void;\r\n    private bindDataCellClick;\r\n    private getTooltipOperator;\r\n    private showTooltip;\r\n    private emitLinkFieldClickEvent;\r\n}\r\n\r\nexport declare class DataCellMultiSelection extends BaseEvent implements BaseEventImplement {\r\n    private isMultiSelection;\r\n    bindEvents(): void;\r\n    private bindKeyboardDown;\r\n    private bindKeyboardUp;\r\n    private getSelectedCells;\r\n    private bindDataCellClick;\r\n}\r\n\r\nexport declare type DataItem = SimpleDataItem | MultiData;\r\n\r\nexport declare type DataParam = {\r\n    spreadsheet: SpreadSheet;\r\n    options?: TooltipOptions;\r\n    isHeader?: boolean;\r\n    getShowValue?: (selectedData: TooltipDataItem[], valueField: string) => string | number;\r\n};\r\n\r\nexport declare type DataPathParams = {\r\n    rowDimensionValues: string[];\r\n    colDimensionValues: string[];\r\n    isFirstCreate?: boolean;\r\n    careUndefined?: boolean;\r\n    rowFields?: string[];\r\n    colFields?: string[];\r\n    rowPivotMeta?: PivotMeta;\r\n    colPivotMeta?: PivotMeta;\r\n};\r\n\r\nexport declare type DataType = Record<string, any>;\r\n\r\nexport declare const DEBUG_HEADER_LAYOUT = \"Header Layout\";\r\n\r\nexport declare const DEBUG_TRANSFORM_DATA = \"Transform Data\";\r\n\r\nexport declare const DEBUG_VIEW_RENDER = \"Data Cell Render\";\r\n\r\nexport declare class DebuggerUtil {\r\n    private static instance;\r\n    private debug;\r\n    static getInstance(): DebuggerUtil;\r\n    setDebug(debug: boolean): void;\r\n    debugCallback: (info: string, callback: () => void) => void;\r\n    logger: (info: string, ...params: unknown[]) => void;\r\n}\r\n\r\nexport declare const DEFAULT_DATA_CONFIG: Readonly<S2DataConfig>;\r\n\r\nexport declare const DEFAULT_OPTIONS: Readonly<S2Options>;\r\n\r\nexport declare const DEFAULT_STYLE: Readonly<Style>;\r\n\r\nexport declare const DEFAULT_VALUE_RANGES: {};\r\n\r\nexport declare interface DefaultCellTheme extends GridAnalysisCellTheme {\r\n    bolderText?: TextTheme;\r\n    text?: TextTheme;\r\n    cell?: CellTheme;\r\n    icon?: IconTheme;\r\n    seriesNumberWidth?: number;\r\n}\r\n\r\n/**\r\n * 对比两个TempMergedCell，返回 mainTempMergedCells 中存在的，但是 otherTempMergedCells 中不存在的的 TempMergedCell\r\n * 因为 g-base 无法渲染不在可视区域内的图形，所以 isPartiallyVisible 为 true 时也需要重新渲染\r\n * @param mainTempMergedCells\r\n * @param compareTempMergedCells\r\n */\r\nexport declare const differenceTempMergedCells: (mainTempMergedCells: TempMergedCell[], compareTempMergedCells: TempMergedCell[]) => TempMergedCell[];\r\n\r\nexport declare const download: (str: string, fileName: string) => void;\r\n\r\n/**\r\n * @desc draw text shape of object\r\n * @param cell\r\n * @multiData 自定义文本内容\r\n * @disabledConditions 是否禁用条件格式\r\n */\r\nexport declare const drawObjectText: (cell: S2CellType, multiData?: MultiData, disabledConditions?: boolean) => void;\r\n\r\nexport declare enum EAggregation {\r\n    SUM = \"SUM\"\r\n}\r\n\r\nexport declare interface EmitterType {\r\n    /** ================ Global ================  */\r\n    [S2Event.GLOBAL_ACTION_ICON_CLICK]: CanvasEventHandler;\r\n    [S2Event.GLOBAL_ACTION_ICON_HOVER]: CanvasEventHandler;\r\n    [S2Event.GLOBAL_COPIED]: (data: string) => void;\r\n    [S2Event.GLOBAL_KEYBOARD_DOWN]: KeyboardEventHandler;\r\n    [S2Event.GLOBAL_KEYBOARD_UP]: KeyboardEventHandler;\r\n    [S2Event.GLOBAL_MOUSE_UP]: MouseEventHandler;\r\n    [S2Event.LAYOUT_RESIZE_MOUSE_DOWN]: CanvasEventHandler;\r\n    [S2Event.LAYOUT_RESIZE_MOUSE_UP]: CanvasEventHandler;\r\n    [S2Event.LAYOUT_RESIZE_MOUSE_MOVE]: CanvasEventHandler;\r\n    [S2Event.GLOBAL_CONTEXT_MENU]: CanvasEventHandler;\r\n    [S2Event.GLOBAL_RESET]: EventHandler_3;\r\n    [S2Event.GLOBAL_HOVER]: CanvasEventHandler;\r\n    [S2Event.GLOBAL_SELECTED]: SelectedHandler;\r\n    /** ================ Sort ================  */\r\n    [S2Event.RANGE_SORT]: (info: SortParams_2) => void;\r\n    [S2Event.RANGE_SORTED]: (rangeData: Data[]) => any;\r\n    /** ================ Filter ================  */\r\n    [S2Event.RANGE_FILTER]: (info: FilterParam) => void;\r\n    [S2Event.RANGE_FILTERED]: (data: Data[]) => any;\r\n    /** ================ Cell ================  */\r\n    [S2Event.GLOBAL_LINK_FIELD_JUMP]: (data: {\r\n        key: string;\r\n        record: Data;\r\n    }) => void;\r\n    /** ================ Date Cell ================  */\r\n    [S2Event.DATA_CELL_MOUSE_DOWN]: CanvasEventHandler;\r\n    [S2Event.DATA_CELL_MOUSE_UP]: CanvasEventHandler;\r\n    [S2Event.DATA_CELL_MOUSE_MOVE]: CanvasEventHandler;\r\n    [S2Event.DATA_CELL_HOVER]: CanvasEventHandler;\r\n    [S2Event.DATA_CELL_CLICK]: CanvasEventHandler;\r\n    [S2Event.DATA_CELL_DOUBLE_CLICK]: CanvasEventHandler;\r\n    [S2Event.DATA_CELL_TREND_ICON_CLICK]: (data: ViewMeta) => void;\r\n    [S2Event.DATE_CELL_BRUSH_SELECTION]: (cells: DataCell[]) => void;\r\n    /** ================ Row Cell ================  */\r\n    [S2Event.ROW_CELL_MOUSE_DOWN]: CanvasEventHandler;\r\n    [S2Event.ROW_CELL_MOUSE_MOVE]: CanvasEventHandler;\r\n    [S2Event.ROW_CELL_HOVER]: CanvasEventHandler;\r\n    [S2Event.ROW_CELL_CLICK]: CanvasEventHandler;\r\n    [S2Event.ROW_CELL_DOUBLE_CLICK]: CanvasEventHandler;\r\n    [S2Event.ROW_CELL_MOUSE_UP]: CanvasEventHandler;\r\n    [S2Event.ROW_CELL_COLLAPSE_TREE_ROWS]: (data: RowCellCollapseTreeRowsType) => void;\r\n    /** ================ Col Cell ================  */\r\n    [S2Event.COL_CELL_MOUSE_DOWN]: CanvasEventHandler;\r\n    [S2Event.COL_CELL_MOUSE_MOVE]: CanvasEventHandler;\r\n    [S2Event.COL_CELL_HOVER]: CanvasEventHandler;\r\n    [S2Event.COL_CELL_CLICK]: CanvasEventHandler;\r\n    [S2Event.COL_CELL_DOUBLE_CLICK]: CanvasEventHandler;\r\n    [S2Event.COL_CELL_MOUSE_UP]: CanvasEventHandler;\r\n    /** ================ Corner Cell ================  */\r\n    [S2Event.CORNER_CELL_MOUSE_MOVE]: CanvasEventHandler;\r\n    [S2Event.CORNER_CELL_MOUSE_DOWN]: CanvasEventHandler;\r\n    [S2Event.CORNER_CELL_HOVER]: CanvasEventHandler;\r\n    [S2Event.CORNER_CELL_CLICK]: CanvasEventHandler;\r\n    [S2Event.CORNER_CELL_DOUBLE_CLICK]: CanvasEventHandler;\r\n    [S2Event.CORNER_CELL_MOUSE_UP]: CanvasEventHandler;\r\n    /** ================ Merged Cell ================  */\r\n    [S2Event.MERGED_CELLS_MOUSE_DOWN]: CanvasEventHandler;\r\n    [S2Event.MERGED_CELLS_MOUSE_MOVE]: CanvasEventHandler;\r\n    [S2Event.MERGED_CELLS_HOVER]: CanvasEventHandler;\r\n    [S2Event.MERGED_CELLS_MOUSE_UP]: CanvasEventHandler;\r\n    [S2Event.MERGED_CELLS_CLICK]: CanvasEventHandler;\r\n    [S2Event.MERGED_CELLS_DOUBLE_CLICK]: CanvasEventHandler;\r\n    /** ================ Layout ================  */\r\n    [S2Event.LAYOUT_COLLAPSE_ROWS]: (data: CollapsedRowsType) => void;\r\n    [S2Event.LAYOUT_AFTER_COLLAPSE_ROWS]: (data: CollapsedRowsType) => void;\r\n    [S2Event.LAYOUT_TREE_ROWS_COLLAPSE_ALL]: (hierarchyCollapse: boolean) => void;\r\n    [S2Event.LAYOUT_PAGINATION]: (data: {\r\n        pageSize: number;\r\n        pageCount: number;\r\n        total: number;\r\n        current: number;\r\n    }) => void;\r\n    [S2Event.LAYOUT_AFTER_HEADER_LAYOUT]: (data: LayoutResult) => void;\r\n    [S2Event.LAYOUT_CELL_SCROLL]: (data: CellScrollPosition) => void;\r\n    [S2Event.LAYOUT_COLS_EXPANDED]: (expandedNode: Node_2) => void;\r\n    [S2Event.LAYOUT_COLS_HIDDEN]: (currentHiddenColumnsInfo: HiddenColumnsInfo, hiddenColumnsDetail: HiddenColumnsInfo[]) => void;\r\n    [S2Event.LAYOUT_BEFORE_RENDER]: () => void;\r\n    [S2Event.LAYOUT_AFTER_RENDER]: () => void;\r\n    [S2Event.LAYOUT_DESTROY]: () => void;\r\n    /** ================ Layout Resize ================  */\r\n    [S2Event.LAYOUT_RESIZE]: ResizeHandler;\r\n    [S2Event.LAYOUT_RESIZE_SERIES_WIDTH]: ResizeHandler;\r\n    [S2Event.LAYOUT_RESIZE_ROW_WIDTH]: ResizeHandler;\r\n    [S2Event.LAYOUT_RESIZE_ROW_HEIGHT]: ResizeHandler;\r\n    [S2Event.LAYOUT_RESIZE_COL_WIDTH]: ResizeHandler;\r\n    [S2Event.LAYOUT_RESIZE_COL_HEIGHT]: ResizeHandler;\r\n    [S2Event.LAYOUT_RESIZE_TREE_WIDTH]: ResizeHandler;\r\n}\r\n\r\nexport declare const EMPTY_PLACEHOLDER = \"-\";\r\n\r\nexport declare class EventController {\r\n    spreadsheet: SpreadSheet;\r\n    private target;\r\n    canvasEventHandlers: EventHandler_2[];\r\n    s2EventHandlers: S2EventHandler[];\r\n    domEventListeners: EventListener_2[];\r\n    constructor(spreadsheet: SpreadSheet);\r\n    get canvasContainer(): Canvas;\r\n    get isAutoResetSheetStyle(): boolean;\r\n    bindEvents(): void;\r\n    private getTargetType;\r\n    private onKeyboardCopy;\r\n    private onKeyboardEsc;\r\n    private resetSheetStyle;\r\n    private isMouseOnTheCanvasContainer;\r\n    private getContainerRect;\r\n    private isMouseOnTheTooltip;\r\n    private isResizeArea;\r\n    private activeResizeArea;\r\n    private resetResizeArea;\r\n    private onCanvasMousedown;\r\n    private onCanvasMousemove;\r\n    private onCanvasMouseup;\r\n    private onCanvasDoubleClick;\r\n    private onCanvasMouseout;\r\n    private onCanvasContextMenu;\r\n    clear(): void;\r\n    private unbindEvents;\r\n    private addCanvasEvent;\r\n    private addS2Event;\r\n    private addDomEventListener;\r\n    clearAllEvents(): void;\r\n}\r\n\r\ndeclare interface EventHandler {\r\n    target: IElement;\r\n    type: keyof HTMLElementEventMap;\r\n    handler: (e: MouseEvent | TouchEvent) => void;\r\n}\r\n\r\ndeclare interface EventHandler_2 {\r\n    type: string;\r\n    handler: (event: Event_2) => void;\r\n}\r\n\r\ndeclare type EventHandler_3 = (event: Event) => void;\r\n\r\ndeclare interface EventListener_2 {\r\n    target: EventTarget;\r\n    type: string;\r\n    handler: EventListenerOrEventListenerObject;\r\n}\r\n\r\ndeclare interface EventListenerReturn {\r\n    remove: () => void;\r\n}\r\n\r\n/**\r\n * Strategy mode's value type\r\n * data's key size must be equals fields.length\r\n * value can be empty\r\n * FieldC(Last fields is real value field)\r\n * example:\r\n * {\r\n *   fields: [fieldA, fieldB, fieldC],\r\n *   data: [\r\n *   {\r\n *     fieldA: 'valueA',\r\n *     fieldB: 'valueB',\r\n *     fieldC: 'valueC',\r\n *   }\r\n *   {\r\n *     fieldA: 'valueA',\r\n *     fieldB: '',\r\n *     fieldC: 'valueC',\r\n *   }\r\n *   ]\r\n * }\r\n */\r\nexport declare interface Extra {\r\n    key: string;\r\n    collapse: boolean;\r\n    remark: string;\r\n}\r\n\r\nexport declare const EXTRA_FIELD = \"$$extra$$\";\r\n\r\nexport declare interface Fields {\r\n    rows?: string[];\r\n    customTreeItems?: CustomTreeItem[];\r\n    columns?: string[];\r\n    values?: string[];\r\n    valueInCols?: boolean;\r\n    customValueOrder?: number;\r\n}\r\n\r\nexport declare type FilterDataItemCallback = (valueField: string, data: DataItem) => DataItem;\r\n\r\nexport declare interface FilterParam {\r\n    filterKey: string;\r\n    filteredValues?: unknown[];\r\n    customFilter?: (row: DataType) => boolean;\r\n}\r\n\r\nexport declare const FONT_FAMILY = \"Roboto, PingFangSC, BlinkMacSystemFont, Microsoft YaHei, Arial, sans-serif\";\r\n\r\nexport declare interface FormatResult {\r\n    formattedValue: string;\r\n    value: DataItem;\r\n}\r\n\r\nexport declare type Formatter = (v: unknown) => string;\r\n\r\nexport declare class Frame extends Group {\r\n    cfg: FrameConfig;\r\n    constructor(cfg: FrameConfig);\r\n    layout(): void;\r\n    /**\r\n     * 渲染\r\n     */\r\n    render(): void;\r\n    onBorderScroll(scrollX: number): void;\r\n    onChangeShadowVisibility(scrollX: number, maxScrollX: number): void;\r\n    private addCornerRightBorder;\r\n    private addCornerBottomBorder;\r\n    private addSplitLineShadow;\r\n    private addSplitLineLeftShadow;\r\n    private addSplitLineRightShadow;\r\n}\r\n\r\nexport declare type FrameCallback = (cfg: FrameConfig) => Frame;\r\n\r\nexport declare interface FrameConfig {\r\n    position: {\r\n        x: number;\r\n        y: number;\r\n    };\r\n    scrollX?: number;\r\n    width: number;\r\n    height: number;\r\n    viewportWidth: number;\r\n    viewportHeight: number;\r\n    showViewportLeftShadow: boolean;\r\n    showViewportRightShadow: boolean;\r\n    scrollContainsRowHeader: boolean;\r\n    isPivotMode: boolean;\r\n    spreadsheet: SpreadSheet;\r\n}\r\n\r\nexport declare const FRONT_GROUND_GROUP_BRUSH_SELECTION_Z_INDEX = 5;\r\n\r\nexport declare const FRONT_GROUND_GROUP_COL_FROZEN_Z_INDEX = 4;\r\n\r\nexport declare const FRONT_GROUND_GROUP_COL_SCROLL_Z_INDEX = 3;\r\n\r\nexport declare const FRONT_GROUND_GROUP_CONTAINER_Z_INDEX = 3;\r\n\r\nexport declare const FRONT_GROUND_GROUP_RESIZE_AREA_Z_INDEX = 5;\r\n\r\nexport declare const FrozenCellGroupMap: {\r\n    row: string;\r\n    col: string;\r\n    trailingCol: string;\r\n    trailingRow: string;\r\n    scroll: string;\r\n    top: string;\r\n    bottom: string;\r\n};\r\n\r\nexport declare interface FrozenCellIndex {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport declare enum FrozenCellType {\r\n    ROW = \"row\",\r\n    COL = \"col\",\r\n    TRAILING_ROW = \"trailingRow\",\r\n    TRAILING_COL = \"trailingCol\",\r\n    SCROLL = \"scroll\",\r\n    TOP = \"top\",\r\n    BOTTOM = \"bottom\"\r\n}\r\n\r\nexport declare interface FrozenOpts {\r\n    frozenRowCount: number;\r\n    frozenColCount: number;\r\n    frozenTrailingRowCount: number;\r\n    frozenTrailingColCount: number;\r\n}\r\n\r\n/**\r\n * Row and column header node id generator.\r\n * @param parentId\r\n * @param value\r\n */\r\nexport declare const generateId: (parentId: string, value: string) => string;\r\n\r\n/**\r\n * get the active cells' info as the default info of merged cells\r\n * @param sheet\r\n */\r\nexport declare const getActiveCellsInfo: (sheet: SpreadSheet) => MergedCellInfo[];\r\n\r\nexport declare const getActiveCellsTooltipData: (spreadsheet: SpreadSheet) => TooltipData[];\r\n\r\n/**\r\n * @description Return all the row cells or column cells which are needed to be highlighted.\r\n * @param id rowId or colId\r\n * @param headerCells all the rowHeader cells or all the colHeader cells\r\n * @param isRowInHierarchyTreeType  The tree mode will only highlight the leaf nodes at the head of the row\r\n */\r\nexport declare const getActiveHoverRowColCells: (id: string, headerCells: ColCell[] | RowCell[], isRowInHierarchyTreeType?: boolean) => (ColCell | RowCell)[];\r\n\r\n/**\r\n * calculate tooltip show position\r\n */\r\nexport declare const getAutoAdjustPosition: ({ spreadsheet, position, tooltipContainer, autoAdjustBoundary, }: AutoAdjustPositionOptions) => TooltipPosition;\r\n\r\nexport declare const getBaseCellData: (ev: Event_2) => TargetCellInfo;\r\n\r\nexport declare const getBorderPositionAndStyle: (position: CellBorderPosition, contentBox: SimpleBBox, style: CellTheme) => {\r\n    position: {\r\n        x1: any;\r\n        x2: any;\r\n        y1: any;\r\n        y2: any;\r\n    };\r\n    style: any;\r\n};\r\n\r\nexport declare type GetCellMeta = (rowIndex?: number, colIndex?: number) => ViewMeta;\r\n\r\nexport declare const getCellMeta: (cell: S2CellType) => {\r\n    id: string;\r\n    colIndex: number;\r\n    rowIndex: number;\r\n    type: CellTypes;\r\n};\r\n\r\n/**\r\n * 根据 cellCfg 配置获取当前单元格宽度\r\n */\r\nexport declare const getCellWidth: (cellCfg: CellCfg) => number;\r\n\r\nexport declare const getClassNameWithPrefix: (...classNames: string[]) => string;\r\n\r\n/**\r\n * -----------------------------\r\n * |           padding         |\r\n * |  |---------------------|  |\r\n * |  |                     |  |\r\n * |  |                     |  |\r\n * |  |---------------------|  |\r\n * |           padding         |\r\n * -----------------------------\r\n */\r\nexport declare const getContentArea: (bbox: SimpleBBox, padding: Padding) => {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n};\r\n\r\nexport declare const getDataCellId: (rowIndex: string, colIndex: string) => string;\r\n\r\n/**\r\n * 获取数据明细\r\n * @param spreadsheet\r\n * @param activeData\r\n * @param options\r\n */\r\nexport declare const getDetailList: (spreadsheet: SpreadSheet, activeData: TooltipDataItem, options: TooltipOptions) => ListItem[];\r\n\r\n/**\r\n * @desc 改良版 获取文本的 ... 文本（可传入 优先文本片段）\r\n * @param text 需要计算的文本\r\n * @param maxWidth\r\n * @param font optional 文本字体 或 优先显示的文本\r\n * @param priority optional 优先显示的文本\r\n */\r\nexport declare const getEllipsisText: ({ text, maxWidth, fontParam, priorityParam, placeholder, }: {\r\n    text: string | number;\r\n    maxWidth: number;\r\n    fontParam?: unknown;\r\n    priorityParam?: string[];\r\n    placeholder?: string;\r\n}) => any;\r\n\r\n/**\r\n * 获取文本的 ... 文本。\r\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\r\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\r\n * 2. 然后对最后这个字符串二分计算\r\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\r\n * @param maxWidth\r\n * @param font\r\n */\r\nexport declare const getEllipsisTextInner: (text: any, maxWidth: number, font: CSSStyleDeclaration) => any;\r\n\r\nexport declare const getFieldFormatter: (spreadsheet: SpreadSheet, field: string) => (v: any) => string | number;\r\n\r\nexport declare const getFieldList: (spreadsheet: SpreadSheet, fields: string[], activeData: TooltipDataItem) => ListItem[];\r\n\r\nexport declare const getFriendlyVal: (val: any) => number | string;\r\n\r\n/**\r\n * 获取选中格行/列头信息\r\n * @param spreadsheet\r\n * @param activeData\r\n */\r\nexport declare const getHeadInfo: (spreadsheet: SpreadSheet, activeData: TooltipDataItem, options?: TooltipOptions) => TooltipHeadInfo;\r\n\r\nexport declare const getIcon: (name: string) => string;\r\n\r\n/**\r\n * get cells on the outside of visible area through mergeCellInfo\r\n * @param invisibleCellInfo\r\n * @param sheet\r\n */\r\nexport declare const getInvisibleInfo: (invisibleCellInfo: MergedCellInfo[], sheet: SpreadSheet) => {\r\n    cells: S2CellType<ViewMeta>[];\r\n    cellsMeta: ViewMeta;\r\n};\r\n\r\nexport declare const getListItem: (spreadsheet: SpreadSheet, data: TooltipDataItem, field: string, valueField?: string) => ListItem;\r\n\r\nexport declare const getMaxTextWidth: (contentWidth: number, iconCfg?: IconCfg) => number;\r\n\r\nexport declare const getMergedQuery: (meta: ViewMeta) => {\r\n    [x: string]: any;\r\n};\r\n\r\n/**\r\n * return the edge according to the  coordinate of current edge\r\n * eg: curEdge: [[0,0], [100,0]] then the next edge: [[100, 0 ], [100, 100]]\r\n * @param curEdge the  coordinate of current edge\r\n * @param edges the collection of edges\r\n */\r\nexport declare const getNextEdge: (curEdge: number[][], edges: number[][][]) => number[][];\r\n\r\n/**\r\n * 获取当前的主题色板\r\n * @param type 主题名\r\n */\r\nexport declare const getPalette: (type?: ThemeName) => Palette;\r\n\r\n/**\r\n * return all the points of the polygon\r\n * @param cells the collection of information of cells which needed be merged\r\n */\r\nexport declare const getPolygonPoints: (cells: S2CellType[]) => number[][];\r\n\r\n/**\r\n *  according to the coordinates of the starting point of the rectangle,\r\n * return the four sides of the rectangle in a clockwise direction.\r\n * [TopLeft] --- [TopRight]\r\n *    |               |\r\n * [BottomLeft] -[BottomRight]\r\n * @param x\r\n * @param y\r\n * @param width\r\n * @param height\r\n */\r\nexport declare const getRectangleEdges: (x: number, y: number, width: number, height: number) => number[][][];\r\n\r\nexport declare const getSafetyDataConfig: (dataConfig: Partial<S2DataConfig>) => S2DataConfig;\r\n\r\nexport declare const getSafetyOptions: (options: Partial<S2Options>) => any;\r\n\r\nexport declare const getSelectedCellIndexes: (spreadsheet: SpreadSheet, layoutResult: LayoutResult) => any[];\r\n\r\nexport declare const getSelectedCellsData: (spreadsheet: SpreadSheet, showSingleTips?: boolean) => TooltipDataItem[];\r\n\r\nexport declare const getSelectedData: (spreadsheet: SpreadSheet) => string;\r\n\r\nexport declare const getSelectedValueFields: (selectedData: TooltipDataItem[], field: string) => string[];\r\n\r\nexport declare const getSummaries: (params: SummaryParam) => TooltipSummaryOptions[];\r\n\r\nexport declare const getSummaryName: (spreadsheet: SpreadSheet, currentField: any, isTotals: any) => string;\r\n\r\n/**\r\n * get the data cell and meta that make up the mergedCell\r\n * @param cellsInfos\r\n * @param allVisibleCells\r\n * @param sheet\r\n */\r\nexport declare const getTempMergedCell: (allVisibleCells: S2CellType[], sheet?: SpreadSheet, cellsInfos?: MergedCellInfo[]) => TempMergedCell;\r\n\r\nexport declare const getTextAndFollowingIconPosition: (contentBox: SimpleBBox, textCfg: TextAlignCfg, textWidth?: number, iconCfg?: IconCfg, iconCount?: number) => {\r\n    text: {\r\n        x: number;\r\n        y: number;\r\n    };\r\n    icon: {\r\n        x: number;\r\n        y: number;\r\n    };\r\n};\r\n\r\nexport declare const getTextAndIconPositionWhenHorizontalScrolling: (viewport: AreaRange, content: AreaRange, textWidth: number) => number;\r\n\r\nexport declare const getTextPosition: (contentBox: SimpleBBox, textCfg: TextAlignCfg) => {\r\n    x: number;\r\n    y: number;\r\n};\r\n\r\n/**\r\n * @describe generate the theme according to the type\r\n * @param  name\r\n */\r\nexport declare const getTheme: (themeCfg: Omit<ThemeCfg, 'theme'> & {\r\n    spreadsheet?: SpreadSheet;\r\n}) => S2Theme;\r\n\r\nexport declare const getTooltipData: (params: TooltipDataParam) => {\r\n    summaries: any;\r\n    interpretation: any;\r\n    infos: any;\r\n    tips: any;\r\n    name: any;\r\n    headInfo: any;\r\n    details: any;\r\n};\r\n\r\nexport declare const getTooltipDefaultOptions: (options?: TooltipOptions) => TooltipOptions;\r\n\r\nexport declare const getTooltipOptions: (spreadsheet: SpreadSheet, event: Event_2 | MouseEvent | Event) => Tooltip;\r\n\r\nexport declare const getTooltipOptionsByCellType: (cellTooltipConfig: Tooltip, cellType: CellTypes) => Tooltip;\r\n\r\nexport declare const getTooltipVisibleOperator: (operation: TooltipOperation, options: {\r\n    defaultMenus?: TooltipOperatorMenu[];\r\n    cell: S2CellType;\r\n}) => TooltipOperatorOptions;\r\n\r\nexport declare const getTwoDimData: (cells: CellMeta[]) => CellMeta[][];\r\n\r\nexport declare const getVerticalPosition: ({ y, height }: SimpleBBox, textBaseline: TextBaseline, size?: number) => number;\r\n\r\n/**\r\n * get { cells, invisibleCellInfo, cellsMeta } in the inside of visible area through mergeCellInfo\r\n * @param cellsInfos\r\n * @param allVisibleCells\r\n * @returns { cells, invisibleCellInfo, cellsMeta }\r\n */\r\nexport declare const getVisibleInfo: (cellsInfos: MergedCellInfo[], allVisibleCells: S2CellType[]) => {\r\n    cells: S2CellType<ViewMeta>[];\r\n    invisibleCellInfo: MergedCellInfo[];\r\n    cellsMeta: ViewMeta | Node;\r\n};\r\n\r\nexport declare interface GridAnalysisCellTheme {\r\n    minorText?: TextTheme;\r\n    derivedMeasureText?: {\r\n        mainUp: string;\r\n        mainDown: string;\r\n        minorUp: string;\r\n        minorDown: string;\r\n    };\r\n}\r\n\r\n/**\r\n * 使用 iconfont 上的 svg 来创建 Icon\r\n */\r\nexport declare class GuiIcon extends Group {\r\n    private image;\r\n    constructor(cfg: GuiIconCfg);\r\n    private getImage;\r\n    hasSupportSuffix: (image: string) => boolean;\r\n    private render;\r\n}\r\n\r\ndeclare interface GuiIconCfg extends ShapeAttrs {\r\n    readonly name: string;\r\n}\r\n\r\nexport declare const handleDataItem: (data: Data, callback?: FilterDataItemCallback | MappingDataItemCallback) => DataItem | Record<string, string | number>;\r\n\r\ndeclare class HdAdapter {\r\n    private viewport;\r\n    private devicePixelRatioMedia;\r\n    private spreadsheet;\r\n    constructor(spreadsheet: SpreadSheet);\r\n    init: () => void;\r\n    destroy: () => void;\r\n    private initDevicePixelRatioListener;\r\n    private removeDevicePixelRatioListener;\r\n    private initDeviceZoomListener;\r\n    private removeDeviceZoomListener;\r\n    private renderByDevicePixelRatioChanged;\r\n    private renderByDevicePixelRatio;\r\n    private renderByZoomScale;\r\n}\r\n\r\nexport declare interface HeaderActionIcon {\r\n    iconNames: string[];\r\n    belongsCell: Omit<CellTypes, 'dataCell'>;\r\n    defaultHide?: boolean;\r\n    displayCondition?: (mete: Node_2) => boolean;\r\n    action: (headerActionIconProps: HeaderActionIconProps) => void;\r\n}\r\n\r\nexport declare interface HeaderActionIconProps {\r\n    iconName: string;\r\n    meta: Node_2;\r\n    event?: Event_2;\r\n}\r\n\r\ndeclare abstract class HeaderCell extends BaseCell<Node_2> {\r\n    protected headerConfig: BaseHeaderConfig;\r\n    protected treeIcon: GuiIcon | undefined;\r\n    protected actionIcons: GuiIcon[];\r\n    protected handleRestOptions(...[headerConfig]: [BaseHeaderConfig]): void;\r\n    protected initCell(): void;\r\n    protected showActionIcons(actionIconCfg: HeaderActionIcon): boolean;\r\n    protected getActionIconCfg(): HeaderActionIcon;\r\n    protected showSortIcon(): boolean;\r\n    protected getActionIconsCount(): number;\r\n    protected getActionIconsWidth(): number;\r\n    protected drawSortIcons(): void;\r\n    protected hasDefaultHideActionIcon(): boolean;\r\n    protected addActionIcon(iconName: string, x: number, y: number, size: number, action: (prop: HeaderActionIconProps) => void, defaultHide?: boolean): void;\r\n    protected drawActionIcons(): void;\r\n    protected isSortCell(): boolean;\r\n    protected handleHover(cells: CellMeta[]): void;\r\n    protected handleSelect(cells: CellMeta[], nodes: Node_2[]): void;\r\n    toggleActionIcon(id: string): void;\r\n    update(): void;\r\n    updateByState(stateName: InteractionStateName): void;\r\n    hideInteractionShape(): void;\r\n}\r\n\r\nexport declare interface HiddenColumnsInfo {\r\n    hideColumnNodes: Node_2[];\r\n    displaySiblingNode: {\r\n        prev: Node_2;\r\n        next: Node_2;\r\n    };\r\n}\r\n\r\n/**\r\n * Row and Column hierarchy to handle all contained nodes\r\n */\r\nexport declare class Hierarchy {\r\n    rows: string[];\r\n    width: number;\r\n    height: number;\r\n    maxLevel: number;\r\n    sampleNodesForAllLevels?: Node_2[];\r\n    sampleNodeForLastLevel?: Node_2;\r\n    private allNodesWithoutRoot;\r\n    private indexNode;\r\n    getLeaves(): Node_2[];\r\n    /**\r\n     * Get all or level-related nodes in hierarchy\r\n     * @param level\r\n     */\r\n    getNodes(level?: number): Node_2[];\r\n    /**\r\n     * Get all or less than level-related nodes in hierarchy\r\n     * @param lessThanLevel\r\n     */\r\n    getNodesLessThanLevel(lessThanLevel: number): Node_2[];\r\n    /**\r\n     * Add new node\r\n     * @param value\r\n     * @param insetIndex\r\n     */\r\n    pushNode(value: Node_2, insetIndex?: number): void;\r\n    pushIndexNode(value: Node_2): void;\r\n    getIndexNodes(): Node_2[];\r\n}\r\n\r\nexport declare type HierarchyCallback = (spreadsheet: SpreadSheet, node: Node_2) => HierarchyResult;\r\n\r\nexport declare type HierarchyResult = {\r\n    nodes: Node_2[];\r\n    push: boolean;\r\n};\r\n\r\nexport declare const HORIZONTAL_RESIZE_AREA_KEY_PRE = \"horizontal-resize-area-\";\r\n\r\nexport declare const HOVER_FOCUS_TIME = 800;\r\n\r\n/**\r\n * @description Hover event for data cells, row cells and col cells\r\n */\r\nexport declare class HoverEvent extends BaseEvent implements BaseEventImplement {\r\n    bindEvents(): void;\r\n    updateRowColCells(meta: ViewMeta): void;\r\n    /**\r\n     * @description change the data cell state from hover to hover focus\r\n     * @param cell\r\n     * @param event\r\n     * @param meta\r\n     */\r\n    private changeStateToHoverFocus;\r\n    /**\r\n     * @description handle the row or column header hover state\r\n     * @param event\r\n     */\r\n    private handleHeaderHover;\r\n    private getCellInfo;\r\n    bindDataCellHover(): void;\r\n    bindRowCellHover(): void;\r\n    bindColCellHover(): void;\r\n}\r\n\r\n/**\r\n * 国际化方法\r\n * 国际化是 eva 整个整体设置，不跟着实例走！默认认为同一页面，不可能出现中文和英文两种语言\r\n *\r\n */\r\nexport declare const i18n: (key: string, defaultValue?: string) => any;\r\n\r\nexport declare type IconCfg = Pick<IconTheme, 'size' | 'margin'> & Pick<IconCondition, 'position'>;\r\n\r\nexport declare interface IconCondition extends Condition {\r\n    readonly position?: IconPosition;\r\n}\r\n\r\nexport declare type IconPosition = 'left' | 'right';\r\n\r\nexport declare type IconProps = {\r\n    icon: Element | string;\r\n    [key: string]: unknown;\r\n};\r\n\r\nexport declare interface IconTheme {\r\n    fill?: string;\r\n    downIconColor?: string;\r\n    upIconColor?: string;\r\n    size?: number;\r\n    margin?: Margin;\r\n}\r\n\r\nexport declare const ID_SEPARATOR = \"[&]\";\r\n\r\nexport declare const IMAGE = \"image\";\r\n\r\n/**\r\n * @description  Determine if the current cell belongs to Cells\r\n * @param cells active cells\r\n * @param currentCell current activated cell\r\n */\r\nexport declare const includeCell: (cells: CellMeta[], currentCell: S2CellType) => boolean;\r\n\r\ndeclare type Indexes = [number, number, number, number];\r\n\r\nexport declare const INTERACTION_STATE_INFO_KEY = \"interactionStateInfo\";\r\n\r\nexport declare enum InteractionBrushSelectionStage {\r\n    CLICK = \"click\",\r\n    UN_DRAGGED = \"unDragged\",\r\n    DRAGGED = \"dragged\"\r\n}\r\n\r\nexport declare type InteractionConstructor = new (spreadsheet: SpreadSheet) => BaseEvent;\r\n\r\nexport declare enum InteractionEvent {\r\n    DATA_CELL_CLICK_EVENT = \"interaction:data-cell-click\",\r\n    MERGED_CELLS_CLICK_EVENT = \"interaction:merged-cells-click\",\r\n    CORNER_TEXT_CLICK_EVENT = \"interaction:corner-cell-text-click\",\r\n    ROW_COLUMN_CLICK_EVENT = \"interaction:row-column-click\",\r\n    ROW_TEXT_CLICK_EVENT = \"interaction:row-text-click\",\r\n    HOVER_EVENT = \"interaction:hover\",\r\n    TREND_ICON_CLICK = \"interaction:trend-icon-click\"\r\n}\r\n\r\nexport declare enum InteractionKeyboardKey {\r\n    SHIFT = \"Shift\",\r\n    COPY = \"c\",\r\n    ESC = \"Escape\",\r\n    META = \"Meta\",\r\n    ARROW_UP = \"ArrowUp\",\r\n    ARROW_DOWN = \"ArrowDown\",\r\n    ARROW_LEFT = \"ArrowLeft\",\r\n    ARROW_RIGHT = \"ArrowRight\"\r\n}\r\n\r\nexport declare enum InteractionName {\r\n    DATA_CELL_CLICK = \"dataCellClick\",\r\n    MERGED_CELLS_CLICK = \"mergedCellsClick\",\r\n    ROW_COLUMN_CLICK = \"rowColumnClick\",\r\n    ROW_TEXT_CLICK = \"rowTextClick\",\r\n    HOVER = \"hover\",\r\n    BRUSH_SELECTION = \"brushSelection\",\r\n    COL_ROW_RESIZE = \"rowColResize\",\r\n    DATA_CELL_MULTI_SELECTION = \"dataCellMultiSelection\",\r\n    RANGE_SELECTION = \"rangeSelection\",\r\n    SELECTED_CELL_MOVE = \"selectedCellMove\"\r\n}\r\n\r\nexport declare interface InteractionOptions {\r\n    readonly linkFields?: string[];\r\n    readonly selectedCellsSpotlight?: boolean;\r\n    readonly hoverHighlight?: boolean;\r\n    readonly hoverFocus?: boolean;\r\n    readonly enableCopy?: boolean;\r\n    readonly copyWithFormat?: boolean;\r\n    readonly autoResetSheetStyle?: boolean;\r\n    readonly hiddenColumnFields?: string[];\r\n    readonly scrollSpeedRatio?: ScrollSpeedRatio;\r\n    readonly resize?: boolean | ResizeActiveOptions;\r\n    readonly brushSelection?: boolean;\r\n    readonly multiSelection?: boolean;\r\n    readonly rangeSelection?: boolean;\r\n    readonly selectedCellMove?: boolean;\r\n    readonly scrollbarPosition?: ScrollbarPositionType;\r\n    /** ***********CUSTOM INTERACTION HOOKS**************** */\r\n    customInteractions?: CustomInteraction[];\r\n}\r\n\r\nexport declare type InteractionState = {\r\n    [K in InteractionStateName]?: InteractionStateTheme;\r\n};\r\n\r\nexport declare interface InteractionStateInfo {\r\n    stateName?: InteractionStateName;\r\n    cells?: CellMeta[];\r\n    interactedCells?: S2CellType[];\r\n    nodes?: Node_2[];\r\n    force?: boolean;\r\n}\r\n\r\nexport declare enum InteractionStateName {\r\n    ALL_SELECTED = \"allSelected\",\r\n    SELECTED = \"selected\",\r\n    UNSELECTED = \"unselected\",\r\n    HOVER = \"hover\",\r\n    HOVER_FOCUS = \"hoverFocus\",\r\n    PREPARE_SELECT = \"prepareSelect\"\r\n}\r\n\r\nexport declare interface InteractionStateTheme {\r\n    backgroundOpacity?: number;\r\n    backgroundColor?: string;\r\n    textOpacity?: number;\r\n    borderColor?: string;\r\n    borderWidth?: number;\r\n    borderOpacity?: number;\r\n    opacity?: number;\r\n}\r\n\r\nexport declare type Intercept = InterceptType.HOVER | InterceptType.CLICK | InterceptType.BRUSH_SELECTION | InterceptType.MULTI_SELECTION | InterceptType.RESIZE;\r\n\r\nexport declare enum InterceptType {\r\n    HOVER = \"hover\",\r\n    CLICK = \"click\",\r\n    BRUSH_SELECTION = \"brushSelection\",\r\n    MULTI_SELECTION = \"multiSelection\",\r\n    RESIZE = \"resize\"\r\n}\r\n\r\n/** whether the data of hover is selected */\r\nexport declare const isHoverDataInSelectedData: (selectedData: TooltipDataItem[], activeData: TooltipDataItem) => boolean;\r\n\r\nexport declare function isIPhoneX(): boolean;\r\n\r\nexport declare function isMobile(device?: string): boolean;\r\n\r\n/**\r\n * To decide whether the data is positive or negative.\r\n * Two cases needed to be considered since  the derived value could be number or string.\r\n * @param value\r\n * @param font\r\n */\r\nexport declare const isUpDataValue: (value: number | string) => boolean;\r\n\r\nexport declare function isWindows(): boolean;\r\n\r\nexport declare const KEY_COL_REAL_WIDTH_INFO = \"col-real-width-info\";\r\n\r\nexport declare const KEY_GROUP_BACK_GROUND = \"backGroundGroup\";\r\n\r\nexport declare const KEY_GROUP_COL_FROZEN = \"colFrozenGroup\";\r\n\r\nexport declare const KEY_GROUP_COL_FROZEN_TRAILING = \"colFrozenTrailingGroup\";\r\n\r\nexport declare const KEY_GROUP_COL_HORIZONTAL_RESIZE_AREA = \"colHorizontalResizeAreaGroup\";\r\n\r\nexport declare const KEY_GROUP_COL_RESIZE_AREA = \"colResizeAreaGroup\";\r\n\r\nexport declare const KEY_GROUP_COL_SCROLL = \"colScrollGroup\";\r\n\r\nexport declare const KEY_GROUP_CORNER_RESIZE_AREA = \"cornerResizeAreaGroup\";\r\n\r\nexport declare const KEY_GROUP_FORE_GROUND = \"foreGroundGroup\";\r\n\r\nexport declare const KEY_GROUP_FROZEN_COL_RESIZE_AREA = \"colFrozenResizeAreaGroup\";\r\n\r\nexport declare const KEY_GROUP_FROZEN_ROW_RESIZE_AREA = \"rowFrozenResizeAreaGroup\";\r\n\r\nexport declare const KEY_GROUP_PANEL_FROZEN_BOTTOM = \"frozenBottomGroup\";\r\n\r\nexport declare const KEY_GROUP_PANEL_FROZEN_COL = \"frozenColGroup\";\r\n\r\nexport declare const KEY_GROUP_PANEL_FROZEN_ROW = \"frozenRowGroup\";\r\n\r\nexport declare const KEY_GROUP_PANEL_FROZEN_TOP = \"frozenTopGroup\";\r\n\r\nexport declare const KEY_GROUP_PANEL_FROZEN_TRAILING_COL = \"frozenTrailingColGroup\";\r\n\r\nexport declare const KEY_GROUP_PANEL_FROZEN_TRAILING_ROW = \"frozenTrailingRowGroup\";\r\n\r\nexport declare const KEY_GROUP_PANEL_GROUND = \"panelGroup\";\r\n\r\nexport declare const KEY_GROUP_PANEL_SCROLL = \"panelScrollGroup\";\r\n\r\nexport declare const KEY_GROUP_ROW_INDEX_RESIZE_AREA = \"rowIndexResizeAreaGroup\";\r\n\r\nexport declare const KEY_GROUP_ROW_RESIZE_AREA = \"rowResizeAreaGroup\";\r\n\r\nexport declare const KEY_SERIES_NUMBER_NODE = \"series-number-node\";\r\n\r\ndeclare type KeyboardEventHandler = (event: KeyboardEvent) => void;\r\n\r\nexport declare function keyEqualTo(key: string, compareKey: string): boolean;\r\n\r\nexport declare let Lang: string;\r\n\r\n/**\r\n * determine the order of every row/column tree branch\r\n */\r\nexport declare type LayoutArrange = (spreadsheet: SpreadSheet, parent: Node_2, field: string, fieldValues: string[]) => string[];\r\n\r\nexport declare type LayoutArrangeCallback = (spreadsheet: SpreadSheet, parent: Node_2, field: string, fieldValues: string[]) => string[];\r\n\r\nexport declare type LayoutCallback = (spreadsheet: SpreadSheet, rowNode: Node_2, colNode: Node_2) => void;\r\n\r\nexport declare type LayoutCol = [number, string, string];\r\n\r\n/**\r\n * determine the location(x,y,width,height eg..) of every node\r\n */\r\nexport declare type LayoutCoordinate = (spreadsheet: SpreadSheet, rowNode: Node_2, colNode: Node_2) => void;\r\n\r\n/**\r\n * determine the data of cells in Cartesian coordinates\r\n */\r\nexport declare type LayoutDataPosition = (spreadsheet: SpreadSheet, getCellData: GetCellMeta) => GetCellMeta;\r\n\r\n/**\r\n * determine what does row/column hierarchy look like\r\n * eg: add/delete some nodes in the specified position\r\n */\r\nexport declare type LayoutHierarchy = (spreadsheet: SpreadSheet, node: Node_2) => LayoutHierarchyReturnType;\r\n\r\nexport declare interface LayoutHierarchyReturnType {\r\n    push?: Node_2[];\r\n    unshift?: Node_2[];\r\n    delete?: boolean;\r\n}\r\n\r\nexport declare interface LayoutResult {\r\n    colNodes: Node_2[];\r\n    colsHierarchy: Hierarchy;\r\n    rowNodes: Node_2[];\r\n    rowsHierarchy: Hierarchy;\r\n    rowLeafNodes: Node_2[];\r\n    colLeafNodes: Node_2[];\r\n    getCellMeta: GetCellMeta;\r\n    spreadsheet: SpreadSheet;\r\n}\r\n\r\nexport declare type LayoutRow = [number, string, string];\r\n\r\n/**\r\n * 布局类型：\r\n * adaptive: 行列等宽，均分整个 canvas 画布宽度\r\n * colAdaptive：列等宽，行头紧凑布局，列等分画布宽度减去行头宽度的剩余宽度\r\n * compact：行列紧凑布局，指标维度少的时候无法布满整个画布\r\n */\r\nexport declare type LayoutWidthType = 'adaptive' | 'colAdaptive' | 'compact';\r\n\r\nexport declare enum LayoutWidthTypes {\r\n    Adaptive = \"adaptive\",\r\n    ColAdaptive = \"colAdaptive\",\r\n    Compact = \"compact\"\r\n}\r\n\r\nexport declare type ListItem = {\r\n    name: string;\r\n    value: string | number;\r\n    icon?: Element | string;\r\n};\r\n\r\nexport declare interface ListSortParams {\r\n    sortFieldId: string;\r\n    sortMethod: string;\r\n}\r\n\r\nexport declare type MappingDataItemCallback = (valueField: string, data: DataItem) => Record<string, string | number> | DataItem;\r\n\r\nexport declare type MappingFunction = (fieldValue: number | string, data: Record<string, any>) => MappingResult;\r\n\r\nexport declare interface MappingResult extends ValueRange {\r\n    icon?: string;\r\n    fill: string;\r\n    isCompare?: boolean;\r\n}\r\n\r\nexport declare type Margin = Padding;\r\n\r\n/**\r\n * 计算文本在画布中的宽度\r\n */\r\nexport declare const measureTextWidth: ((text: number | string, font: unknown) => number) & MemoizedFunction;\r\n\r\n/**\r\n * 追求性能，粗略的计算文本的宽高！\r\n *\r\n * 算法逻辑：\r\n * 计算一个字符串中，符号[0-255]，中文（其他）的个数\r\n * 然后分别乘以中文、符号的宽度\r\n * @param text\r\n * @param font\r\n */\r\nexport declare const measureTextWidthRoughly: (text: any, font?: any) => number;\r\n\r\n/**\r\n * draw the background of the merged cell\r\n * @param sheet the base sheet instance\r\n * @param cellsInfo\r\n * @param hideData\r\n */\r\nexport declare const mergeCell: (sheet: SpreadSheet, cellsInfo?: MergedCellInfo[], hideData?: boolean) => void;\r\n\r\nexport declare const mergeCellInfo: (cells: S2CellType[]) => TooltipData[];\r\n\r\n/**\r\n * Cell for panelGroup area\r\n */\r\nexport declare class MergedCell extends DataCell {\r\n    cells: S2CellType[];\r\n    isPartiallyVisible: boolean;\r\n    constructor(spreadsheet: SpreadSheet, cells: S2CellType[], meta?: ViewMeta, isPartiallyVisible?: boolean);\r\n    handleRestOptions(...[cells]: [S2CellType[]]): void;\r\n    get cellType(): CellTypes;\r\n    update(): void;\r\n    protected initCell(): void;\r\n    /**\r\n     * Draw merged cells background\r\n     */\r\n    protected drawBackgroundShape(): void;\r\n    /**\r\n     * Render data text\r\n     */\r\n    drawTextShape(): void;\r\n}\r\n\r\nexport declare class MergedCellClick extends BaseEvent implements BaseEventImplement {\r\n    bindEvents(): void;\r\n    private bindDataCellClick;\r\n}\r\n\r\n/**\r\n * 将 MergedCell 转换成 TempMergedCell\r\n * @param oldMergedCells\r\n * @constructor\r\n */\r\nexport declare const MergedCellConvertTempMergedCells: (oldMergedCells: MergedCell[]) => {\r\n    cells: S2CellType<ViewMeta>[];\r\n    viewMeta: ViewMeta;\r\n    isPartiallyVisible: boolean;\r\n}[];\r\n\r\n/**\r\n * the index of rows or columns.\r\n */\r\nexport declare interface MergedCellInfo {\r\n    colIndex?: number;\r\n    rowIndex?: number;\r\n    showText?: boolean;\r\n}\r\n\r\n/**\r\n * 合并 TempMergedCell, 通过 cell.viewMeta.id 判断 TempMergedCell 是否是同一个。\r\n * @param TempMergedCells\r\n * @param otherTempMergedCells\r\n */\r\nexport declare const mergeTempMergedCell: (TempMergedCells: TempMergedCell[], otherTempMergedCells: TempMergedCell[]) => TempMergedCell[];\r\n\r\nexport declare interface Meta {\r\n    readonly field?: string;\r\n    readonly name?: string;\r\n    readonly description?: string;\r\n    readonly formatter?: Formatter;\r\n}\r\n\r\nexport declare const MIN_CELL_HEIGHT = 16;\r\n\r\nexport declare const MIN_CELL_WIDTH = 28;\r\n\r\nexport declare const MIN_DEVICE_PIXEL_RATIO = 1;\r\n\r\nexport declare const MIN_SCROLL_BAR_HEIGHT = 32;\r\n\r\nexport declare const MINI_BAR_CHART_HEIGHT = 12;\r\n\r\ndeclare type MouseEventHandler = (event: MouseEvent) => void;\r\n\r\n/** use for gridAnalysisSheet\r\n *  eg. { label: '余额女',\r\n values: [\r\n ['最近7天登端天数', 1, 3423423, 323],\r\n ['自然月新登用户数', 1, 3423423, 323],\r\n ['最近7天登端天数', 1, 3423423, 323],\r\n ['自然月新登用户数', 1, 3423423, 323],\r\n ],\r\n }\r\n */\r\nexport declare interface MultiData {\r\n    values: (string | number)[][];\r\n    originalValues?: (string | number)[][];\r\n    label?: string;\r\n    [key: string]: unknown;\r\n}\r\n\r\n/**\r\n * Node for cornerHeader, colHeader, rowHeader\r\n */\r\ndeclare class Node_2 {\r\n    isTotalMeasure: boolean;\r\n    config: BaseNodeConfig;\r\n    constructor(cfg: BaseNodeConfig);\r\n    /**\r\n     * Get node's field path\r\n     * eg: node.id = root[&]东北[&]黑龙江\r\n     * => [area, province]\r\n     * @param node\r\n     */\r\n    static getFieldPath(node: Node_2, isDrillDown?: boolean): string[];\r\n    /**\r\n     * Get all leaves in this node branch, eg:\r\n     *        c1\r\n     *    b1〈\r\n     *        c2\r\n     * a〈\r\n     *        c3\r\n     *    b2〈\r\n     *        c4\r\n     * get a branch's all leaves(c1~c4)\r\n     * @param node\r\n     */\r\n    static getAllLeavesOfNode(node: Node_2): Node_2[];\r\n    /**\r\n     * Get all children nodes in this node branch, eg:\r\n     *        c1\r\n     *    b1〈\r\n     *        c2\r\n     * a〈\r\n     *        c3\r\n     *    b2〈\r\n     *        c4\r\n     * get a branch's all nodes(c1~c4, b1, b2)\r\n     * @param node\r\n     */\r\n    static getAllChildrenNode(node: Node_2): Node_2[];\r\n    /**\r\n     * Get all children branch in this node branch, eg:\r\n     *        c1\r\n     *    b1〈\r\n     *        c2\r\n     * a〈\r\n     *        c3\r\n     *    b2〈\r\n     *        c4\r\n     * get all branch [[b1,c1],[b1,c2],[b2,c3],[b2,c4]]\r\n     * @param parent\r\n     */\r\n    static getAllBranch(parent: Node_2): Node_2[][];\r\n    id: string;\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    label: string;\r\n    key: string;\r\n    value: string;\r\n    colIndex: number;\r\n    level: number;\r\n    rowIndex: number;\r\n    parent: Node_2;\r\n    isLeaf: boolean;\r\n    isTotals: boolean;\r\n    colId: string;\r\n    static blankNode(): Node_2;\r\n    isCollapsed: boolean;\r\n    children: Node_2[];\r\n    padding: number;\r\n    hierarchy: Hierarchy;\r\n    isPivotMode: boolean;\r\n    seriesNumberWidth: number;\r\n    field: string;\r\n    spreadsheet: SpreadSheet;\r\n    query?: Record<string, any>;\r\n    belongsCell?: S2CellType;\r\n    inCollapseNode?: boolean;\r\n    cornerType?: CornerNodeType;\r\n    isGrandTotals?: boolean;\r\n    isSubTotals?: boolean;\r\n    [key: string]: any;\r\n    static rootNode(): Node_2;\r\n    toJSON(): Omit_2<this, \"config\" | \"parent\" | \"hierarchy\" | \"spreadsheet\">;\r\n}\r\nexport { Node_2 as Node }\r\n\r\nexport declare interface OffsetConfig {\r\n    offsetX?: {\r\n        value: number | undefined;\r\n        animate?: boolean;\r\n    };\r\n    offsetY?: {\r\n        value: number | undefined;\r\n        animate?: boolean;\r\n    };\r\n}\r\n\r\nexport declare interface OrderOption {\r\n    sortMethod: 'ASC' | 'DESC';\r\n    type: 'globalAsc' | 'globalDesc' | 'groupAsc' | 'groupDesc' | 'none';\r\n    name: string;\r\n}\r\n\r\nexport declare interface OriginalEvent extends Event_2 {\r\n    layerX: number;\r\n    layerY: number;\r\n}\r\n\r\nexport declare enum OriginEventType {\r\n    MOUSE_DOWN = \"mousedown\",\r\n    MOUSE_MOVE = \"mousemove\",\r\n    MOUSE_OUT = \"mouseout\",\r\n    MOUSE_LEAVE = \"mouseleave\",\r\n    MOUSE_UP = \"mouseup\",\r\n    KEY_DOWN = \"keydown\",\r\n    KEY_UP = \"keyup\",\r\n    CLICK = \"click\",\r\n    HOVER = \"hover\",\r\n    DOUBLE_CLICK = \"dblclick\",\r\n    CONTEXT_MENU = \"contextmenu\"\r\n}\r\n\r\nexport declare interface Padding {\r\n    top?: number;\r\n    right?: number;\r\n    bottom?: number;\r\n    left?: number;\r\n}\r\n\r\nexport declare const PADDING_DOWN = 2;\r\n\r\nexport declare const PADDING_LEFT = 3;\r\n\r\nexport declare const PADDING_RIGHT = 1;\r\n\r\nexport declare const PADDING_TOP = 0;\r\n\r\nexport declare type Pagination = {\r\n    pageSize: number;\r\n    current: number;\r\n    total?: number;\r\n};\r\n\r\nexport declare interface Palette {\r\n    basicColors: string[];\r\n    semanticColors: {\r\n        red?: string;\r\n        green?: string;\r\n        [key: string]: string;\r\n    };\r\n}\r\n\r\nexport declare const PALETTE_MAP: Record<string, Palette>;\r\n\r\nexport declare const PANEL_GROUP_FROZEN_GROUP_Z_INDEX = 2;\r\n\r\nexport declare const PANEL_GROUP_GROUP_CONTAINER_Z_INDEX = 1;\r\n\r\nexport declare const PANEL_GROUP_HOVER_BOX_GROUP_Z_INDEX = 1;\r\n\r\nexport declare const PANEL_GROUP_SCROLL_GROUP_Z_INDEX = 1;\r\n\r\ndeclare class PanelBBox extends BaseBBox {\r\n    calculateBBox(): void;\r\n}\r\n\r\ndeclare type PanelIndexes = {\r\n    center: Indexes;\r\n    frozenRow?: Indexes;\r\n    frozenCol?: Indexes;\r\n    frozenTrailingRow?: Indexes;\r\n    frozenTrailingCol?: Indexes;\r\n};\r\n\r\nexport declare interface PartDrillDownDataCache {\r\n    rowId: string;\r\n    drillLevel: number;\r\n    drillField: string;\r\n    drillData: Record<string, string | number>[];\r\n}\r\n\r\nexport declare interface PartDrillDownFieldInLevel {\r\n    drillField: string;\r\n    drillLevel: number;\r\n}\r\n\r\nexport declare class PivotDataSet extends BaseDataSet {\r\n    rowPivotMeta: PivotMeta;\r\n    colPivotMeta: PivotMeta;\r\n    sortedDimensionValues: SortedDimensionValues;\r\n    protected pathIndexMax: any[];\r\n    /**\r\n     * When data related config changed, we need\r\n     * 1、re-process config\r\n     * 2、re-transform origin data\r\n     * 3、sort and other things\r\n     * @param dataCfg\r\n     */\r\n    setDataCfg(dataCfg: S2DataConfig): void;\r\n    /**\r\n     * Provide a way to append some drill-down data in indexesData\r\n     * @param extraRowField\r\n     * @param drillDownData\r\n     * @param rowNode\r\n     */\r\n    transformDrillDownData(extraRowField: string, drillDownData: DataType[], rowNode: Node_2): void;\r\n    /**\r\n     * Clear drill down data by rowNodeId\r\n     * rowNodeId is undefined => clear all\r\n     * @param rowNodeId\r\n     */\r\n    clearDrillDownData(rowNodeId?: string): void;\r\n    /**\r\n     * 排序优先级：\r\n     * 1、sortParams里的条件优先级高于原始数据\r\n     * 2、sortParams多个item：按照顺序优先级，排在后面的优先级高\r\n     * 3、item中多个条件：sortByField > sortFunc > sortBy > sortMethod\r\n     */\r\n    handleDimensionValuesSort: () => void;\r\n    protected standardTransform(originData: Data[], fieldsValues: string[]): any[];\r\n    processDataCfg(dataCfg: S2DataConfig): S2DataConfig;\r\n    getDimensionValues: (field: string, query?: DataType) => string[];\r\n    getTotalValue(query: DataType): {\r\n        $$value$$: number;\r\n    };\r\n    getCellData(params: CellDataParams): DataType;\r\n    getCustomData: (path: number[]) => DataType | DataType[] | DataType[][];\r\n    getTotalStatus: (query: DataType) => {\r\n        isRowTotal: boolean;\r\n        isRowSubTotal: boolean;\r\n        isColTotal: boolean;\r\n        isColSubTotal: boolean;\r\n    };\r\n    getMultiData(query: DataType, isTotals?: boolean, isRow?: boolean, drillDownFields?: string[]): DataType[];\r\n    getFieldFormatter(field: string, cellMeta?: ViewMeta): Formatter;\r\n    private getFieldFormatterForTotalValue;\r\n    /**\r\n     * 自定义度量组位置值\r\n     * @param customValueOrder 用户配置度量组位置，从 0 开始\r\n     * @param fields Rows || Columns\r\n     */\r\n    private handleCustomMeasuresOrder;\r\n    private isCustomMeasuresPosition;\r\n}\r\n\r\nexport declare type PivotMeta = Map<string, PivotMetaValue>;\r\n\r\nexport declare type PivotMetaValue = {\r\n    level: number;\r\n    children: PivotMeta;\r\n    childField?: string;\r\n};\r\n\r\nexport declare class PivotSheet extends SpreadSheet {\r\n    getDataSet(options: S2Options): any;\r\n    /**\r\n     * Check if is pivot mode\r\n     */\r\n    isPivotMode(): boolean;\r\n    /**\r\n     * Check if is pivot mode\r\n     */\r\n    isTableMode(): boolean;\r\n    /**\r\n     * tree type must be in strategy mode\r\n     */\r\n    isHierarchyTreeType(): boolean;\r\n    /**\r\n     * Check whether scroll contains row header\r\n     * For now contains row header in ListSheet mode by default\r\n     */\r\n    isScrollContainsRowHeader(): boolean;\r\n    /**\r\n     * Scroll Freeze Row Header\r\n     */\r\n    isFrozenRowHeader(): boolean;\r\n    /**\r\n     * Check if the value is in the columns\r\n     */\r\n    isValueInCols(): boolean;\r\n    clearDrillDownData(rowNodeId?: string, preventRender?: boolean): void;\r\n    protected getFacetCfgFromDataSetAndOptions(): SpreadSheetFacetCfg;\r\n    protected buildFacet(): void;\r\n    protected bindEvents(): void;\r\n    protected handleRowCellCollapseTreeRows(data: RowCellCollapseTreeRowsType): void;\r\n    protected handleTreeRowsCollapseAll(isCollapsed: boolean): void;\r\n    groupSortByMethod(sortMethod: SortMethod, meta: Node_2): void;\r\n    handleGroupSort(event: Event_2, meta: Node_2): void;\r\n}\r\n\r\ndeclare interface PointObject {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport declare const PRECISION = 16;\r\n\r\nexport declare const processCopyData: (displayData: DataType[], cells: CellMeta[][], spreadsheet: SpreadSheet) => string;\r\n\r\nexport declare class RangeSelection extends BaseEvent implements BaseEventImplement {\r\n    private isRangeSelection;\r\n    bindEvents(): void;\r\n    private bindKeyboardDown;\r\n    private bindKeyboardUp;\r\n    private bindColCellClick;\r\n    private getShiftSelectRange;\r\n    private bindDataCellClick;\r\n    private handleColClick;\r\n    private handleSeriesNumberRowSelected;\r\n    private handleRowSelected;\r\n    private handleColSelected;\r\n}\r\n\r\nexport declare interface ReachedBorderId {\r\n    rowId?: string;\r\n    colId?: string;\r\n}\r\n\r\nexport declare const registerIcon: (name: string, svg: string) => void;\r\n\r\n/**\r\n * remove unmergedCells Info, return new mergedCell info\r\n * @param removeMergedCell\r\n * @param mergedCellsInfo\r\n */\r\nexport declare const removeUnmergedCellsInfo: (removeMergedCell: MergedCell, mergedCellsInfo: MergedCellInfo[][]) => MergedCellInfo[][];\r\n\r\nexport declare function renderIcon(group: Group, iconCfg: GuiIconCfg): GuiIcon;\r\n\r\nexport declare function renderLine(group: Group, coordinate: {\r\n    x1: number;\r\n    y1: number;\r\n    x2: number;\r\n    y2: number;\r\n}, lineStyle: ShapeAttrs): IShape;\r\n\r\nexport declare function renderPolygon(group: Group, attrs: ShapeAttrs): IShape;\r\n\r\nexport declare function renderRect(group: Group, attrs: ShapeAttrs): IShape;\r\n\r\nexport declare function renderText(group: Group, shapes: IShape[], x: number, y: number, text: string, textStyle: TextTheme, extraStyle?: ShapeAttrs): IShape;\r\n\r\nexport declare function renderTreeIcon(group: Group, area: SimpleBBox, fill: string, isCollapse: boolean, onClick?: () => void): GuiIcon;\r\n\r\nexport declare const RESIZE_END_GUIDE_LINE_ID = \"RESIZE_END_GUIDE_LINE\";\r\n\r\nexport declare const RESIZE_MASK_ID = \"RESIZE_MASK\";\r\n\r\nexport declare const RESIZE_START_GUIDE_LINE_ID = \"RESIZE_START_GUIDE_LINE\";\r\n\r\nexport declare interface ResizeActiveOptions {\r\n    rowCellVertical?: boolean;\r\n    cornerCellHorizontal?: boolean;\r\n    colCellHorizontal?: boolean;\r\n    colCellVertical?: boolean;\r\n    rowResizeType?: ResizeType;\r\n}\r\n\r\nexport declare interface ResizeArea {\r\n    size?: number;\r\n    background?: string;\r\n    guideLineColor?: string;\r\n    guideLineDash?: number[];\r\n    backgroundOpacity?: number;\r\n    interactionState?: InteractionState;\r\n}\r\n\r\nexport declare enum ResizeAreaEffect {\r\n    Field = \"field\",\r\n    Cell = \"cell\",\r\n    Tree = \"tree\",\r\n    Series = \"series\"\r\n}\r\n\r\nexport declare interface ResizeDetail {\r\n    eventType: ResizeEvent;\r\n    style?: Style;\r\n    seriesNumberWidth?: number;\r\n}\r\n\r\nexport declare enum ResizeDirectionType {\r\n    Horizontal = \"col\",\r\n    Vertical = \"row\"\r\n}\r\n\r\nexport declare type ResizeEvent = S2Event.LAYOUT_RESIZE | S2Event.LAYOUT_RESIZE_SERIES_WIDTH | S2Event.LAYOUT_RESIZE_ROW_WIDTH | S2Event.LAYOUT_RESIZE_COL_WIDTH | S2Event.LAYOUT_RESIZE_ROW_HEIGHT | S2Event.LAYOUT_RESIZE_COL_HEIGHT | S2Event.LAYOUT_RESIZE_TREE_WIDTH;\r\n\r\nexport declare type ResizeGuideLinePath = [operation: 'M' | 'L', x: number, y: number];\r\n\r\nexport declare interface ResizeGuideLinePosition {\r\n    start: {\r\n        x: number;\r\n        y: number;\r\n    };\r\n    end: {\r\n        x: number;\r\n        y: number;\r\n    };\r\n}\r\n\r\ndeclare type ResizeHandler = (data: {\r\n    info: ResizeInfo;\r\n    style?: Style;\r\n    seriesNumberWidth?: number;\r\n}) => void;\r\n\r\nexport declare interface ResizeInfo {\r\n    theme: ResizeArea;\r\n    isResizeArea?: boolean;\r\n    type: ResizeDirectionType;\r\n    /** 改动影响区域 */\r\n    effect: ResizeAreaEffect;\r\n    /** 字段id */\r\n    id?: string;\r\n    offsetX: number;\r\n    offsetY: number;\r\n    width: number;\r\n    height: number;\r\n    size: number;\r\n}\r\n\r\nexport declare interface ResizePosition {\r\n    offsetX?: number;\r\n    offsetY?: number;\r\n}\r\n\r\nexport declare enum ResizeType {\r\n    ALL = \"all\",\r\n    CURRENT = \"current\"\r\n}\r\n\r\nexport declare const ROOT_BEGINNING_REGEX: RegExp;\r\n\r\nexport declare const ROOT_ID = \"root\";\r\n\r\nexport declare class RootInteraction {\r\n    spreadsheet: SpreadSheet;\r\n    interactions: Map<string, BaseEvent>;\r\n    intercepts: Set<Intercept>;\r\n    private hoverTimer;\r\n    eventController: EventController;\r\n    private defaultState;\r\n    constructor(spreadsheet: SpreadSheet);\r\n    destroy(): void;\r\n    reset(): void;\r\n    setState(interactionStateInfo: InteractionStateInfo): void;\r\n    getState(): InteractionStateInfo;\r\n    setInteractedCells(cell: S2CellType): void;\r\n    getInteractedCells(): S2CellType<ViewMeta>[];\r\n    resetState(): void;\r\n    getCurrentStateName(): InteractionStateName;\r\n    isEqualStateName(stateName: InteractionStateName): boolean;\r\n    private isStateOf;\r\n    isSelectedState(): boolean;\r\n    isHoverFocusState(): boolean;\r\n    isHoverState(): boolean;\r\n    isActiveCell(cell: S2CellType): CellMeta;\r\n    isSelectedCell(cell: S2CellType): CellMeta;\r\n    getCells(): CellMeta[];\r\n    getActiveCells(): S2CellType<ViewMeta>[];\r\n    clearStyleIndependent(): void;\r\n    getPanelGroupAllUnSelectedDataCells(): DataCell[];\r\n    getPanelGroupAllDataCells(): DataCell[];\r\n    getAllRowHeaderCells(): RowCell[];\r\n    getAllColHeaderCells(): ColCell[];\r\n    getRowColActiveCells(ids: string[]): S2CellType<ViewMeta>[];\r\n    getAllCells(): S2CellType<ViewMeta>[];\r\n    selectAll: () => void;\r\n    selectHeaderCell: (selectHeaderCellInfo: SelectHeaderCellInfo) => boolean;\r\n    mergeCells: (cellsInfo?: MergedCellInfo[], hideData?: boolean) => void;\r\n    unmergeCell: (removedCells: MergedCell) => void;\r\n    hideColumns(hiddenColumnFields?: string[]): void;\r\n    private getDefaultInteractions;\r\n    private registerInteractions;\r\n    private registerEventController;\r\n    draw(): void;\r\n    clearState(): void;\r\n    changeState(interactionStateInfo: InteractionStateInfo): void;\r\n    updatePanelGroupAllDataCells(): void;\r\n    updateCells(cells?: S2CellType[]): void;\r\n    addIntercepts(interceptTypes?: InterceptType[]): void;\r\n    hasIntercepts(interceptTypes?: InterceptType[]): boolean;\r\n    removeIntercepts(interceptTypes?: InterceptType[]): void;\r\n    clearHoverTimer(): void;\r\n    setHoverTimer(timer: NodeJS.Timeout): void;\r\n    getHoverTimer(): NodeJS.Timeout;\r\n}\r\n\r\nexport declare class RowCell extends HeaderCell {\r\n    protected headerConfig: RowHeaderConfig;\r\n    private gm;\r\n    get cellType(): CellTypes;\r\n    destroy(): void;\r\n    protected initCell(): void;\r\n    protected drawBackgroundShape(): void;\r\n    protected drawInteractiveBgShape(): void;\r\n    private showTreeIcon;\r\n    protected drawTreeIcon(): void;\r\n    protected getFormattedValue(value: string): string;\r\n    protected drawTextShape(): void;\r\n    protected drawLinkFieldShape(): void;\r\n    protected drawRectBorder(): void;\r\n    protected drawResizeAreaInLeaf(): void;\r\n    protected getContentIndent(): number;\r\n    protected getTextIndent(): number;\r\n    protected getTextStyle(): TextTheme;\r\n    protected getFormattedFieldValue(): FormatResult;\r\n    protected getIconPosition(): {\r\n        x: any;\r\n        y: any;\r\n    };\r\n    protected getMaxTextWidth(): number;\r\n    protected getTextPosition(): Point;\r\n    private getIconYPosition;\r\n}\r\n\r\nexport declare type RowCellCollapseTreeRowsType = {\r\n    id: string;\r\n    isCollapsed: boolean;\r\n    node: Node_2;\r\n};\r\n\r\nexport declare interface RowCfg {\r\n    width?: number;\r\n    widthByField?: Record<string, number>;\r\n    heightByField?: Record<string, number>;\r\n    treeRowsWidth?: number;\r\n}\r\n\r\nexport declare class RowColumnClick extends BaseEvent implements BaseEventImplement {\r\n    private isMultiSelection;\r\n    bindEvents(): void;\r\n    private bindKeyboardDown;\r\n    private bindKeyboardUp;\r\n    private bindRowCellClick;\r\n    private bindColCellClick;\r\n    private handleRowColClick;\r\n    private showTooltip;\r\n    private getTooltipOperator;\r\n    private bindTableColExpand;\r\n    /**\r\n     * 隐藏选中的列\r\n     * 每次点击存储两个信息\r\n     * 1. [hiddenColumnFields]: 当前选中 (单/多选) 的 field, 对应 dataCfg 里面的 column\r\n     *    用于点击展开按钮后还原, 区别于 options.hiddenColumnFields, 这里需要分段存储, 比如现在有两个隐藏的列\r\n     *    [1,2, (3隐藏), 4, 5, (6隐藏), 7]\r\n     *    展开按钮在 4, 7, 点击任意按钮, 应该只展开所对应的那组 : 4 => [3], 7 => [6]\r\n     * 2. [displaySiblingNode]: 当前这一组的列隐藏后, 需要将展开按钮显示到对应的兄弟节点\r\n     * 这样不用每次 render 的时候实时计算, 渲染列头单元格 直接取数据即可\r\n     */\r\n    hideSelectedColumns(): void;\r\n    private handleExpandIconClick;\r\n}\r\n\r\nexport declare class RowColumnResize extends BaseEvent implements BaseEventImplement {\r\n    private resizeTarget;\r\n    resizeReferenceGroup: IGroup;\r\n    resizeStartPosition: ResizePosition;\r\n    bindEvents(): void;\r\n    private initResizeGroup;\r\n    private getResizeAreaTheme;\r\n    private setResizeTarget;\r\n    private getGuideLineWidthAndHeight;\r\n    private updateResizeGuideLinePosition;\r\n    private bindMouseDown;\r\n    private bindMouseMove;\r\n    private getResizeGuideLinePosition;\r\n    private getResizeWidthDetail;\r\n    private getResizeHeightDetail;\r\n    private getResizeDetail;\r\n    private showResizeGroup;\r\n    private hideResizeGroup;\r\n    private bindMouseUp;\r\n    private resizeMouseMove;\r\n    private updateHorizontalResizingEndGuideLinePosition;\r\n    private updateVerticalResizingEndGuideLinePosition;\r\n    private renderResizedResult;\r\n    private getResizeInfo;\r\n    private render;\r\n}\r\n\r\n/**\r\n * Row Header for SpreadSheet\r\n */\r\nexport declare class RowHeader extends BaseHeader<RowHeaderConfig> {\r\n    private gm;\r\n    constructor(cfg: RowHeaderConfig);\r\n    destroy(): void;\r\n    protected layout(): void;\r\n    protected offset(): void;\r\n    protected clip(): void;\r\n}\r\n\r\nexport declare interface RowHeaderConfig extends BaseHeaderConfig {\r\n    hierarchyType: S2Options['hierarchyType'];\r\n    linkFields: string[];\r\n    seriesNumberWidth: number;\r\n}\r\n\r\n/**\r\n * Row header click navigation interaction\r\n */\r\nexport declare class RowTextClick extends BaseEvent implements BaseEventImplement {\r\n    bindEvents(): void;\r\n    private bindRowCellClick;\r\n    private getRowData;\r\n    private getOriginalRowData;\r\n    private getRowIndex;\r\n}\r\n\r\nexport declare const S2_PREFIX_CLS = \"antv-s2\";\r\n\r\nexport declare interface S2BasicOptions<T = Element | string> {\r\n    readonly width: number;\r\n    readonly height: number;\r\n    readonly debug?: boolean;\r\n    readonly hierarchyType?: 'grid' | 'tree' | 'customTree';\r\n    readonly conditions?: Conditions;\r\n    readonly totals?: Totals;\r\n    readonly tooltip?: Tooltip<T>;\r\n    readonly interaction?: InteractionOptions;\r\n    readonly pagination?: Pagination;\r\n    readonly frozenRowHeader?: boolean;\r\n    readonly showSeriesNumber?: boolean;\r\n    readonly showDefaultHeaderActionIcon?: boolean;\r\n    readonly headerActionIcons?: HeaderActionIcon[];\r\n    readonly customSVGIcons?: CustomSVGIcon[];\r\n    readonly style?: Partial<Style>;\r\n    readonly hierarchyCollapse?: boolean;\r\n    readonly hdAdapter?: boolean;\r\n    readonly mergedCellsInfo?: MergedCellInfo[][];\r\n    readonly placeholder?: string;\r\n    readonly cornerText?: string;\r\n    readonly supportCSSTransform?: boolean;\r\n    readonly devicePixelRatio?: number;\r\n    /** ***********CUSTOM CELL/HEADER HOOKS**************** */\r\n    readonly dataCell?: DataCellCallback;\r\n    readonly cornerCell?: CellCallback<CornerHeaderConfig>;\r\n    readonly rowCell?: CellCallback<RowHeaderConfig>;\r\n    readonly colCell?: CellCallback<ColHeaderConfig>;\r\n    readonly frame?: FrameCallback;\r\n    readonly cornerHeader?: CornerHeaderCallback;\r\n    /** ***********CUSTOM LIFECYCLE HOOKS**************** */\r\n    layoutHierarchy?: LayoutHierarchy;\r\n    layoutArrange?: LayoutArrange;\r\n    layoutCoordinate?: LayoutCoordinate;\r\n    layoutDataPosition?: LayoutDataPosition;\r\n    /** ***********CUSTOM DATA CELL RENDER HOOKS**************** */\r\n    filterDisplayDataItem?: FilterDataItemCallback;\r\n    mappingDisplayDataItem?: MappingDataItemCallback;\r\n}\r\n\r\nexport declare type S2CellType<T extends SimpleBBox = ViewMeta> = DataCell | HeaderCell | ColCell | CornerCell | RowCell | MergedCell | BaseCell<T>;\r\n\r\nexport declare type S2Constructor<T = Element | string> = [\r\nS2MountContainer,\r\nS2DataConfig,\r\nS2Options<T>\r\n];\r\n\r\nexport declare interface S2DataConfig {\r\n    data: Data[];\r\n    totalData?: Data[];\r\n    fields: Fields;\r\n    meta?: Meta[];\r\n    sortParams?: SortParams;\r\n    filterParams?: FilterParam[];\r\n    [key: string]: unknown;\r\n}\r\n\r\nexport declare enum S2Event {\r\n    /** ================ Row Cell ================  */\r\n    ROW_CELL_COLLAPSE_TREE_ROWS = \"row-cell:collapsed-tree-rows\",\r\n    ROW_CELL_CLICK = \"row-cell:click\",\r\n    ROW_CELL_DOUBLE_CLICK = \"row-cell:double-click\",\r\n    ROW_CELL_HOVER = \"row-cell:hover\",\r\n    ROW_CELL_MOUSE_DOWN = \"row-cell:mouse-down\",\r\n    ROW_CELL_MOUSE_UP = \"row-cell:mouse-up\",\r\n    ROW_CELL_MOUSE_MOVE = \"row-cell:mouse-move\",\r\n    /** ================ Col Cell ================  */\r\n    COL_CELL_HOVER = \"col-cell:hover\",\r\n    COL_CELL_CLICK = \"col-cell:click\",\r\n    COL_CELL_DOUBLE_CLICK = \"col-cell:double-click\",\r\n    COL_CELL_MOUSE_DOWN = \"col-cell:mouse-down\",\r\n    COL_CELL_MOUSE_UP = \"col-cell:mouse-up\",\r\n    COL_CELL_MOUSE_MOVE = \"col-cell:mouse-move\",\r\n    /** ================ Data Cell ================  */\r\n    DATA_CELL_HOVER = \"data-cell:hover\",\r\n    DATA_CELL_CLICK = \"data-cell:click\",\r\n    DATA_CELL_DOUBLE_CLICK = \"data-cell:double-click\",\r\n    DATA_CELL_MOUSE_UP = \"data-cell:mouse-up\",\r\n    DATA_CELL_MOUSE_DOWN = \"data-cell:mouse-down\",\r\n    DATA_CELL_MOUSE_MOVE = \"data-cell:mouse-move\",\r\n    DATA_CELL_TREND_ICON_CLICK = \"data-cell:trend-icon-click\",\r\n    DATE_CELL_BRUSH_SELECTION = \"data-cell:brush-selection\",\r\n    /** ================ Corner Cell ================  */\r\n    CORNER_CELL_CLICK = \"corner-cell:click\",\r\n    CORNER_CELL_DOUBLE_CLICK = \"corner-cell:double-click\",\r\n    CORNER_CELL_MOUSE_UP = \"corner-cell:mouse-up\",\r\n    CORNER_CELL_MOUSE_MOVE = \"corner-cell:mouse-move\",\r\n    CORNER_CELL_HOVER = \"corner-cell:hover\",\r\n    CORNER_CELL_MOUSE_DOWN = \"corner-cell:mouse-down\",\r\n    /** ================ Merged Cell ================  */\r\n    MERGED_CELLS_MOUSE_UP = \"merged-cells:mouse-up\",\r\n    MERGED_CELLS_MOUSE_MOVE = \"merged-cells:mouse-move\",\r\n    MERGED_CELLS_HOVER = \"merged-cells:hover\",\r\n    MERGED_CELLS_CLICK = \"merged-cells:click\",\r\n    MERGED_CELLS_DOUBLE_CLICK = \"merged-cells:double-click\",\r\n    MERGED_CELLS_MOUSE_DOWN = \"merged-cells:mouse-down\",\r\n    /** ================ Table Sort ================  */\r\n    RANGE_SORT = \"sort:range-sort\",\r\n    RANGE_SORTED = \"sort:range-sorted\",\r\n    /** ================ Table Filter ================  */\r\n    RANGE_FILTER = \"filter:range-filter\",\r\n    RANGE_FILTERED = \"filter:range-filtered\",\r\n    /** ================ Table Layout ================  */\r\n    LAYOUT_AFTER_HEADER_LAYOUT = \"layout:after-header-layout\",\r\n    LAYOUT_CELL_SCROLL = \"layout:cell-scroll\",\r\n    LAYOUT_PAGINATION = \"layout:pagination\",\r\n    LAYOUT_COLLAPSE_ROWS = \"layout:collapsed-rows\",\r\n    LAYOUT_AFTER_COLLAPSE_ROWS = \"layout:after-collapsed-rows\",\r\n    LAYOUT_TREE_ROWS_COLLAPSE_ALL = \"layout:toggle-collapse-all\",\r\n    LAYOUT_COLS_EXPANDED = \"layout:table-col-expanded\",\r\n    LAYOUT_COLS_HIDDEN = \"layout:table-col-hidden\",\r\n    LAYOUT_AFTER_RENDER = \"layout:after-render\",\r\n    LAYOUT_BEFORE_RENDER = \"layout:before-render\",\r\n    LAYOUT_DESTROY = \"layout:destroy\",\r\n    /** ================ Table Layout Resize ================  */\r\n    LAYOUT_RESIZE = \"layout:resize\",\r\n    LAYOUT_RESIZE_SERIES_WIDTH = \"layout:resize-series-width\",\r\n    LAYOUT_RESIZE_ROW_WIDTH = \"layout:resize-row-width\",\r\n    LAYOUT_RESIZE_ROW_HEIGHT = \"layout:resize-row-height\",\r\n    LAYOUT_RESIZE_COL_WIDTH = \"layout:resize-column-width\",\r\n    LAYOUT_RESIZE_COL_HEIGHT = \"layout:resize-column-height\",\r\n    LAYOUT_RESIZE_TREE_WIDTH = \"layout:resize-tree-width\",\r\n    LAYOUT_RESIZE_MOUSE_DOWN = \"layout:resize:mouse-down\",\r\n    LAYOUT_RESIZE_MOUSE_MOVE = \"layout:resize:mouse-move\",\r\n    LAYOUT_RESIZE_MOUSE_UP = \"layout:resize-mouse-up\",\r\n    /** ================ Global ================  */\r\n    GLOBAL_KEYBOARD_DOWN = \"global:keyboard-down\",\r\n    GLOBAL_KEYBOARD_UP = \"global:keyboard-up\",\r\n    GLOBAL_COPIED = \"global:copied\",\r\n    GLOBAL_MOUSE_UP = \"global:mouse-up\",\r\n    GLOBAL_ACTION_ICON_CLICK = \"global:action-icon-click\",\r\n    GLOBAL_ACTION_ICON_HOVER = \"global:action-icon-hover\",\r\n    GLOBAL_CONTEXT_MENU = \"global:context-menu\",\r\n    GLOBAL_SELECTED = \"global:selected\",\r\n    GLOBAL_HOVER = \"global:hover\",\r\n    GLOBAL_RESET = \"global:reset\",\r\n    GLOBAL_LINK_FIELD_JUMP = \"global:link-field-jump\"\r\n}\r\n\r\ndeclare interface S2EventHandler {\r\n    type: keyof EmitterType;\r\n    handler: EmitterType[keyof EmitterType];\r\n}\r\n\r\nexport declare type S2MountContainer = string | Element;\r\n\r\nexport declare interface S2Options<T = Element | string> extends S2BasicOptions<T>, S2TableSheetOptions, S2PivotSheetOptions {\r\n    readonly dataSet?: (spreadsheet: SpreadSheet) => BaseDataSet;\r\n}\r\n\r\nexport declare interface S2PivotSheetOptions {\r\n}\r\n\r\nexport declare interface S2TableSheetOptions {\r\n    readonly frozenRowCount?: number;\r\n    readonly frozenColCount?: number;\r\n    readonly frozenTrailingRowCount?: number;\r\n    readonly frozenTrailingColCount?: number;\r\n}\r\n\r\nexport declare interface S2Theme extends CellThemes {\r\n    resizeArea?: ResizeArea;\r\n    scrollBar?: ScrollBarTheme;\r\n    splitLine?: SplitLine;\r\n    prepareSelectMask?: InteractionStateTheme;\r\n    background?: Background;\r\n}\r\n\r\nexport declare interface S2WheelEvent extends WheelEvent {\r\n    layerX: number;\r\n    layerY: number;\r\n}\r\n\r\nexport declare const safeJsonParse: (val: string) => any;\r\n\r\ndeclare class ScrollBar extends Group {\r\n    isHorizontal: boolean;\r\n    trackLen: number;\r\n    thumbLen: number;\r\n    position: PointObject;\r\n    minThumbLen: number;\r\n    thumbOffset: number;\r\n    scrollTargetMaxOffset: number;\r\n    theme: ScrollBarTheme;\r\n    scrollBarGroup: IGroup;\r\n    trackShape: IShape;\r\n    thumbShape: IShape;\r\n    private startPos;\r\n    private isMobile;\r\n    private clearEvents;\r\n    private eventHandlers;\r\n    private scrollFrameId;\r\n    constructor(scrollBarCfg: ScrollBarCfg);\r\n    getCoordinates: () => {\r\n        from: string;\r\n        to: string;\r\n    };\r\n    /**\r\n     * 当前滑块滑动的位置 0 ~ 1\r\n     */\r\n    current: () => number;\r\n    /**\r\n     * 更新滑道长度\r\n     * @param newTrackLen 新的滑块长度\r\n     */\r\n    updateTrackLen: (newTrackLen: number) => void;\r\n    /**\r\n     * 更新滑块长度\r\n     * @param newThumbLen 新的滑道长度\r\n     */\r\n    updateThumbLen: (newThumbLen: number) => void;\r\n    /**\r\n     * 更新滑块的 offset 值\r\n     * @param offset\r\n     */\r\n    updateThumbOffset: (offset: number, emitScrollChange?: boolean) => void;\r\n    /**\r\n     * 只更新位置属性，而不emit滚动事件\r\n     * @param offset\r\n     */\r\n    onlyUpdateThumbOffset: (offset: number) => void;\r\n    emitScrollChange: (offset: number, updateThumbOffset?: boolean) => void;\r\n    protected addEventListener: (target: EventTarget, eventType: keyof HTMLElementEventMap, callback: EventListenerOrEventListenerObject) => EventListenerReturn;\r\n    protected addEvent: (target: EventHandler['target'], type: EventHandler['type'], handler: EventHandler['handler']) => void;\r\n    private initScrollBar;\r\n    private createScrollBarGroup;\r\n    private createTrackShape;\r\n    private createThumbShape;\r\n    private bindEvents;\r\n    private onStartEvent;\r\n    private bindLaterEvent;\r\n    private onTrackClick;\r\n    private onMouseMove;\r\n    private onMouseUp;\r\n    private onTrackMouseOver;\r\n    private onTrackMouseOut;\r\n    private validateRange;\r\n}\r\n\r\ndeclare interface ScrollBarCfg {\r\n    readonly isHorizontal?: boolean;\r\n    readonly trackLen: number;\r\n    readonly thumbLen: number;\r\n    readonly position: PointObject;\r\n    readonly minThumbLen?: number;\r\n    readonly thumbOffset?: number;\r\n    readonly scrollTargetMaxOffset: number;\r\n    readonly theme?: ScrollBarTheme;\r\n}\r\n\r\nexport declare enum ScrollbarPositionType {\r\n    CONTENT = \"content\",\r\n    CANVAS = \"canvas\"\r\n}\r\n\r\nexport declare interface ScrollBarTheme {\r\n    trackColor?: string;\r\n    thumbHoverColor?: string;\r\n    thumbColor?: string;\r\n    size?: number;\r\n    hoverSize?: number;\r\n    /** 指定如何绘制每一条线段末端，lineCap?: 'butt' | 'round' | 'square'; */\r\n    lineCap?: ShapeAttrs['lineCap'];\r\n}\r\n\r\nexport declare interface ScrollOffset {\r\n    scrollX?: number;\r\n    scrollY?: number;\r\n    hRowScrollX?: number;\r\n}\r\n\r\nexport declare interface ScrollReachNodeField {\r\n    rowFields?: string[];\r\n    colFields?: string[];\r\n}\r\n\r\nexport declare interface ScrollSpeedRatio {\r\n    horizontal?: number;\r\n    vertical?: number;\r\n}\r\n\r\nexport declare interface Selected {\r\n    type: 'cell' | 'row' | 'brush' | 'col' | 'column' | 'row&col' | 'column-multiple';\r\n    indexes: [number | number[], number | number[]];\r\n}\r\n\r\nexport declare class SelectedCellMove extends BaseEvent implements BaseEventImplement {\r\n    bindEvents(): void;\r\n    private getMoveInfo;\r\n    private isInRange;\r\n    private calculateOffset;\r\n    scrollToActiveCell(spreadsheet: SpreadSheet, rowIndex: number, colIndex: number): void;\r\n}\r\n\r\ndeclare type SelectedHandler = (cells: S2CellType[]) => void;\r\n\r\nexport declare interface SelectHeaderCellInfo {\r\n    cell: S2CellType<ViewMeta>;\r\n    isTreeRowClick?: boolean;\r\n    isMultiSelection?: boolean;\r\n}\r\n\r\nexport declare const SERIES_NUMBER_FIELD = \"$$series_number$$\";\r\n\r\nexport declare class SeriesNumberHeader extends BaseHeader<BaseHeaderConfig> {\r\n    private backgroundShape;\r\n    private leftBorderShape;\r\n    /**\r\n     * Get seriesNumber header by config\r\n     * @param viewportBBox\r\n     * @param seriesNumberWidth\r\n     * @param leafNodes\r\n     * @param spreadsheet\r\n     * @param cornerWidth\r\n     */\r\n    static getSeriesNumberHeader(viewportBBox: PanelBBox, seriesNumberWidth: number, leafNodes: Node_2[], spreadsheet: SpreadSheet, cornerWidth: number): SeriesNumberHeader;\r\n    constructor(cfg: BaseHeaderConfig);\r\n    clip(): void;\r\n    layout(): void;\r\n    protected offset(): void;\r\n    private addBackGround;\r\n    private addBorder;\r\n    private addText;\r\n    private getTextPadding;\r\n}\r\n\r\n/**\r\n * add style to container\r\n */\r\nexport declare const setContainerStyle: (container: HTMLElement, options?: {\r\n    style?: CSS_2.Properties;\r\n    className?: string;\r\n}) => void;\r\n\r\n/**\r\n * 设置语言\r\n * @param lang\r\n */\r\nexport declare const setEVALocale: (lang: string) => void;\r\n\r\n/**\r\n * @desc set the interaction state information\r\n * @param spreadsheet sheet instance\r\n * @param interactionStateInfo\r\n */\r\nexport declare const setState: (spreadsheet: SpreadSheet, interactionStateInfo: InteractionStateInfo) => void;\r\n\r\nexport declare const SHAPE_ATTRS_MAP: {\r\n    textShape: string[];\r\n    linkFieldShape: string[];\r\n    interactiveBgShape: string[];\r\n    interactiveBorderShape: string[];\r\n};\r\n\r\nexport declare const SHAPE_STYLE_MAP: {\r\n    textOpacity: string;\r\n    backgroundOpacity: string;\r\n    backgroundColor: string;\r\n    borderOpacity: string;\r\n    borderColor: string;\r\n    borderWidth: string;\r\n    opacity: string;\r\n};\r\n\r\nexport declare type SimpleDataItem = string | number;\r\n\r\nexport declare interface Sort {\r\n    /** 字段id，业务中一般是displayId */\r\n    sortFieldId: string;\r\n    sortMethod?: SortMethod;\r\n    /** 自定义排序 */\r\n    sortBy?: string[];\r\n    /** 按照数值字段排序 */\r\n    sortByMeasure?: string;\r\n    /** 筛选条件，缩小排序范围 */\r\n    query?: Record<string, any>;\r\n    /** 组内排序用来显示icon */\r\n    type?: string;\r\n}\r\n\r\nexport declare interface SortActionParams {\r\n    dataSet?: BaseDataSet;\r\n    sortParam?: SortParam;\r\n    originValues?: string[];\r\n    measureValues?: string[];\r\n    sortByValues?: string[];\r\n    isSortByMeasure?: boolean;\r\n}\r\n\r\nexport declare type SortedDimensionValues = Record<string, string[]>;\r\n\r\nexport declare interface SortFuncParam extends Sort {\r\n    data: Array<string | Record<string, any>>;\r\n}\r\n\r\nexport declare type SortMethod = 'ASC' | 'DESC' | 'asc' | 'desc';\r\n\r\nexport declare enum SortMethodType {\r\n    ASC = \"ASC\",\r\n    DESC = \"DESC\"\r\n}\r\n\r\nexport declare interface SortParam extends Sort {\r\n    /** 自定义func */\r\n    sortFunc?: (v: SortFuncParam) => Array<string>;\r\n}\r\n\r\nexport declare type SortParams = SortParam[];\r\n\r\ndeclare type SortParams_2 = {\r\n    sortKey: string;\r\n    sortMethod: SortMethodType;\r\n    sortBy?: (data: Data) => DataItem;\r\n};\r\n\r\nexport declare interface SortQuery {\r\n    [key: string]: string;\r\n}\r\n\r\nexport declare interface SplitLine {\r\n    horizontalBorderColor?: string;\r\n    horizontalBorderColorOpacity?: number;\r\n    horizontalBorderWidth?: number;\r\n    verticalBorderColor?: string;\r\n    verticalBorderColorOpacity?: number;\r\n    verticalBorderWidth?: number;\r\n    showShadow?: boolean;\r\n    shadowWidth?: number;\r\n    shadowColors?: {\r\n        left: string;\r\n        right: string;\r\n    };\r\n}\r\n\r\n/**\r\n * split total data from origin list data.\r\n */\r\nexport declare function splitTotal(rawData: Data[], fields: Fields): Data[];\r\n\r\nexport declare abstract class SpreadSheet extends EE {\r\n    theme: S2Theme;\r\n    store: Store;\r\n    dataCfg: S2DataConfig;\r\n    options: S2Options;\r\n    /**\r\n     * processed data structure, include {@link Fields}, {@link Meta}\r\n     * {@link Data}, {@link SortParams}\r\n     */\r\n    dataSet: BaseDataSet;\r\n    /**\r\n     * Facet: determine how to render headers/cell\r\n     */\r\n    facet: BaseFacet;\r\n    tooltip: BaseTooltip;\r\n    container: Canvas;\r\n    backgroundGroup: IGroup;\r\n    panelGroup: IGroup;\r\n    panelScrollGroup: IGroup;\r\n    frozenRowGroup: IGroup;\r\n    frozenColGroup: IGroup;\r\n    frozenTrailingRowGroup: IGroup;\r\n    frozenTrailingColGroup: IGroup;\r\n    frozenTopGroup: IGroup;\r\n    frozenBottomGroup: IGroup;\r\n    foregroundGroup: IGroup;\r\n    interaction: RootInteraction;\r\n    hdAdapter: HdAdapter;\r\n    private untypedOn;\r\n    private untypedEmit;\r\n    on: <K extends keyof EmitterType>(event: K, listener: EmitterType[K]) => this;\r\n    emit: <K extends keyof EmitterType>(event: K, ...args: Parameters<EmitterType[K]>) => boolean;\r\n    constructor(dom: S2MountContainer, dataCfg: S2DataConfig, options: S2Options);\r\n    private setDebug;\r\n    private initTheme;\r\n    private getMountContainer;\r\n    private initHdAdapter;\r\n    private initInteraction;\r\n    private initTooltip;\r\n    private renderTooltip;\r\n    protected abstract bindEvents(): void;\r\n    abstract getDataSet(options: S2Options): BaseDataSet;\r\n    /**\r\n     * Check if is pivot mode\r\n     */\r\n    abstract isPivotMode(): boolean;\r\n    /**\r\n     * tree type must be in strategy mode\r\n     */\r\n    abstract isHierarchyTreeType(): boolean;\r\n    /**\r\n     * Check whether scroll contains row header\r\n     * For now contains row header in ListSheet mode by default\r\n     */\r\n    abstract isScrollContainsRowHeader(): boolean;\r\n    /**\r\n     * Scroll Freeze Row Header\r\n     */\r\n    abstract isFrozenRowHeader(): boolean;\r\n    /**\r\n     * Check if is pivot mode\r\n     */\r\n    abstract isTableMode(): boolean;\r\n    /**\r\n     * Check if the value is in the columns\r\n     */\r\n    abstract isValueInCols(): boolean;\r\n    /**\r\n     * 避免每次新增、变更dataSet和options时，生成SpreadSheetFacetCfg\r\n     * 要多出定义匹配的问题，直接按需&部分拆分options/dataSet合并为facetCfg\r\n     */\r\n    protected abstract getFacetCfgFromDataSetAndOptions(): SpreadSheetFacetCfg;\r\n    protected abstract buildFacet(): void;\r\n    abstract clearDrillDownData(rowNodeId?: string, preventRender?: boolean): void;\r\n    abstract handleGroupSort(event: Event_2, meta: Node_2): void;\r\n    showTooltip<T = TooltipContentType>(showOptions: TooltipShowOptions<T>): void;\r\n    showTooltipWithInfo(event: Event_2 | MouseEvent, data: TooltipData[], options?: TooltipOptions): void;\r\n    hideTooltip(): void;\r\n    destroyTooltip(): void;\r\n    registerIcons(): void;\r\n    /**\r\n     * Update data config and keep pre-sort operations\r\n     * Group sort params kept in {@see store} and\r\n     * Priority: group sort > advanced sort\r\n     * @param dataCfg\r\n     */\r\n    setDataCfg(dataCfg: S2DataConfig): void;\r\n    setOptions(options: Partial<S2Options>): void;\r\n    render(reloadData?: boolean, reBuildDataSet?: boolean): void;\r\n    destroy(): void;\r\n    /**\r\n     * Update theme config, if the {@param type} is exists, re-use it,\r\n     * otherwise create new one {@see theme}\r\n     * @param type string\r\n     * @param theme\r\n     */\r\n    setThemeCfg(themeCfg: ThemeCfg): void;\r\n    /**\r\n     * Update pagination config which store in {@see options}\r\n     * @param pagination\r\n     */\r\n    updatePagination(pagination: Pagination): void;\r\n    /**\r\n     * 获取当前表格实际内容高度\r\n     */\r\n    getContentHeight(): number;\r\n    /**\r\n     * 修改表格画布大小，不用重新加载数据\r\n     * @param width\r\n     * @param height\r\n     */\r\n    changeSize(width?: number, height?: number): void;\r\n    getLayoutWidthType(): LayoutWidthType;\r\n    getRowNodes(level?: number): Node_2[];\r\n    /**\r\n     * get columnNode in levels,\r\n     * @param level -1 = get all\r\n     */\r\n    getColumnNodes(level?: number): Node_2[];\r\n    getColumnLeafNodes(): Node_2[];\r\n    /**\r\n     * Update scroll's offset, the value can be undefined,\r\n     * indicate not update current value\r\n     * @param offsetConfig\r\n     * default offsetX(horizontal scroll need animation)\r\n     * but offsetY(vertical scroll don't need animation)\r\n     */\r\n    updateScrollOffset(offsetConfig: OffsetConfig): void;\r\n    getTooltipDataItemMappingCallback(): MappingDataItemCallback;\r\n    getCell<T extends S2CellType = S2CellType>(target: Event_2['target']): T;\r\n    getCellType(target: Event_2['target']): CellTypes;\r\n    /**\r\n     * get total's config by dimension id\r\n     * @param dimension unique dimension id\r\n     */\r\n    getTotalsConfig(dimension: string): Partial<Totals['row']>;\r\n    /**\r\n     * Create all related groups, contains:\r\n     * 1. container -- base canvas group\r\n     * 2. backgroundGroup\r\n     * 3. panelGroup -- main facet group belongs to\r\n     * 4. foregroundGroup\r\n     * @param dom\r\n     * @private\r\n     */\r\n    protected initGroups(dom: S2MountContainer): void;\r\n    protected updateContainerStyle(): void;\r\n    protected initPanelGroupChildren(): void;\r\n    getInitColumnLeafNodes(): Node_2[];\r\n    private initHiddenColumnsDetail;\r\n    private clearCanvasEvent;\r\n}\r\n\r\n/**\r\n * Spreadsheet facet config\r\n */\r\nexport declare interface SpreadSheetFacetCfg extends Fields, S2BasicOptions, S2TableSheetOptions, Style {\r\n    spreadsheet: SpreadSheet;\r\n    dataSet: BaseDataSet;\r\n    meta?: Meta[];\r\n}\r\n\r\nexport declare type StateShapeLayer = 'interactiveBgShape' | 'interactiveBorderShape';\r\n\r\n/**\r\n * Store something in {@link SpreadSheet} temporary along with it's lifecycle\r\n * All the keys need be declare in {@see StoreKey} first\r\n */\r\nexport declare class Store {\r\n    private store;\r\n    set<T extends keyof StoreKey>(key: T, value: StoreKey[T]): void;\r\n    get<T extends keyof StoreKey>(key: T, defaultValue?: StoreKey[T]): StoreKey[T];\r\n    clear(): void;\r\n    size(): number;\r\n}\r\n\r\n/**\r\n * All stored keys need type define here\r\n */\r\nexport declare interface StoreKey {\r\n    scrollX: number;\r\n    scrollY: number;\r\n    hRowScrollX: number;\r\n    sortParam: SortParam;\r\n    drillDownIdPathMap: Map<string, number[][]>;\r\n    drillDownNode: Node_2;\r\n    drillItemsNum: number;\r\n    drillDownFieldInLevel: PartDrillDownFieldInLevel[];\r\n    interactionStateInfo: InteractionStateInfo;\r\n    originalDataCfg: S2DataConfig;\r\n    panelBBox: BBox;\r\n    activeResizeArea: Group;\r\n    valueRanges: ValueRanges;\r\n    initColumnLeafNodes: Node_2[];\r\n    /**\r\n     * 隐藏列详情\r\n     *  | a, b, [c,d 隐藏] [icon e ] , [f 隐藏], [icon g]   |\r\n     */\r\n    hiddenColumnsDetail: HiddenColumnsInfo[];\r\n    lastRenderedColumnFields: string[];\r\n    resized: boolean;\r\n    visibleActionIcons: GuiIcon[];\r\n    lastClickedCell: S2CellType<ViewMeta>;\r\n    [key: string]: unknown;\r\n}\r\n\r\nexport declare interface Style {\r\n    readonly layoutWidthType?: LayoutWidthType;\r\n    readonly treeRowsWidth?: number;\r\n    readonly collapsedRows?: Record<string, boolean>;\r\n    readonly collapsedCols?: Record<string, boolean>;\r\n    readonly cellCfg?: CellCfg;\r\n    readonly colCfg?: ColCfg;\r\n    readonly rowCfg?: RowCfg;\r\n    readonly device?: 'pc' | 'mobile';\r\n}\r\n\r\nexport declare interface SummaryParam extends DataParam {\r\n    cellInfos?: TooltipDataItem[];\r\n}\r\n\r\nexport declare interface SummaryProps {\r\n    summaries: TooltipSummaryOptions[];\r\n}\r\n\r\nexport declare const TABLE_COL_HORIZONTAL_RESIZE_AREA_KEY = \"table-col-horizontal-resize-area\";\r\n\r\nexport declare class TableColCell extends ColCell {\r\n    protected handleRestOptions(...[headerConfig]: [any]): void;\r\n    protected isFrozenCell(): boolean;\r\n    protected getColResizeArea(): Group | IGroup;\r\n    protected isSortCell(): boolean;\r\n    protected showSortIcon(): boolean;\r\n    protected getTextStyle(): TextTheme;\r\n    getContentArea(): {\r\n        x: number;\r\n        y: number;\r\n        width: number;\r\n        height: number;\r\n    };\r\n    protected getHorizontalResizeAreaName(): string;\r\n    protected getFormattedFieldValue(): FormatResult;\r\n    protected drawBackgroundShape(): void;\r\n}\r\n\r\nexport declare class TableCornerCell extends TableColCell {\r\n    getStyle(name?: string): any;\r\n    protected showSortIcon(): boolean;\r\n    protected drawLeftBorder(): void;\r\n    protected drawBorders(): void;\r\n}\r\n\r\nexport declare class TableDataCell extends DataCell {\r\n    protected drawTextShape(): void;\r\n    protected drawLinkFieldShape(): void;\r\n    protected drawBorderShape(): void;\r\n}\r\n\r\nexport declare class TableDataSet extends BaseDataSet {\r\n    protected displayData: DataType[];\r\n    processDataCfg(dataCfg: S2DataConfig): S2DataConfig;\r\n    setDataCfg(dataCfg: S2DataConfig): void;\r\n    /**\r\n     * 返回顶部冻结行\r\n     * @returns\r\n     */\r\n    protected getStartRows(): DataType[];\r\n    /**\r\n     * 返回底部冻结行\r\n     * @returns\r\n     */\r\n    protected getEndRows(): DataType[];\r\n    /**\r\n     * 返回可移动的非冻结行\r\n     * @returns\r\n     */\r\n    protected getMovableRows(): DataType[];\r\n    handleDimensionValueFilter: () => void;\r\n    handleDimensionValuesSort: () => void;\r\n    getDimensionValues(field: string, query?: DataType): string[];\r\n    getCellData({ query }: CellDataParams): DataType;\r\n    getMultiData(query: DataType, isTotals?: boolean): DataType[];\r\n}\r\n\r\ndeclare interface TableHeaderParams {\r\n    parentNode: Node_2;\r\n    facetCfg: SpreadSheetFacetCfg;\r\n    hierarchy: Hierarchy;\r\n}\r\n\r\nexport declare class TableRowCell extends DataCell {\r\n    get cellType(): CellTypes;\r\n    protected getTextStyle(): TextTheme;\r\n    protected drawBorderShape(): void;\r\n    drawResizeArea(): void;\r\n}\r\n\r\nexport declare class TableSheet extends SpreadSheet {\r\n    getDataSet(options: S2Options): any;\r\n    /**\r\n     * Check if is pivot mode\r\n     */\r\n    isPivotMode(): boolean;\r\n    /**\r\n     * Check if is pivot mode\r\n     */\r\n    isTableMode(): boolean;\r\n    /**\r\n     * tree type must be in strategy mode\r\n     */\r\n    isHierarchyTreeType(): boolean;\r\n    /**\r\n     * Check whether scroll contains row header\r\n     * For now contains row header in ListSheet mode by default\r\n     */\r\n    isScrollContainsRowHeader(): boolean;\r\n    /**\r\n     * Scroll Freeze Row Header\r\n     */\r\n    isFrozenRowHeader(): boolean;\r\n    clearDrillDownData(): void;\r\n    /**\r\n     * Check if the value is in the columns\r\n     */\r\n    isValueInCols(): boolean;\r\n    protected bindEvents(): void;\r\n    protected initPanelGroupChildren(): void;\r\n    protected getFacetCfgFromDataSetAndOptions(): SpreadSheetFacetCfg;\r\n    protected buildFacet(): void;\r\n    protected clearFrozenGroups(): void;\r\n    destroy(): void;\r\n    handleGroupSort(event: Event_2, meta: Node_2): void;\r\n}\r\n\r\nexport declare interface TargetCellInfo {\r\n    target: S2CellType;\r\n    event: Event_2;\r\n    viewMeta: Node_2;\r\n}\r\n\r\n/**\r\n * the data cell and meta that make up the mergedCell, temporary use\r\n */\r\nexport declare type TempMergedCell = {\r\n    cells: S2CellType[];\r\n    viewMeta: ViewMeta;\r\n    isPartiallyVisible?: boolean;\r\n};\r\n\r\nexport declare type TextAlign = 'left' | 'center' | 'right';\r\n\r\nexport declare interface TextAlignCfg {\r\n    textAlign?: TextAlign;\r\n    textBaseline?: TextBaseline;\r\n}\r\n\r\nexport declare type TextBaseline = 'top' | 'middle' | 'bottom';\r\n\r\nexport declare interface TextTheme extends TextAlignCfg {\r\n    fontFamily?: string;\r\n    fontSize?: number;\r\n    fontWeight?: number | 'normal' | 'bold' | 'bolder' | 'lighter';\r\n    fill?: string;\r\n    linkTextFill?: string;\r\n    opacity?: number;\r\n}\r\n\r\nexport declare interface ThemeCfg {\r\n    theme?: S2Theme;\r\n    palette?: Palette;\r\n    name?: ThemeName;\r\n}\r\n\r\nexport declare type ThemeName = 'default' | 'colorful' | 'gray';\r\n\r\nexport declare interface Tooltip<T = TooltipContentType> extends BaseTooltipConfig<T> {\r\n    readonly row?: BaseTooltipConfig<T>;\r\n    readonly col?: BaseTooltipConfig<T>;\r\n    readonly corner?: BaseTooltipConfig<T>;\r\n    readonly data?: BaseTooltipConfig<T>;\r\n}\r\n\r\nexport declare const TOOLTIP_CONTAINER_CLS: string;\r\n\r\nexport declare const TOOLTIP_OPERATION_PREFIX_CLS: string;\r\n\r\nexport declare const TOOLTIP_OPERATOR_HIDDEN_COLUMNS_MENU: TooltipOperatorMenu;\r\n\r\nexport declare const TOOLTIP_OPERATOR_SORT_MENUS: TooltipOperatorMenu[];\r\n\r\nexport declare const TOOLTIP_OPERATOR_TABLE_SORT_MENUS: TooltipOperatorMenu[];\r\n\r\nexport declare const TOOLTIP_OPERATOR_TREND_MENU: TooltipOperatorMenu;\r\n\r\nexport declare const TOOLTIP_POSITION_OFFSET: TooltipPosition;\r\n\r\nexport declare const TOOLTIP_PREFIX_CLS: string;\r\n\r\nexport declare type TooltipAutoAdjustBoundary = 'body' | 'container';\r\n\r\nexport declare type TooltipContentType = Element | string;\r\n\r\nexport declare type TooltipData = {\r\n    summaries?: TooltipSummaryOptions[];\r\n    details?: ListItem[];\r\n    headInfo?: TooltipHeadInfo;\r\n    name?: string;\r\n    tips?: string;\r\n    infos?: string;\r\n    interpretation?: TooltipInterpretationOptions;\r\n    colIndex?: number;\r\n    rowIndex?: number;\r\n};\r\n\r\nexport declare type TooltipDataItem = Record<string, any>;\r\n\r\nexport declare interface TooltipDataParam extends DataParam {\r\n    cellInfos: TooltipDataItem[];\r\n}\r\n\r\nexport declare type TooltipDetailProps = {\r\n    list: ListItem[];\r\n};\r\n\r\nexport declare type TooltipHeadInfo = {\r\n    rows: ListItem[];\r\n    cols: ListItem[];\r\n};\r\n\r\nexport declare type TooltipInterpretationOptions = {\r\n    name: string;\r\n    icon?: Element | string;\r\n    text?: string;\r\n    render?: Element | string;\r\n};\r\n\r\nexport declare interface TooltipNameTipsOptions {\r\n    name?: string;\r\n    tips?: string;\r\n}\r\n\r\nexport declare interface TooltipOperation extends TooltipOperatorOptions {\r\n    hiddenColumns?: boolean;\r\n    trend?: boolean;\r\n    sort?: boolean;\r\n    tableSort?: boolean;\r\n}\r\n\r\nexport declare interface TooltipOperationOptions {\r\n    plot: SpreadSheet;\r\n    sortFieldId: string;\r\n    sortQuery: SortQuery;\r\n}\r\n\r\nexport declare interface TooltipOperationState {\r\n    sortParam: SortParam;\r\n}\r\n\r\nexport declare interface TooltipOperatorMenu {\r\n    key: string;\r\n    icon?: Element | string;\r\n    text?: string;\r\n    onClick?: () => void;\r\n    visible?: boolean | ((cell: S2CellType) => boolean);\r\n    children?: TooltipOperatorMenu[];\r\n}\r\n\r\nexport declare interface TooltipOperatorOptions {\r\n    onClick?: (...args: unknown[]) => void;\r\n    menus?: TooltipOperatorMenu[];\r\n}\r\n\r\nexport declare interface TooltipOptions {\r\n    hideSummary?: boolean;\r\n    operator?: TooltipOperatorOptions;\r\n    enterable?: boolean;\r\n    isTotals?: boolean;\r\n    showSingleTips?: boolean;\r\n    onlyMenu?: boolean;\r\n    enableFormat?: boolean;\r\n}\r\n\r\nexport declare interface TooltipPosition {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport declare type TooltipShowOptions<T = TooltipContentType> = {\r\n    position: TooltipPosition;\r\n    data?: TooltipData;\r\n    cellInfos?: TooltipDataItem[];\r\n    options?: TooltipOptions;\r\n    content?: ((cell: S2CellType, defaultTooltipShowOptions: TooltipShowOptions<T>) => T) | T;\r\n    event?: Event_2 | MouseEvent;\r\n};\r\n\r\nexport declare interface TooltipSummaryOptions {\r\n    name: string;\r\n    value: number | string;\r\n    selectedData: TooltipDataItem[];\r\n}\r\n\r\nexport declare interface Total {\r\n    /** 是否显示总计 */\r\n    showGrandTotals: boolean;\r\n    /** 是否显示小计 */\r\n    showSubTotals: boolean;\r\n    calcTotals?: CalcTotals;\r\n    calcSubTotals?: CalcTotals;\r\n    /** 小计的汇总维度 */\r\n    subTotalsDimensions: string[];\r\n    /** 总计布局位置，默认是下或右 */\r\n    reverseLayout: boolean;\r\n    /** 小计布局位置，默认下或者右 */\r\n    reverseSubLayout: boolean;\r\n    label?: string;\r\n    subLabel?: string;\r\n}\r\n\r\nexport declare const TOTAL_VALUE = \"$$total$$\";\r\n\r\n/**\r\n * tableau的英文是这个，这里有个绕的概念\r\n * 如，某行维度需要展示小计，实际上是将对应的一列数据进行聚合，所以文案上显示的应该是“展示列小计”\r\n * 但是内部配置我倾向于仍然按照字段所属维度区，即配置的row，代表的是行维度而不是行小计\r\n */\r\nexport declare interface Totals {\r\n    readonly row?: Partial<Readonly<Total>>;\r\n    readonly col?: Partial<Readonly<Total>>;\r\n}\r\n\r\nexport declare interface TotalsStatus {\r\n    isRowTotal: boolean;\r\n    isRowSubTotal: boolean;\r\n    isColTotal: boolean;\r\n    isColSubTotal: boolean;\r\n}\r\n\r\nexport declare const transformCustomTreeItems: (itemConfig: any[]) => any;\r\n\r\n/**\r\n * return the edges without overlapping edges\r\n * @param edges the collection of edges\r\n */\r\nexport declare const unique: (edges: number[][][]) => number[][][];\r\n\r\n/**\r\n * unmerge MergedCell\r\n * @param removedCells\r\n * @param sheet\r\n */\r\nexport declare const unmergeCell: (sheet: SpreadSheet, removedCells: MergedCell) => void;\r\n\r\nexport declare function updateFillOpacity(shape: IShape, opacity: number): void;\r\n\r\n/**\r\n * update the mergedCell\r\n * @param sheet the base sheet instance\r\n */\r\nexport declare const updateMergedCells: (sheet: SpreadSheet) => void;\r\n\r\nexport declare function updateShapeAttr<K extends keyof ShapeAttrs>(shape: IShape, attribute: K, value: ShapeAttrs[K]): void;\r\n\r\nexport declare function updateStrokeOpacity(shape: IShape, opacity: number): void;\r\n\r\nexport declare const VALUE_FIELD = \"$$value$$\";\r\n\r\nexport declare const VALUE_RANGES_KEY = \"valueRanges\";\r\n\r\nexport declare interface ValueRange {\r\n    minValue?: number;\r\n    maxValue?: number;\r\n}\r\n\r\nexport declare type ValueRanges = Record<string, ValueRange>;\r\n\r\ndeclare interface ViewCellHeights {\r\n    getCellOffsetY: (index: number) => number;\r\n    getTotalHeight: () => number;\r\n    getTotalLength: () => number;\r\n    getIndexRange: (minHeight: number, maxHeight: number) => {\r\n        start: number;\r\n        end: number;\r\n    };\r\n}\r\n\r\nexport declare interface ViewMeta {\r\n    spreadsheet: SpreadSheet;\r\n    id: string;\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    data: Record<string, any>;\r\n    rowIndex: number;\r\n    colIndex: number;\r\n    valueField: string;\r\n    fieldValue: DataItem;\r\n    isTotals?: boolean;\r\n    rowQuery?: Record<string, any>;\r\n    colQuery?: Record<string, any>;\r\n    rowId?: string;\r\n    colId?: string;\r\n    field?: string;\r\n    [key: string]: any;\r\n}\r\n\r\nexport declare type ViewMetaIndexType = keyof Pick<ViewMeta, 'colIndex' | 'rowIndex'>;\r\n\r\nexport { }\r\n\n        }"}}}}}
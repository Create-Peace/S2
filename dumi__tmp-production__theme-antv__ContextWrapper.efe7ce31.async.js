"use strict";(self.webpackChunk_antv_s2_site=self.webpackChunk_antv_s2_site||[]).push([[2643],{94991:function(n,e,t){t.d(e,{w:function(){return o}});var o=(0,t(67294).createContext)({})},6212:function(n,e,t){t.r(e),t.d(e,{default:function(){return r}});t(67294);var o=t(1059),a=t(94991),i=t(85893);function r(){var n=(0,o.pC)();return(0,i.jsx)(a.w.Provider,{value:{meta:{exampleTopics:[{id:"case",title:{zh:"场景案例",en:"Show Case"},icon:"star-single-line",examples:[{demos:[{id:"group-drill-down",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/RYy4GI8Y8d/demo.gif",source:"import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport { isUpDataValue } from '@antv/s2';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/ff31b171-17a7-4d29-b20a-0b90a810d2de.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const GridSheet = () => {\n      const [s2DataConfig, setS2DataConfig] = useState(data.dataCfg);\n      const [drillDownField, setDrillDownField] = useState('');\n      const s2Options = {\n        width: 800,\n        height: 600,\n        tooltip: {\n          showTooltip: false,\n        },\n        style: {\n          layoutWidthType: 'colAdaptive',\n          cellCfg: {\n            width: 400,\n            height: 100,\n            valuesCfg: {\n              widthPercent: [40, 20, 20, 20],\n            },\n          },\n        },\n        conditions: {\n          text: [\n            {\n              mapping: (value, cellInfo) => {\n                // 添加文本颜色映射逻辑\n                const { colIndex } = cellInfo;\n                if (colIndex <= 1) {\n                  // 主指标为黑色\n                  return {\n                    fill: '#000',\n                  };\n                }\n                return {\n                  fill: isUpDataValue(value) ? '#FF4D4F' : '#29A294', // 同环比红张绿跌\n                };\n              },\n            },\n          ],\n        },\n      };\n\n      const Breadcrumb = () => {\n        if (!drillDownField) {\n          return null;\n        }\n        return (\n          <div className=\"antv-s2-breadcrumb\">\n            <span\n              className=\"antv-s2-breadcrumb-all\"\n              onClick={() => {\n                setS2DataConfig(data.dataCfg);\n                setDrillDownField('');\n              }}\n            >\n              全部\n            </span>\n            <span> / {drillDownField}</span>\n          </div>\n        );\n      };\n\n      const dataCellTooltip = (viewMeta) => {\n        const { spreadsheet, fieldValue } = viewMeta;\n        return (\n          <div>\n            <div className=\"antv-s2-tooltip-operator\">\n              <div\n                className=\"antv-s2-tooltip-action\"\n                onClick={() => {\n                  setS2DataConfig(data.drillDownDataCfg);\n                  setDrillDownField(fieldValue.label);\n                }}\n              >\n                下钻\n              </div>\n              <div\n                className=\"antv-s2-tooltip-action\"\n                onClick={() => {\n                  spreadsheet.interaction.mergeCells();\n                }}\n              >\n                合并\n              </div>\n            </div>\n            <div className=\"antv-s2-tooltip-divider\"></div>\n            <div className=\"antv-s2-tooltip-head-info-list\">\n              {fieldValue.label}\n            </div>\n            <div className=\"antv-s2-tooltip-detail-list\">\n              {fieldValue.values.map((item, key) => (\n                <div key={key} className=\"antv-s2-tooltip-detail-item\">\n                  <span className=\"antv-s2-tooltip-detail-item-key\">\n                    {item[0]}\n                  </span>\n                  <span className=\"antv-s2-tooltip-detail-item-val antv-s2-tooltip-highlight\">\n                    {`${item[1]} | 环比率：${item[2]} | 环比差值：${item[3]}`}\n                  </span>\n                </div>\n              ))}\n            </div>\n            <div className=\"antv-s2-tooltip-infos\">\n              按住 Shift 多选单元格进行人群合并\n            </div>\n          </div>\n        );\n      };\n\n      const onDataCellMouseUp = (value) => {\n        const viewMeta = value?.viewMeta;\n        if (!viewMeta) {\n          return;\n        }\n\n        const position = {\n          x: value.event.clientX,\n          y: value.event.clientY,\n        };\n        viewMeta.spreadsheet.tooltip.show({\n          position,\n          content: dataCellTooltip(viewMeta),\n        });\n      };\n      return (\n        <SheetComponent\n          dataCfg={s2DataConfig}\n          options={s2Options}\n          sheetType=\"gridAnalysis\"\n          header={{\n            title: '人群网络分析',\n            advancedSortCfg: { open: true },\n            extra: [<Breadcrumb />],\n          }}\n          onDataCellMouseUp={onDataCellMouseUp}\n        />\n      );\n    };\n\n    ReactDOM.render(<GridSheet />, document.getElementById('container'));\n  });\n\ninsertCss(`\n  .antv-s2-tooltip-operator {\n    display: flex\n  }\n  .antv-s2-tooltip-action {\n    width: 50%;\n    text-align: center;\n  }\n  .antv-s2-breadcrumb {\n  position: absolute;\n    left: 130px;\n    top: 11px;\n  }\n  .antv-s2-breadcrumb-all {\n     color: #706f6f;\n  }\n  .antv-s2-breadcrumb-all:hover {\n    color: #873bf4;\n    cursor: pointer;\n  }\n  .antv-s2-advanced-sort {\n    display: none;\n  }\n  .s2-header {\n    margin:0px !important;\n  }\n`);\n",title:{zh:"分群下钻表",en:"Group drill down sheet"},filename:"group-drill-down.tsx",isNew:!1},{id:"single-population-proportion",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/clsZ0BSxpR/c315b0f0-03df-46e6-b470-7894c7fa5b17.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport insertCss from 'insert-css';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\nimport { S2Options } from '@antv/s2';\n\nconst PALETTE_COLORS = [\n  {\n    limit: 10,\n    background: '#b8e1ff',\n  },\n  {\n    limit: 20,\n    background: '#b4d3fb',\n  },\n  {\n    limit: 30,\n    background: '#7daaff',\n  },\n  {\n    limit: 40,\n    background: '#5b8ff9',\n  },\n  {\n    limit: 50,\n    background: '#3d76dd',\n  },\n  {\n    limit: 60,\n    background: '#085ec0',\n  },\n  {\n    limit: 70,\n    background: '#085ec0cc',\n  },\n  {\n    limit: 80,\n    background: '#0047a5',\n  },\n  {\n    limit: 90,\n    background: '#00318a',\n  },\n  {\n    limit: 100,\n    background: '#001d70',\n  },\n];\n\nconst getTargetColor = (value) => {\n  if (isNaN(Number(value))) {\n    return PALETTE_COLORS[0].background;\n  }\n  return PALETTE_COLORS[Math.floor(Number(value) / 10)].background;\n};\n\nconst PaletteLegend = () => {\n  return (\n    <div className=\"palette-legend\">\n      <div className=\"palette-limit\">0%</div>\n      {PALETTE_COLORS.map((color) => (\n        <span\n          key={color.background}\n          className=\"palette-color\"\n          style={{ background: color.background }}\n        />\n      ))}\n      <div className=\"palette-limit\">100%</div>\n    </div>\n  );\n};\n\nfetch('https://assets.antv.antgroup.com/s2/single-population-proportion.json')\n  .then((res) => res.json())\n  .then(({ data }) => {\n    const s2DataConfig = {\n      fields: {\n        rows: ['type', 'job'],\n        columns: ['age', 'city'],\n        values: ['count'],\n        valueInCols: true,\n      },\n      meta: [\n        {\n          field: 'type',\n          name: '类别',\n        },\n        {\n          field: 'job',\n          name: '职业',\n        },\n        {\n          field: 'age',\n          name: '年龄分布',\n        },\n        {\n          field: 'city',\n          name: '所在城市',\n        },\n        {\n          field: 'count',\n          name: '数值',\n        },\n      ],\n      data,\n    };\n    const s2Options = {\n      width: 800,\n      height: 600,\n      tooltip: {\n        showTooltip: true,\n        operation: {\n          hiddenColumns: true,\n        },\n      },\n      interaction: {\n        selectedCellsSpotlight: true,\n        hoverHighlight: false,\n      },\n      style: {\n        layoutWidthType: 'colAdaptive',\n        colCfg: {\n          hideMeasureColumn: true,\n        },\n        cellCfg: {\n          width: 100,\n        },\n      },\n      conditions: {\n        text: [\n          {\n            field: 'count',\n            mapping(value) {\n              return {\n                fill: value >= 50 ? '#fff' : '#282b32',\n              };\n            },\n          },\n        ],\n        background: [\n          {\n            field: 'count',\n            mapping(value) {\n              const backgroundColor = getTargetColor(value);\n              return {\n                fill: backgroundColor,\n              };\n            },\n          },\n        ],\n      },\n    };\n\n    ReactDOM.render(\n      <div className=\"root\">\n        <SheetComponent\n          dataCfg={s2DataConfig}\n          options={s2Options as S2Options}\n          sheetType=\"pivot\"\n          adaptive={false}\n          header={{\n            title: '单人群占比表',\n            extra: [<PaletteLegend />],\n          }}\n        />\n      </div>,\n      document.getElementById('container'),\n    );\n  });\n\ninsertCss(`\n  .root{\n    display: inline-block;\n  }\n\n  .palette-legend {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    margin-bottom: 8px;\n  }\n\n .palette-color {\n    width: 12px;\n    height: 12px;\n  }\n\n  .palette-limit{\n    font-size: 12px;\n    color: rgb(94,94,94);\n  }\n\n  .palette-color + .palette-limit {\n    margin-left: 5px;\n  }\n\n  .palette-limit + .palette-color {\n    margin-left: 5px;\n  }\n\n  .s2-header {\n    margin:0px !important;\n  }\n`);\n",title:{zh:"单人群占比表",en:"Single population proportion Sheet"},filename:"single-population-proportion.tsx",isNew:!1}],icon:"",id:"proportion",title:{en:"Proportion sheet",zh:"占比表"},api:{zh:" \n \n# React 表组件 \n \n基于 `@antv/s2` 封装的 `React` 版开箱即用的组件 `<SheetComponent />` \n \n## SpreadsheetProps \n \n功能描述： React SheetComponent 组件的 props 参数 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 <br> 3. `gridAnalysis`: 网格分析表 <br/> 4. `strategy`: 趋势分析表 | `pivot \\| table \\| gridAnalysis \\| strategy` \\| `pivot` |  | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| dataCfg | 透视表数据映射相关配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions) |  | ✓ | \n| partDrillDown | 维度下钻相关属性 | [PartDrillDown](/docs/api/components/drill-down) |  |  | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (current:number, pageSize: number) => void,<br>onChange?: (current:number, pageSize: number) => void <br>} | `false` |  | \n| themeCfg | 自定义透视表主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n| header | 表头配置项 | [HeaderCfgProps](/docs/api/components/header) |  |  | \n| getSpreadSheet | 获取表实例 (1.29.0 已废弃，请使用 `onMounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onRangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| onRowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellTrendIconClick | 数值单元格的趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onDataCellBrushSelection | 数值单元格刷选事件 | ( dataCells: [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onDataCellSelectMove | 数值单元格键盘方向键移动事件 | (metas: CellMeta[]) => void |  |  | \n| onDataCellEditEnd | 数值单元格编辑完成（暂只支持编辑表） | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onCornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| onRangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| onRangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| onLayoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| onLayoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| onLayoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onLayoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| onCollapseRowsAll | 树状模式下收起全部的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| onBeforeRender | 开始 render 前的事件 | () => void; |  |  | \n| onAfterRender | render 完成的事件 | () => void; |  |  | \n| onMounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onDestroy | 表格销毁事件 | () => void; |  |  | \n| onLayoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseUp | resize 热区鼠标松开事件 | ( event: `MouseEvent`,  resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseMove | resize 热区鼠标移动事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onKeyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| onKeyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| onCopied | 复制事件 | (copyData: string) => void |  |  | \n| onActionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| onActionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| onContextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| onMouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| onSelected | 单元格选中事件 | (cells: ( [Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onReset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| onLinkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| onScroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: [ColCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n| onRowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: [RowCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n \n## SheetComponentOptions \n \nReact 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有两点不同 \n \n- tooltip 的 content 从 `Element | string` 变为了 `ReactNode`, 即可以是任意的 `jsx` 元素 \n- 分页配置从 S2 的分页配置 变为了 `antd` 的分页配置，即支持对 `antd` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps as AntdPaginationProps } from 'antd'; \n \ntype SheetComponentOptions = S2Options< \n  React.ReactNode, \n  Pagination & AntdPaginationProps \n>; \n``` \n \n<br/> \n \n# Vue 表组件 \n \n基于 `@antv/s2` 层封装的 `Vue 3.0` 版开箱即用的组件 `<SheetComponent />` \n \n## props \n \n功能描述： Vue SheetComponent 组件的 props，如 `<SheetComponent :sheetType=\"pivot\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 | `pivot | table` | `pivot` |  | \n| dataCfg | 透视表数据映射配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions-1) |  | ✓ | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (pageSize: number) => void,<br>onChange?: (current: number) => void <br>} | `false` |  | \n| themeCfg | 自定义表格主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n \n## events \n \n功能描述： Vue SheetComponent 组件的 events，`<SheetComponent @rowCellClick=\"handleRowCellClick\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions-1)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| getSpreadSheet | 获取表实例 (1.4.0 已废弃，请使用 `mounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| rangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| rowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellTrendIconClick | 数值趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| dataCellBrushSelection | 数值单元格刷选事件 | (brushRangeDataCells: ( [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| dataCellScroll | 数值单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| cornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| rangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| rangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| layoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| layoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| layoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| layoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| collapseRowsAll | 树状模式下收起全部的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| beforeRender | 开始 render 前的事件 | () => void; |  |  | \n| afterRender | render 完成的事件 | () => void; |  |  | \n| mounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| destroy | 表格销毁事件 | () => void; |  |  | \n| layoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseUp | resize 热区鼠标松开事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseMove | resize 热区鼠标移动事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| keyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| keyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| copied | 复制事件 | (copyData: string) => void |  |  | \n| actionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| actionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| contextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| mouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| selected | 单元格选中事件 | ( cells: ([Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| reset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| linkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| scroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: ColCell[]) => void; |  |  | \n| rowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: RowCell[]) => void; |  |  | \n \n## SheetComponentOptions \n \nVue 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有一点不同 \n \n- 分页配置从 S2 的分页配置 变为了 `antd-vue` 的分页配置，即支持对 `antd-vue` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps } from 'ant-design-vue'; \n \ntype SheetComponentOptions = S2Options< \n  Element | string, \n  Pagination & PaginationProps \n>; \n``` \n \n# 公共对象 \n \n## TargetCellInfo \n \n功能描述：交互回调函数的返回信息。 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| target | 交互作用对象 | [S2CellType](/docs/api/basic-class/base-cell) |  |  | \n| event | 事件 | [Event](#) |  |  | \n| viewMeta | 当前节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n \n \n### SortParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`     | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）         | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`                              | -      |      | \n| type          | 组内排序用来显示 icon （透视表适用）          | `string`                              | -      |      | \n| sortFunc      | 自定义排序的 function                        | (params: [SortFuncParam](#sortfuncparam)) => `string[]` | -      |      | \n \n#### SortFuncParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`    | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）      | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`    | -      |      | \n| type          | 组内排序用来显示 icon（透视表适用）             | `string`                              | -      |      | \n| data          | 当前排序数据列表                            | `Array<string \\| Record<string, any>>` | -      |      | \n \n \n## CellScrollPosition \n \n功能描述：单元格滚动的位置信息。 \n \n| 参数        | 说明         | 类型   | 默认值 | 必选 | \n| ---------- | ----------- | ----- | ----- | ---- | \n| scrollX     | 水平方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n| scrollY     | 垂直方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n \n## HiddenColumnsInfo \n \n功能描述： 开启 [隐藏列头](/docs/manual/advanced/interaction/hide-columns) 后，隐藏列头的节点信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| hideColumnNodes | 当前隐藏的节点信息 | [Node](/docs/api/basic-class/node)[] |  |  | \n| displaySiblingNode | 展示的相邻节点信息 | { prev:[Node](/docs/api/basic-class/node);next: [Node](/docs/api/basic-class/node) } |  |  | \n \n## ResizeParams \n \n功能描述：表格 resize（单元格行高列宽拖动变化）和单元格样式信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| info | resize 配置信息 | [ResizeInfo](#resizeinfo) |  |  | \n| style | options 中样式相关配置 | [style](/docs/api/general/S2Options#style) |  |  | \n \n## ResizeInfo \n \n功能描述：表格 resize（ 单元格行高列宽拖动变化）配置信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| theme | resize 热区配置 | [ResizeArea](/docs/api/general/S2Theme#resizearea) |  |  | \n| type | resize 方向 | `Horizontal` \\| `Vertical` |  |  | \n| offsetX | 横向偏移量 | `number` |  |  | \n| offsetY | 纵向偏移量 | `number` |  |  | \n| width | 拖拽的宽度 | `number` |  |  | \n| height | 拖拽 | `number` |  |  | \n| size | 热区尺寸 | `number` |  |  | \n| effect | 拖拽更改影响的区域 | `Field` \\| `Cell` \\| `Tree` \\| `Series` |  |  | \n| isResizeArea | 是否属于 resize 热区 | `boolean` |  |  | \n| id | 字段 id | `string` |  |  | \n| meta | resize 热区对应单元格节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n| resizedWidth | 拖拽后的宽度 | `number` |  |  | \n| resizedHeight | 拖拽后的高度 | `number` |  |  | \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n \n",en:" \n \n# React 表组件 \n \n基于 `@antv/s2` 封装的 `React` 版开箱即用的组件 `<SheetComponent />` \n \n## SpreadsheetProps \n \n功能描述： React SheetComponent 组件的 props 参数 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 <br> 3. `gridAnalysis`: 网格分析表 <br/> 4. `strategy`: 趋势分析表 | `pivot \\| table \\| gridAnalysis \\| strategy` \\| `pivot` |  | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| dataCfg | 透视表数据映射相关配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions) |  | ✓ | \n| partDrillDown | 维度下钻相关属性 | [PartDrillDown](/docs/api/components/drill-down) |  |  | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (current:number, pageSize: number) => void,<br>onChange?: (current:number, pageSize: number) => void <br>} | `false` |  | \n| themeCfg | 自定义透视表主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n| header | 表头配置项 | [HeaderCfgProps](/docs/api/components/header) |  |  | \n| getSpreadSheet | 获取表实例 (1.29.0 已废弃，请使用 `onMounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onRangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| onRowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellTrendIconClick | 数值单元格的趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onDataCellBrushSelection | 数值单元格刷选事件 | ( dataCells: [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onDataCellSelectMove | 数值单元格键盘方向键移动事件 | (metas: CellMeta[]) => void |  |  | \n| onDataCellEditEnd | 数值单元格编辑完成（暂只支持编辑表） | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onCornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| onRangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| onRangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| onLayoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| onLayoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| onLayoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onLayoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| onCollapseRowsAll | 树状模式下收起全部的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| onBeforeRender | 开始 render 前的事件 | () => void; |  |  | \n| onAfterRender | render 完成的事件 | () => void; |  |  | \n| onMounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onDestroy | 表格销毁事件 | () => void; |  |  | \n| onLayoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseUp | resize 热区鼠标松开事件 | ( event: `MouseEvent`,  resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseMove | resize 热区鼠标移动事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onKeyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| onKeyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| onCopied | 复制事件 | (copyData: string) => void |  |  | \n| onActionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| onActionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| onContextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| onMouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| onSelected | 单元格选中事件 | (cells: ( [Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onReset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| onLinkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| onScroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: [ColCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n| onRowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: [RowCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n \n## SheetComponentOptions \n \nReact 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有两点不同 \n \n- tooltip 的 content 从 `Element | string` 变为了 `ReactNode`, 即可以是任意的 `jsx` 元素 \n- 分页配置从 S2 的分页配置 变为了 `antd` 的分页配置，即支持对 `antd` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps as AntdPaginationProps } from 'antd'; \n \ntype SheetComponentOptions = S2Options< \n  React.ReactNode, \n  Pagination & AntdPaginationProps \n>; \n``` \n \n<br/> \n \n# Vue 表组件 \n \n基于 `@antv/s2` 层封装的 `Vue 3.0` 版开箱即用的组件 `<SheetComponent />` \n \n## props \n \n功能描述： Vue SheetComponent 组件的 props，如 `<SheetComponent :sheetType=\"pivot\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 | `pivot | table` | `pivot` |  | \n| dataCfg | 透视表数据映射配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions-1) |  | ✓ | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (pageSize: number) => void,<br>onChange?: (current: number) => void <br>} | `false` |  | \n| themeCfg | 自定义表格主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n \n## events \n \n功能描述： Vue SheetComponent 组件的 events，`<SheetComponent @rowCellClick=\"handleRowCellClick\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions-1)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| getSpreadSheet | 获取表实例 (1.4.0 已废弃，请使用 `mounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| rangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| rowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellTrendIconClick | 数值趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| dataCellBrushSelection | 数值单元格刷选事件 | (brushRangeDataCells: ( [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| dataCellScroll | 数值单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| cornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| rangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| rangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| layoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| layoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| layoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| layoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| collapseRowsAll | 树状模式下收起全部的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| beforeRender | 开始 render 前的事件 | () => void; |  |  | \n| afterRender | render 完成的事件 | () => void; |  |  | \n| mounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| destroy | 表格销毁事件 | () => void; |  |  | \n| layoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseUp | resize 热区鼠标松开事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseMove | resize 热区鼠标移动事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| keyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| keyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| copied | 复制事件 | (copyData: string) => void |  |  | \n| actionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| actionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| contextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| mouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| selected | 单元格选中事件 | ( cells: ([Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| reset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| linkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| scroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: ColCell[]) => void; |  |  | \n| rowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: RowCell[]) => void; |  |  | \n \n## SheetComponentOptions \n \nVue 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有一点不同 \n \n- 分页配置从 S2 的分页配置 变为了 `antd-vue` 的分页配置，即支持对 `antd-vue` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps } from 'ant-design-vue'; \n \ntype SheetComponentOptions = S2Options< \n  Element | string, \n  Pagination & PaginationProps \n>; \n``` \n \n# 公共对象 \n \n## TargetCellInfo \n \n功能描述：交互回调函数的返回信息。 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| target | 交互作用对象 | [S2CellType](/docs/api/basic-class/base-cell) |  |  | \n| event | 事件 | [Event](#) |  |  | \n| viewMeta | 当前节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n \n \n### SortParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`     | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）         | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`                              | -      |      | \n| type          | 组内排序用来显示 icon （透视表适用）          | `string`                              | -      |      | \n| sortFunc      | 自定义排序的 function                        | (params: [SortFuncParam](#sortfuncparam)) => `string[]` | -      |      | \n \n#### SortFuncParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`    | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）      | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`    | -      |      | \n| type          | 组内排序用来显示 icon（透视表适用）             | `string`                              | -      |      | \n| data          | 当前排序数据列表                            | `Array<string \\| Record<string, any>>` | -      |      | \n \n \n## CellScrollPosition \n \n功能描述：单元格滚动的位置信息。 \n \n| 参数        | 说明         | 类型   | 默认值 | 必选 | \n| ---------- | ----------- | ----- | ----- | ---- | \n| scrollX     | 水平方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n| scrollY     | 垂直方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n \n## HiddenColumnsInfo \n \n功能描述： 开启 [隐藏列头](/docs/manual/advanced/interaction/hide-columns) 后，隐藏列头的节点信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| hideColumnNodes | 当前隐藏的节点信息 | [Node](/docs/api/basic-class/node)[] |  |  | \n| displaySiblingNode | 展示的相邻节点信息 | { prev:[Node](/docs/api/basic-class/node);next: [Node](/docs/api/basic-class/node) } |  |  | \n \n## ResizeParams \n \n功能描述：表格 resize（单元格行高列宽拖动变化）和单元格样式信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| info | resize 配置信息 | [ResizeInfo](#resizeinfo) |  |  | \n| style | options 中样式相关配置 | [style](/docs/api/general/S2Options#style) |  |  | \n \n## ResizeInfo \n \n功能描述：表格 resize（ 单元格行高列宽拖动变化）配置信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| theme | resize 热区配置 | [ResizeArea](/docs/api/general/S2Theme#resizearea) |  |  | \n| type | resize 方向 | `Horizontal` \\| `Vertical` |  |  | \n| offsetX | 横向偏移量 | `number` |  |  | \n| offsetY | 纵向偏移量 | `number` |  |  | \n| width | 拖拽的宽度 | `number` |  |  | \n| height | 拖拽 | `number` |  |  | \n| size | 热区尺寸 | `number` |  |  | \n| effect | 拖拽更改影响的区域 | `Field` \\| `Cell` \\| `Tree` \\| `Series` |  |  | \n| isResizeArea | 是否属于 resize 热区 | `boolean` |  |  | \n| id | 字段 id | `string` |  |  | \n| meta | resize 热区对应单元格节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n| resizedWidth | 拖拽后的宽度 | `number` |  |  | \n| resizedHeight | 拖拽后的高度 | `number` |  |  | \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n \n"},childrenKey:"demos",order:0},{demos:[{id:"measure-comparison",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/Hp592db5za/60960a3d-f405-4474-a412-95721a21654d.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ColCell,\n  DataCell,\n  CornerCell,\n  Frame,\n  ID_SEPARATOR,\n  measureTextWidth,\n} from '@antv/s2';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nconst UP_COLOR = '#F46649';\nconst DOWN_COLOR = '#2AA491';\nconst TAG_HEIGHT = 20; // 指标高度\nconst TAG_WIDTH = 80; // 指标宽度\n\nclass CustomColCell extends ColCell {\n  lineConfig = {};\n\n  lineConfigStyle = {};\n\n  initCell() {\n    super.initCell();\n    this.drawLeftBorder();\n  }\n\n  handleRestOptions(...[headerConfig, lineConfig, lineConfigStyle]) {\n    this.headerConfig = headerConfig;\n    this.lineConfig = lineConfig || {};\n    this.lineConfigStyle = lineConfigStyle || {};\n  }\n\n  getCellArea() {\n    const { x, y, height, width, parent } = this.meta;\n    if (parent?.id === 'root') {\n      return {\n        x,\n        y: y + (height - TAG_HEIGHT),\n        height: TAG_HEIGHT,\n        width: TAG_WIDTH,\n      };\n    }\n    return { x, y, height, width };\n  }\n\n  // 绘制背景\n  drawBackgroundShape() {\n    const { parent } = this.meta;\n    if (parent?.id === 'root' && this.lineConfigStyle.stroke) {\n      this.backgroundShape = this.addShape('rect', {\n        attrs: {\n          ...this.getCellArea(),\n          fill: this.lineConfigStyle.stroke,\n        },\n      });\n    } else {\n      super.drawBackgroundShape();\n    }\n  }\n\n  // 交互显示\n  drawInteractiveBgShape() {\n    const { parent } = this.meta;\n    if (parent?.id === 'root') {\n      return;\n    }\n    super.drawInteractiveBgShape();\n  }\n\n  // 绘制文本\n  drawTextShape() {\n    const { value, parent } = this.meta;\n    if (parent?.id === 'root') {\n      const position = this.getTextPosition();\n      const textStyle = this.getTextStyle();\n      this.textShape = this.addShape('text', {\n        attrs: {\n          x: position.x,\n          y: position.y,\n          text: value,\n          fill: this.lineConfigStyle.stroke ? '#FFF' : textStyle.fill,\n          textAlign: 'center',\n          textBaseline: 'middle',\n        },\n      });\n    } else {\n      super.drawTextShape();\n    }\n  }\n\n  drawLeftBorder() {\n    const { x, y, children, parent, colIndex, value, height } = this.meta;\n    const groupCache = this?.spreadsheet?.store?.get('groupCache') || {};\n    const indexCache = this?.spreadsheet?.store?.get('indexCache') || {};\n    const {\n      horizontalBorderColor,\n      horizontalBorderWidth,\n      verticalBorderColorOpacity,\n    } = this.getStyle().cell;\n    if (parent?.id === 'root') {\n      this.addShape('line', {\n        attrs: {\n          x1: x,\n          y1: y + height - TAG_HEIGHT,\n          x2: x,\n          y2: y + height,\n          stroke: this.lineConfigStyle.stroke || horizontalBorderColor,\n          lineWidth: this.lineConfigStyle.lineWidth || horizontalBorderWidth,\n        },\n      });\n      groupCache[children?.[0]?.value] = 1;\n      this?.spreadsheet?.store?.set('groupCache', groupCache);\n    } else if (groupCache[value]) {\n      this.addShape('line', {\n        attrs: {\n          x1: x,\n          y1: y,\n          x2: x,\n          y2: y + height,\n          stroke: this.lineConfigStyle.stroke || horizontalBorderColor,\n          lineWidth: this.lineConfigStyle.lineWidth || horizontalBorderWidth,\n        },\n      });\n    }\n    if (parent?.parent?.id === 'root') {\n      if (this.lineConfig[value]) {\n        indexCache[colIndex + 1] = 1;\n        this.spreadsheet?.store?.set('indexCache', indexCache);\n      }\n      if (indexCache[colIndex]) {\n        this.addShape('line', {\n          attrs: {\n            x1: x,\n            y1: y,\n            x2: x,\n            y2: y + height,\n            stroke: this.lineConfigStyle.stroke || horizontalBorderColor,\n            lineWidth: this.lineConfigStyle.lineWidth || horizontalBorderWidth,\n            opacity: this.lineConfigStyle.opacity || verticalBorderColorOpacity,\n          },\n        });\n      }\n    }\n  }\n}\n\nclass CustomDataCell extends DataCell {\n  lineConfig = {};\n\n  lineConfigStyle = {};\n\n  customConditions = {};\n\n  textConfig = {};\n\n  initCell() {\n    super.initCell();\n    this.drawLeftBorder();\n    this.drawRightBorder();\n  }\n\n  handleRestOptions(options) {\n    const { lineConfig, lineConfigStyle, conditions, textConfig } = options;\n    this.lineConfig = lineConfig;\n    this.lineConfigStyle = lineConfigStyle;\n    this.customConditions = conditions;\n    this.textConfig = textConfig;\n  }\n\n  // 自定义icon显示\n  getIconStyle() {\n    const tagName = Object.keys(this.customConditions).find((item) =>\n      this.meta.colId?.includes(`root${ID_SEPARATOR}${item}${ID_SEPARATOR}`),\n    );\n    if (tagName) {\n      this.conditions = {\n        ...this.conditions,\n        ...(this.customConditions?.[tagName] || []),\n      };\n    }\n    return super.getIconStyle();\n  }\n\n  drawTextShape() {\n    const { fieldValue } = this.meta;\n    const tagName = Object.keys(this.textConfig).find((item) =>\n      this.meta.colId?.includes(`root${ID_SEPARATOR}${item}${ID_SEPARATOR}`),\n    );\n\n    if (tagName) {\n      const { getCustomFormattedValue, getCustomTextStyle } =\n        this.textConfig[tagName] || {};\n      const { formattedValue: defaultFormattedValue } =\n        this.getFormattedFieldValue();\n      let formattedValue = defaultFormattedValue;\n      if (getCustomFormattedValue) {\n        formattedValue = getCustomFormattedValue(fieldValue);\n      }\n      const textStyle = this.getTextStyle();\n      this.actualTextWidth = measureTextWidth(formattedValue, textStyle);\n      const position = this.getTextPosition();\n\n      this.textShape = this.addShape('text', {\n        attrs: {\n          x: position.x,\n          y: position.y,\n          text: formattedValue,\n          ...textStyle,\n          ...(getCustomTextStyle(fieldValue, textStyle) || {}),\n        },\n      });\n    } else {\n      super.drawTextShape();\n    }\n  }\n\n  drawLeftBorder() {\n    const { x, y, colIndex, valueField, height } = this.meta;\n    const indexCache = this.spreadsheet.store.get('dataIndexCache') || {};\n    const valueLength = this.spreadsheet.dataCfg.fields.values.length;\n    const currentConfig = this.lineConfig[valueField];\n    const {\n      horizontalBorderColor,\n      horizontalBorderWidth,\n      verticalBorderColorOpacity,\n    } = this.getStyle().cell;\n\n    if (colIndex % valueLength === 0) {\n      this.addShape('line', {\n        attrs: {\n          x1: x,\n          y1: y,\n          x2: x,\n          y2: y + height,\n          stroke: this.lineConfigStyle.stroke || horizontalBorderColor,\n          lineWidth: this.lineConfigStyle.lineWidth || horizontalBorderWidth,\n        },\n      });\n    }\n    if (indexCache[colIndex]) {\n      this.addShape('line', {\n        attrs: {\n          x1: x,\n          y1: y,\n          x2: x,\n          y2: y + height,\n          stroke: this.lineConfigStyle.stroke || horizontalBorderColor,\n          lineWidth: this.lineConfigStyle.lineWidth || horizontalBorderWidth,\n          opacity: this.lineConfigStyle.opacity || verticalBorderColorOpacity,\n        },\n      });\n    }\n    if (currentConfig) {\n      indexCache[colIndex + 1] = 1;\n      this.spreadsheet?.store?.set('dataIndexCache', indexCache);\n    }\n  }\n\n  drawRightBorder() {\n    const { x, y, width, valueField, colIndex, height, spreadsheet } =\n      this.meta;\n    const valueLength = spreadsheet.dataCfg.fields.values.length;\n    const currentConfig = this.lineConfig[valueField];\n    const {\n      horizontalBorderColor,\n      horizontalBorderWidth,\n      verticalBorderColorOpacity,\n    } = this.getStyle().cell;\n    if (currentConfig) {\n      this.addShape('line', {\n        attrs: {\n          x1: x + width,\n          y1: y,\n          x2: x + width,\n          y2: y + height,\n          stroke: this.lineConfigStyle.stroke || horizontalBorderColor,\n          lineWidth: this.lineConfigStyle.lineWidth || horizontalBorderWidth,\n          opacity: this.lineConfigStyle.opacity || verticalBorderColorOpacity,\n        },\n      });\n    }\n    const tagLength = [...(spreadsheet.dataSet.colPivotMeta || [])].length;\n    const shouldAddRightLine =\n      (colIndex + 1) % valueLength === 0 &&\n      colIndex + 1 !== tagLength * valueLength; // 除了表格最后一列,每个 tag 最后一个子列加 right line\n    if (shouldAddRightLine) {\n      this.addShape('line', {\n        attrs: {\n          x1: x + width,\n          y1: y,\n          x2: x + width,\n          y2: y + height,\n          stroke: this.lineConfigStyle.stroke || horizontalBorderColor,\n          lineWidth: this.lineConfigStyle.lineWidth || horizontalBorderWidth,\n        },\n      });\n    }\n  }\n}\n\nclass CustomFrame extends Frame {\n  layout() {\n    super.layout();\n    // corner右边的竖线条\n    this.addCornerRightBorder();\n  }\n\n  addCornerRightBorder() {\n    const {\n      width,\n      height,\n      viewportHeight,\n      position,\n      spreadsheet,\n      lineConfigStyle,\n    } = this.cfg;\n    const {\n      verticalBorderColor,\n      verticalBorderWidth,\n      verticalBorderColorOpacity,\n    } = spreadsheet.theme?.splitLine || {};\n    const x = position.x + width;\n    const y1 = position.y;\n    const y2 = position.y + height + viewportHeight;\n    if (spreadsheet.store.get('scrollX') > 0) {\n      // 滚动时使用默认的颜色\n      this.addShape('line', {\n        attrs: {\n          x1: x,\n          y1: y1 + height / 2 - TAG_HEIGHT,\n          x2: x,\n          y2,\n          stroke: verticalBorderColor,\n          lineWidth: verticalBorderWidth,\n          opacity: verticalBorderColorOpacity,\n        },\n      });\n    } else {\n      this.addShape('line', {\n        attrs: {\n          x1: x,\n          y1: y1 + height / 2 - TAG_HEIGHT,\n          x2: x,\n          y2,\n          stroke: lineConfigStyle?.stroke || verticalBorderColor,\n          lineWidth: lineConfigStyle?.lineWidth || verticalBorderWidth,\n        },\n      });\n    }\n  }\n\n  addSplitLineRightShadow() {\n    const {\n      width,\n      height,\n      viewportHeight,\n      position,\n      isPivotMode,\n      spreadsheet,\n      showViewPortRightShadow,\n    } = this.cfg;\n    if (!isPivotMode || spreadsheet.store.get('scrollX') === 0) {\n      return;\n    }\n    // 滚动时使用默认的颜色\n    const { showRightShadow, shadowWidth, shadowColors } =\n      spreadsheet.theme?.splitLine || {};\n    if (\n      showRightShadow &&\n      showViewPortRightShadow &&\n      spreadsheet.isFrozenRowHeader()\n    ) {\n      const x = position.x + width;\n      const y = position.y;\n      this.addShape('rect', {\n        attrs: {\n          x,\n          y: y + height / 2,\n          width: shadowWidth,\n          height: viewportHeight + height - height / 2,\n          fill: `l (0) 0:${shadowColors?.left} 1:${shadowColors?.right}`,\n        },\n      });\n    }\n  }\n}\n\nclass CustomCornelCell extends CornerCell {\n  drawTextShape() {\n    if (this.meta.cornerType === 'col') {\n      return;\n    }\n    super.drawTextShape();\n  }\n\n  drawBackgroundShape() {\n    const { backgroundColorOpacity, backgroundColor } = this.getStyle().cell;\n    const attrs = {\n      ...this.getCellArea(),\n      fill: this.meta.cornerType === 'col' ? '#FFF' : backgroundColor,\n      opacity: backgroundColorOpacity,\n    };\n    this.backgroundShape = this.addShape('rect', {\n      attrs,\n    });\n  }\n  drawBorderShape() {}\n}\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/index-comparison.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const s2DataConfig = {\n      fields: {\n        rows: ['type'],\n        columns: ['tag'],\n        values: ['price', 'uv', 'pv', 'click_uv'],\n      },\n      meta: [\n        {\n          field: 'type',\n          name: '服装服饰',\n        },\n        {\n          field: 'price',\n          name: '销售量',\n        },\n        {\n          field: 'uv',\n          name: '搜索uv',\n        },\n        {\n          field: 'pv',\n          name: '搜索pv',\n        },\n        {\n          field: 'click_uv',\n          name: '点击uv',\n        },\n      ],\n      data,\n    };\n    const getIcon = (fieldValue) => {\n      return parseFloat(fieldValue) > 0\n        ? 'CellUp'\n        : fieldValue < 0\n        ? 'CellDown'\n        : '';\n    };\n    const conditionsIcon = [\n      {\n        field: 'price',\n        mapping(fieldValue) {\n          return {\n            icon: getIcon(fieldValue),\n          };\n        },\n      },\n      {\n        field: 'uv',\n        mapping(fieldValue) {\n          return {\n            icon: getIcon(fieldValue),\n          };\n        },\n      },\n      {\n        field: 'click_uv',\n        mapping(fieldValue) {\n          return {\n            icon: getIcon(fieldValue),\n          };\n        },\n      },\n    ];\n    // 自定义文字样式\n    const getCustomTextStyle = (value, textStyle) => {\n      return {\n        fill:\n          parseFloat(value) > 0\n            ? UP_COLOR\n            : parseFloat(value) < 0\n            ? DOWN_COLOR\n            : textStyle?.fill,\n      };\n    };\n    // 列分组竖线样式配置\n    const lineConfigStyle = {\n      stroke: '#3471F9',\n      lineWidth: 1,\n      opacity: 0.5,\n    };\n    // 列分组配置\n    const lineConfig = {\n      price: 1,\n      pv: 1,\n    };\n    const s2Options = {\n      width: 600,\n      height: 480,\n      showDefaultHeaderActionIcon: false,\n      tooltip: {\n        showTooltip: false,\n      },\n      colCell: (node, spreadsheet, ...restOptions) => {\n        return new CustomColCell(\n          node,\n          spreadsheet,\n          ...restOptions,\n          lineConfig,\n          lineConfigStyle,\n        );\n      },\n      dataCell: (viewMeta) => {\n        return new CustomDataCell(viewMeta, viewMeta.spreadsheet, {\n          lineConfig,\n          lineConfigStyle,\n          conditions: {\n            周环比差值: {\n              icon: conditionsIcon,\n            },\n            周环比率: {\n              icon: conditionsIcon,\n            },\n          },\n          textConfig: {\n            周环比差值: {\n              // 自定义文字样式\n              getCustomTextStyle,\n            },\n            周环比率: {\n              // 自定义文字formatted\n              getCustomFormattedValue: (value) => {\n                return `${parseFloat(value)?.toFixed(4) * 100}%`;\n              },\n              // 自定义文字样式\n              getCustomTextStyle,\n            },\n          },\n        });\n      },\n      cornerCell: (node, s2, headConfig) => {\n        return new CustomCornelCell(node, s2, headConfig);\n      },\n      frame: (cfg) => {\n        return new CustomFrame({ ...cfg, lineConfigStyle });\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={s2DataConfig}\n        options={s2Options}\n        sheetType=\"pivot\"\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"指标对比表",en:"Measure Comparison Sheet"},filename:"measure-comparison.tsx",isNew:!1},{id:"multiple-people-comparison",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/GVz3yaFf5O/b57857b9-a307-474a-a418-c97f627311a1.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport insertCss from 'insert-css';\nimport { ColCell } from '@antv/s2';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nconst PALETTE_COLORS = [\n  {\n    limit: -50,\n    background: 'rgb(62,144,109)',\n    color: 'black',\n  },\n  {\n    limit: -35,\n    background: 'rgb(74,181,120)',\n    color: 'black',\n  },\n  {\n    limit: -20,\n    background: 'rgb(112,196,121)',\n    color: 'black',\n  },\n  {\n    limit: -5,\n    background: 'rgb(150,212,164)',\n    color: 'black',\n  },\n  {\n    limit: 10,\n    background: 'rgb(190,226,188)',\n    color: 'black',\n  },\n  {\n    limit: 25,\n    background: 'rgb(238,229,229)',\n    color: 'black',\n  },\n  {\n    limit: 40,\n    background: 'rgb(243,187,161)',\n    color: 'white',\n  },\n  {\n    limit: 55,\n    background: 'rgb(238,154,119)',\n    color: 'white',\n  },\n  {\n    limit: 70,\n    background: 'rgb(235,123,85)',\n    color: 'white',\n  },\n  {\n    limit: 85,\n    background: 'rgb(230,91,55)',\n    color: 'white',\n  },\n  {\n    limit: 100,\n    background: 'rgb(214,61,33)',\n    color: 'white',\n  },\n];\n\nconst GROUP_COLOR = {\n  'people-group-a': 'rgb(99,133,241)',\n  'people-group-b': 'rgb(116,213,157)',\n};\n\nconst GROUP_SEPARATOR_WIDTH = 4;\n\nconst getFormatter =\n  (enablePrefix = false) =>\n  (value) => {\n    const prefix = enablePrefix && value > 0 ? '+' : '';\n    const suffix = value !== 0 ? '%' : '';\n    return `${prefix}${value}${suffix}`;\n  };\n\nconst getTargetColor = (value) =>\n  PALETTE_COLORS.find((color) => color.limit >= value) ??\n  PALETTE_COLORS[PALETTE_COLORS.length - 1];\n\nclass CustomColCell extends ColCell {\n  initCell() {\n    super.initCell();\n    this.renderGroupSeparator();\n  }\n\n  renderGroupSeparator() {\n    const { label, isLeaf } = this.meta;\n    // 只需要为 A B 群组绘制标识\n    if (!isLeaf || label === 'people-group-delta') {\n      return;\n    }\n\n    const fill = GROUP_COLOR[label];\n    const { x, y, height } = this.textShape.getBBox();\n    this.addShape('rect', {\n      attrs: {\n        x: x - GROUP_SEPARATOR_WIDTH * 1.5,\n        y,\n        height,\n        width: GROUP_SEPARATOR_WIDTH,\n        fill,\n      },\n    });\n  }\n}\n\nconst PaletteLegend = () => {\n  return (\n    <div className=\"palette-legend\">\n      <div className=\"palette-limit\">-56%</div>\n      {PALETTE_COLORS.map((color) => (\n        <span\n          key={color.background}\n          className=\"palette-color\"\n          style={{ background: color.background }}\n        />\n      ))}\n      <div className=\"palette-limit\">96.32%</div>\n    </div>\n  );\n};\n\nfetch('https://assets.antv.antgroup.com/s2/multiple-people-comparison.json')\n  .then((res) => res.json())\n  .then(({ data }) => {\n    const s2DataConfig = {\n      fields: {\n        rows: ['type', 'job'],\n        columns: ['age', 'city'],\n        values: ['people-group-a', 'people-group-b', 'people-group-delta'],\n        valueInCols: true,\n      },\n      meta: [\n        {\n          field: 'type',\n          name: '类别',\n        },\n        {\n          field: 'job',\n          name: '职业',\n        },\n        {\n          field: 'age',\n          name: '年龄分布',\n        },\n        {\n          field: 'city',\n          name: '所在城市',\n        },\n        {\n          field: 'people-group-a',\n          name: 'A人群',\n          formatter: getFormatter(),\n        },\n        {\n          field: 'people-group-b',\n          name: 'B人群',\n          formatter: getFormatter(),\n        },\n        {\n          field: 'people-group-delta',\n          name: '差值',\n          formatter: getFormatter(true),\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      tooltip: {\n        operation: {\n          trend: true,\n          hiddenColumns: true,\n        },\n      },\n      interaction: {\n        selectedCellsSpotlight: true,\n        hoverHighlight: false,\n      },\n      style: {\n        layoutWidthType: 'colAdaptive',\n        cellCfg: {\n          width: 100,\n        },\n      },\n      conditions: {\n        text: [\n          {\n            field: 'people-group-delta',\n            mapping(value) {\n              const { color } = getTargetColor(value);\n              return {\n                fill: color,\n              };\n            },\n          },\n        ],\n        background: [\n          {\n            field: 'people-group-delta',\n            mapping(value) {\n              const { background } = getTargetColor(value);\n              return {\n                fill: background,\n              };\n            },\n          },\n        ],\n      },\n      colCell(viewMeta, spreadsheet, headerConfig) {\n        return new CustomColCell(viewMeta, spreadsheet, headerConfig);\n      },\n    };\n\n    const theme = {\n      dataCell: {\n        // 父节点\n        bolderText: {\n          fill: 'rgb(84,84,84)',\n        },\n        // 子节点\n        text: {\n          fill: 'rgb(84,84,84)',\n        },\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={s2DataConfig}\n        options={s2Options}\n        sheetType=\"pivot\"\n        themeCfg={{ theme }}\n        header={{\n          title: '多人群对比表',\n          extra: [<PaletteLegend />],\n        }}\n      />,\n      document.getElementById('container'),\n    );\n  });\n\ninsertCss(`\n\n  .ant-page-header {\n    margin: 0 !important;\n    padding: 0 !important;\n  }\n\n  .palette-legend {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    margin-top: 8px;\n  }\n\n  .palette-color {\n    width: 12px;\n    height: 12px;\n  }\n\n  .palette-limit{\n    font-size: 12px;\n    color: rgb(94,94,94);\n  }\n\n  .palette-color + .palette-limit {\n    margin-left: 5px;\n  }\n\n  .palette-limit + .palette-color {\n    margin-left: 5px;\n  }\n`);\n",title:{zh:"多人群对比表",en:"Multiple People Comparison Sheet"},filename:"multiple-people-comparison.tsx",isNew:!1},{id:"time-spend",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/dTESDSdF%262/a364a2c2-c4e1-4b01-a616-927bf41d7a86.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport insertCss from 'insert-css';\nimport { SheetComponent } from '@antv/s2-react';\nimport { DataCell, Frame } from '@antv/s2';\nimport '@antv/s2-react/dist/style.min.css';\n\nconst paletteLegendMap = [\n  {\n    text: '睡觉',\n    color: '#6974EF',\n  },\n  {\n    text: '工作',\n    color: '#18E7CF',\n  },\n\n  {\n    text: '上学',\n    color: '#89E48A',\n  },\n  {\n    text: '吃饭',\n    color: '#FAE232',\n  },\n  {\n    text: '学习',\n    color: '#FAA140',\n  },\n  {\n    text: '娱乐',\n    color: '#E491BA',\n  },\n  {\n    text: '运动',\n    color: '#61AEFE',\n  },\n  {\n    text: '其他',\n    color: '#FAD5BB',\n  },\n];\n\n// 自定义单元格\nclass CustomDataCell extends DataCell {\n  initCell() {\n    this.drawInteractiveBgShape();\n    this.drawCircle();\n    this.drawBorderShape();\n    if (JSON.stringify(this.meta.colQuery).includes('合计')) {\n      this.drawTextShape();\n    }\n    this.update();\n  }\n  drawCircle() {\n    const radius = 12;\n    const { x, y, height, width, fieldValue, colQuery } = this.meta;\n    const positionX = x + width / 2;\n    const positionY = y + height / 2;\n\n    let fill;\n    let opacity = 1;\n    if (!isNaN(fieldValue)) {\n      fill =\n        paletteLegendMap.find((v) => v.text === colQuery['时刻'])?.color ??\n        '#FAD5BB';\n      opacity = 0.5;\n    } else {\n      fill =\n        paletteLegendMap.find((v) => v.text === fieldValue)?.color ?? '#FAD5BB';\n    }\n    this.backgroundShape = this.addShape('circle', {\n      attrs: {\n        x: positionX,\n        y: positionY,\n        width,\n        height,\n        fill,\n        opacity,\n        r: radius,\n      },\n    });\n  }\n}\n\n// 自定义分割线\nclass CustomFrame extends Frame {\n  layout() {\n    super.layout();\n    // 水平二级分割线\n    this.addHorizontalSplitLine();\n    // 垂直二级分割线\n    this.addVerticalSplitLine();\n  }\n  addHorizontalSplitLine() {\n    const cfg = this.cfg;\n    const {\n      width,\n      height,\n      viewportWidth,\n      position,\n      scrollX,\n      scrollContainsRowHeader,\n      spreadsheet,\n    } = cfg;\n    const splitLine = spreadsheet.theme?.splitLine;\n    const { rowsHierarchy } = spreadsheet.facet.layoutResult;\n    const rootNodes = rowsHierarchy.getNodesLessThanLevel(0);\n    rootNodes.forEach((node, key) => {\n      if (key < rootNodes.length - 1) {\n        const { children } = node;\n        const lastChild = children[children.length - 1];\n        const x1 = position.x;\n        const x2 =\n          x1 + width + viewportWidth + (scrollContainsRowHeader ? scrollX : 0);\n        const y = position.y + height + lastChild.y + lastChild.height;\n        this.addShape('line', {\n          attrs: {\n            x1,\n            y1: y,\n            x2,\n            y2: y,\n            stroke: splitLine.verticalBorderColor,\n            lineWidth: 1,\n            opacity: splitLine.verticalBorderColorOpacity,\n          },\n        });\n      }\n    });\n  }\n\n  addVerticalSplitLine() {\n    const cfg = this.cfg;\n    const { height, viewportHeight, position, width, spreadsheet } = cfg;\n    const splitLine = spreadsheet.theme?.splitLine;\n    const { colsHierarchy } = spreadsheet.facet.layoutResult;\n    const rootNodes = colsHierarchy.getNodesLessThanLevel(0);\n    rootNodes.forEach((node, key) => {\n      if (key < rootNodes.length - 1) {\n        const { children } = node;\n        const lastChild = children[children.length - 1];\n        const x = lastChild.x + lastChild.width + width;\n        const y1 = position.y;\n        const y2 = position.y + height + viewportHeight;\n        this.addShape('line', {\n          attrs: {\n            x1: x,\n            y1,\n            x2: x,\n            y2,\n            stroke: splitLine.verticalBorderColor,\n            lineWidth: 1,\n            opacity: splitLine.verticalBorderColorOpacity,\n          },\n        });\n      }\n    });\n  }\n}\n\nfetch('https://assets.antv.antgroup.com/s2/time-spend.json')\n  .then((res) => res.json())\n  .then((s2DataConfig) => {\n    const s2Palette = {\n      basicColors: [\n        '#FFFFFF',\n        '#020138',\n        'rgba(255,255,255,0.18)',\n        '#020138',\n        'rgba(255,255,255,0.18)',\n        '#7232CF',\n        '#7232CF',\n        '#AB76F7',\n        '#020138',\n        'rgba(255,255,255,0)',\n        'rgba(255,255,255,0)',\n        '#FFFFFF',\n        '#FFFFFF',\n        '#FFFFFF',\n        '#FFFFFF',\n      ],\n      // ---------- semantic colors ----------\n      semanticColors: {\n        red: '#FF4D4F',\n        green: '#29A294',\n      },\n    };\n    const s2Theme = {\n      colCell: {\n        bolderText: {\n          fontSize: 12,\n          textAlign: 'center',\n          fontWeight: 'normal',\n        },\n\n        cell: {\n          horizontalBorderColorOpacity: 0.3,\n          verticalBorderColorOpacity: 0.3,\n        },\n      },\n      rowCell: {\n        text: {\n          textAlign: 'right',\n        },\n        cell: {\n          horizontalBorderColorOpacity: 0.3,\n          verticalBorderColorOpacity: 0.3,\n        },\n      },\n      dataCell: {\n        text: {\n          textAlign: 'center',\n        },\n        cell: {\n          horizontalBorderColorOpacity: 0.3,\n          verticalBorderColorOpacity: 0.3,\n        },\n      },\n      cornerCell: {\n        bolderText: {\n          textAlign: 'right',\n        },\n        cell: {\n          horizontalBorderColorOpacity: 0.3,\n          verticalBorderColorOpacity: 0.3,\n        },\n      },\n      splitLine: {\n        horizontalBorderColorOpacity: 0.3,\n        horizontalBorderWidth: 2,\n\n        shadowColors: {\n          left: 'rgba(255,255,255, 0.3)',\n          right: 'rgba(255,255,255, 0.01)',\n        },\n      },\n    };\n\n    const s2Options = {\n      width: 1150,\n      height: 420,\n      showDefaultHeaderActionIcon: false,\n      dataCell: (viewMeta) => {\n        return new CustomDataCell(viewMeta, viewMeta?.spreadsheet);\n      },\n      frame: (cfg) => {\n        return new CustomFrame(cfg);\n      },\n      style: {\n        layoutWidthType: 'compact',\n        colCfg: {\n          hideMeasureColumn: true,\n        },\n        cellCfg: {\n          width: 40,\n          height: 40,\n        },\n      },\n    };\n    const PaletteLegend = () => (\n      <div className=\"palette\">\n        {paletteLegendMap.map((value, key) => (\n          <div key={key} className=\"palette-group\">\n            <span\n              className=\"palette-color\"\n              style={{ background: value.color }}\n            />\n            <span className=\"palette-text\">{value.text}</span>\n          </div>\n        ))}\n      </div>\n    );\n    ReactDOM.render(\n      <div className=\"sheet-wrapper\">\n        <PaletteLegend />\n        <SheetComponent\n          dataCfg={s2DataConfig}\n          options={s2Options}\n          sheetType=\"pivot\"\n          themeCfg={{ theme: s2Theme, palette: s2Palette }}\n        />\n      </div>,\n      document.getElementById('container'),\n    );\n  });\n\ninsertCss(`\n  .sheet-wrapper {\n    background: #010138;\n    padding: 16px;\n  }\n  .palette {\n    display: flex;\n    width: 100%;\n    overflow: hidden;\n    margin-bottom: 16px;\n  }\n  .palette-group {\n    display: flex;\n  }\n  .palette-color {\n    width: 16px;\n    height: 16px;\n    border-radius: 50%;\n    \n  }\n  .palette-text {\n    color: #FFF;\n    width: 50px;\n    font-size: 12px;\n    padding-left: 8px;\n  }\n`);\n",title:{zh:"想如何度过一天",en:"How to spend the day"},filename:"time-spend.tsx",isNew:!1},{id:"philosophers",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/lnIo05mgw%26/1e369f72-be9b-4be8-804d-33445bf72d41.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { max, min, replace } from 'lodash';\nimport insertCss from 'insert-css';\n\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nconst PALETTE_COLORS = [\n  '#B8E1FF',\n  '#9AC5FF',\n  '#7DAAFF',\n  '#5B8FF9',\n  '#3D76DD',\n  '#085EC0',\n  '#0047A5',\n  '#00318A',\n  '#001D70',\n];\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/24cac0f7-70f0-4131-be61-df11da3ca921.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const weights = data.map((item) => item.weight);\n    const maxWeight = max(weights);\n    const minWeight = min(weights);\n    const weightSpan = maxWeight - minWeight;\n\n    const PaletteLegend = () => (\n      <div className=\"legend\">\n        <div className=\"legend-limit\">{minWeight.toFixed(2)}</div>\n        {PALETTE_COLORS.map((color, index) => (\n          <span\n            key={index}\n            className=\"legend-color\"\n            style={{ background: color }}\n          />\n        ))}\n        <div className=\"legend-limit\">{maxWeight.toFixed(2)}</div>\n      </div>\n    );\n\n    const getFormatter = (val) => {\n      if (val < 0) {\n        return `公元前${replace(val, '-', '')}年`;\n      } else {\n        return `${val}年`;\n      }\n    };\n\n    const s2DataConfig = {\n      fields: {\n        rows: ['country', 'name', 'start', 'end', 'points', 'word'],\n        columns: [],\n        values: ['weight'],\n      },\n      meta: [\n        {\n          field: 'word',\n          name: '关键词',\n        },\n        {\n          field: 'points',\n          name: '观点',\n        },\n        {\n          field: 'name',\n          name: '姓名',\n        },\n        {\n          field: 'country',\n          name: '国家',\n        },\n        {\n          field: 'start',\n          name: '出生',\n          formatter: getFormatter,\n        },\n        {\n          field: 'end',\n          name: '逝世',\n          formatter: getFormatter,\n        },\n        {\n          field: 'weight',\n          name: '权重',\n          formatter: (val) => val.toFixed(2),\n        },\n      ],\n      data,\n    };\n    const TooltipContent = (props) => {\n      const { rowQuery, fieldValue } = props;\n      const { name, country, start, end, points } = rowQuery;\n      const ponitsLines = points.split('&');\n      return (\n        <div className=\"antv-s2-tooltip-container\">\n          <div className=\"antv-s2-tooltip-head-info-list\">\n            <div>姓名：{name}</div>\n            <div>国家：{country}</div>\n            <div>出生：{getFormatter(start)}</div>\n            <div>逝世：{getFormatter(end)}</div>\n            {ponitsLines.length > 1 ? (\n              <div>\n                观点:\n                {ponitsLines.map((point, index) => (\n                  <div>\n                    {index + 1}: {point}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div>观点: {ponitsLines[0]}</div>\n            )}\n          </div>\n          <div className=\"antv-s2-tooltip-divider\"></div>\n          <div className=\"antv-s2-tooltip-detail-list\">\n            <div className=\"antv-s2-tooltip-detail-item\">\n              <span className=\"antv-s2-tooltip-detail-item-key\">权重</span>\n              <span className=\"antv-s2-tooltip-detail-item-val\">\n                {fieldValue}\n              </span>\n            </div>\n          </div>\n        </div>\n      );\n    };\n    const s2Options = {\n      width: '',\n      height: 400,\n      conditions: {\n        text: [\n          {\n            field: 'weight',\n            mapping(value) {\n              if (value >= 20) {\n                return {\n                  fill: '#fff',\n                };\n              }\n            },\n          },\n        ],\n        background: [\n          {\n            field: 'weight',\n            mapping(value) {\n              let backgroundColor;\n              const colorIndex =\n                Math.floor(\n                  (((value - minWeight) / weightSpan) * 100) /\n                    PALETTE_COLORS.length,\n                ) - 1;\n              if (colorIndex <= 0) {\n                backgroundColor = PALETTE_COLORS[0];\n              } else if (colorIndex >= PALETTE_COLORS.length) {\n                backgroundColor = PALETTE_COLORS[PALETTE_COLORS.length - 1];\n              } else {\n                backgroundColor = PALETTE_COLORS[colorIndex];\n              }\n\n              return {\n                fill: backgroundColor,\n              };\n            },\n          },\n        ],\n      },\n      interaction: {\n        selectedCellsSpotlight: false,\n        hoverHighlight: false,\n      },\n    };\n\n    const onDataCellMouseUp = (value) => {\n      const viewMeta = value?.viewMeta;\n      if (!viewMeta) {\n        return;\n      }\n\n      const position = {\n        x: value.event.clientX,\n        y: value.event.clientY,\n      };\n      viewMeta.spreadsheet.tooltip.show({\n        position,\n        content: TooltipContent(viewMeta),\n      });\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={s2DataConfig}\n        options={s2Options}\n        adaptive={true}\n        header={{\n          title: '哲学家的观点',\n          extra: [<PaletteLegend />],\n        }}\n        onDataCellMouseUp={onDataCellMouseUp}\n      />,\n\n      document.getElementById('container'),\n    );\n  });\n\ninsertCss(`\n  .ant-page-header-compact {\n    width: 100% ;\n  }\n  .legend {\n    display: flex;\n    justify-content: flex-end;\n    align-items: center;\n    margin-bottom: 8px;\n  }\n  .legend-color {\n    width: 12px;\n    height: 12px;\n  }\n\n  .legend-limit{\n    font-size: 12px;\n    color: rgb(94,94,94);\n  }\n\n  .legend-color + .legend-limit {\n    margin-left: 5px;\n  }\n\n  .legend-limit + .legend-color {\n    margin-left: 5px;\n  }\n  .s2-header {\n    margin:0px !important;\n  }\n`);\n",title:{zh:"哲学家的观点",en:"Points of Philosophers"},filename:"philosophers.tsx",isNew:!1}],icon:"",id:"comparison",title:{en:"Comparison Sheet",zh:"对比表"},api:{zh:" \n \n# React 表组件 \n \n基于 `@antv/s2` 封装的 `React` 版开箱即用的组件 `<SheetComponent />` \n \n## SpreadsheetProps \n \n功能描述： React SheetComponent 组件的 props 参数 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 <br> 3. `gridAnalysis`: 网格分析表 <br/> 4. `strategy`: 趋势分析表 | `pivot \\| table \\| gridAnalysis \\| strategy` \\| `pivot` |  | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| dataCfg | 透视表数据映射相关配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions) |  | ✓ | \n| partDrillDown | 维度下钻相关属性 | [PartDrillDown](/docs/api/components/drill-down) |  |  | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (current:number, pageSize: number) => void,<br>onChange?: (current:number, pageSize: number) => void <br>} | `false` |  | \n| themeCfg | 自定义透视表主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n| header | 表头配置项 | [HeaderCfgProps](/docs/api/components/header) |  |  | \n| getSpreadSheet | 获取表实例 (1.29.0 已废弃，请使用 `onMounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onRangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| onRowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellTrendIconClick | 数值单元格的趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onDataCellBrushSelection | 数值单元格刷选事件 | ( dataCells: [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onDataCellSelectMove | 数值单元格键盘方向键移动事件 | (metas: CellMeta[]) => void |  |  | \n| onDataCellEditEnd | 数值单元格编辑完成（暂只支持编辑表） | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onCornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| onRangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| onRangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| onLayoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| onLayoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| onLayoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onLayoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| onCollapseRowsAll | 树状模式下收起全部的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| onBeforeRender | 开始 render 前的事件 | () => void; |  |  | \n| onAfterRender | render 完成的事件 | () => void; |  |  | \n| onMounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onDestroy | 表格销毁事件 | () => void; |  |  | \n| onLayoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseUp | resize 热区鼠标松开事件 | ( event: `MouseEvent`,  resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseMove | resize 热区鼠标移动事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onKeyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| onKeyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| onCopied | 复制事件 | (copyData: string) => void |  |  | \n| onActionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| onActionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| onContextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| onMouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| onSelected | 单元格选中事件 | (cells: ( [Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onReset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| onLinkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| onScroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: [ColCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n| onRowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: [RowCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n \n## SheetComponentOptions \n \nReact 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有两点不同 \n \n- tooltip 的 content 从 `Element | string` 变为了 `ReactNode`, 即可以是任意的 `jsx` 元素 \n- 分页配置从 S2 的分页配置 变为了 `antd` 的分页配置，即支持对 `antd` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps as AntdPaginationProps } from 'antd'; \n \ntype SheetComponentOptions = S2Options< \n  React.ReactNode, \n  Pagination & AntdPaginationProps \n>; \n``` \n \n<br/> \n \n# Vue 表组件 \n \n基于 `@antv/s2` 层封装的 `Vue 3.0` 版开箱即用的组件 `<SheetComponent />` \n \n## props \n \n功能描述： Vue SheetComponent 组件的 props，如 `<SheetComponent :sheetType=\"pivot\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 | `pivot | table` | `pivot` |  | \n| dataCfg | 透视表数据映射配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions-1) |  | ✓ | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (pageSize: number) => void,<br>onChange?: (current: number) => void <br>} | `false` |  | \n| themeCfg | 自定义表格主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n \n## events \n \n功能描述： Vue SheetComponent 组件的 events，`<SheetComponent @rowCellClick=\"handleRowCellClick\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions-1)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| getSpreadSheet | 获取表实例 (1.4.0 已废弃，请使用 `mounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| rangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| rowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellTrendIconClick | 数值趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| dataCellBrushSelection | 数值单元格刷选事件 | (brushRangeDataCells: ( [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| dataCellScroll | 数值单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| cornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| rangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| rangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| layoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| layoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| layoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| layoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| collapseRowsAll | 树状模式下收起全部的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| beforeRender | 开始 render 前的事件 | () => void; |  |  | \n| afterRender | render 完成的事件 | () => void; |  |  | \n| mounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| destroy | 表格销毁事件 | () => void; |  |  | \n| layoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseUp | resize 热区鼠标松开事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseMove | resize 热区鼠标移动事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| keyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| keyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| copied | 复制事件 | (copyData: string) => void |  |  | \n| actionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| actionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| contextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| mouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| selected | 单元格选中事件 | ( cells: ([Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| reset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| linkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| scroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: ColCell[]) => void; |  |  | \n| rowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: RowCell[]) => void; |  |  | \n \n## SheetComponentOptions \n \nVue 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有一点不同 \n \n- 分页配置从 S2 的分页配置 变为了 `antd-vue` 的分页配置，即支持对 `antd-vue` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps } from 'ant-design-vue'; \n \ntype SheetComponentOptions = S2Options< \n  Element | string, \n  Pagination & PaginationProps \n>; \n``` \n \n# 公共对象 \n \n## TargetCellInfo \n \n功能描述：交互回调函数的返回信息。 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| target | 交互作用对象 | [S2CellType](/docs/api/basic-class/base-cell) |  |  | \n| event | 事件 | [Event](#) |  |  | \n| viewMeta | 当前节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n \n \n### SortParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`     | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）         | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`                              | -      |      | \n| type          | 组内排序用来显示 icon （透视表适用）          | `string`                              | -      |      | \n| sortFunc      | 自定义排序的 function                        | (params: [SortFuncParam](#sortfuncparam)) => `string[]` | -      |      | \n \n#### SortFuncParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`    | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）      | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`    | -      |      | \n| type          | 组内排序用来显示 icon（透视表适用）             | `string`                              | -      |      | \n| data          | 当前排序数据列表                            | `Array<string \\| Record<string, any>>` | -      |      | \n \n \n## CellScrollPosition \n \n功能描述：单元格滚动的位置信息。 \n \n| 参数        | 说明         | 类型   | 默认值 | 必选 | \n| ---------- | ----------- | ----- | ----- | ---- | \n| scrollX     | 水平方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n| scrollY     | 垂直方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n \n## HiddenColumnsInfo \n \n功能描述： 开启 [隐藏列头](/docs/manual/advanced/interaction/hide-columns) 后，隐藏列头的节点信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| hideColumnNodes | 当前隐藏的节点信息 | [Node](/docs/api/basic-class/node)[] |  |  | \n| displaySiblingNode | 展示的相邻节点信息 | { prev:[Node](/docs/api/basic-class/node);next: [Node](/docs/api/basic-class/node) } |  |  | \n \n## ResizeParams \n \n功能描述：表格 resize（单元格行高列宽拖动变化）和单元格样式信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| info | resize 配置信息 | [ResizeInfo](#resizeinfo) |  |  | \n| style | options 中样式相关配置 | [style](/docs/api/general/S2Options#style) |  |  | \n \n## ResizeInfo \n \n功能描述：表格 resize（ 单元格行高列宽拖动变化）配置信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| theme | resize 热区配置 | [ResizeArea](/docs/api/general/S2Theme#resizearea) |  |  | \n| type | resize 方向 | `Horizontal` \\| `Vertical` |  |  | \n| offsetX | 横向偏移量 | `number` |  |  | \n| offsetY | 纵向偏移量 | `number` |  |  | \n| width | 拖拽的宽度 | `number` |  |  | \n| height | 拖拽 | `number` |  |  | \n| size | 热区尺寸 | `number` |  |  | \n| effect | 拖拽更改影响的区域 | `Field` \\| `Cell` \\| `Tree` \\| `Series` |  |  | \n| isResizeArea | 是否属于 resize 热区 | `boolean` |  |  | \n| id | 字段 id | `string` |  |  | \n| meta | resize 热区对应单元格节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n| resizedWidth | 拖拽后的宽度 | `number` |  |  | \n| resizedHeight | 拖拽后的高度 | `number` |  |  | \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n \n",en:" \n \n# React 表组件 \n \n基于 `@antv/s2` 封装的 `React` 版开箱即用的组件 `<SheetComponent />` \n \n## SpreadsheetProps \n \n功能描述： React SheetComponent 组件的 props 参数 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 <br> 3. `gridAnalysis`: 网格分析表 <br/> 4. `strategy`: 趋势分析表 | `pivot \\| table \\| gridAnalysis \\| strategy` \\| `pivot` |  | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| dataCfg | 透视表数据映射相关配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions) |  | ✓ | \n| partDrillDown | 维度下钻相关属性 | [PartDrillDown](/docs/api/components/drill-down) |  |  | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (current:number, pageSize: number) => void,<br>onChange?: (current:number, pageSize: number) => void <br>} | `false` |  | \n| themeCfg | 自定义透视表主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n| header | 表头配置项 | [HeaderCfgProps](/docs/api/components/header) |  |  | \n| getSpreadSheet | 获取表实例 (1.29.0 已废弃，请使用 `onMounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onRangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| onRowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellTrendIconClick | 数值单元格的趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onDataCellBrushSelection | 数值单元格刷选事件 | ( dataCells: [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onDataCellSelectMove | 数值单元格键盘方向键移动事件 | (metas: CellMeta[]) => void |  |  | \n| onDataCellEditEnd | 数值单元格编辑完成（暂只支持编辑表） | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onCornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| onRangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| onRangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| onLayoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| onLayoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| onLayoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onLayoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| onCollapseRowsAll | 树状模式下收起全部的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| onBeforeRender | 开始 render 前的事件 | () => void; |  |  | \n| onAfterRender | render 完成的事件 | () => void; |  |  | \n| onMounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onDestroy | 表格销毁事件 | () => void; |  |  | \n| onLayoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseUp | resize 热区鼠标松开事件 | ( event: `MouseEvent`,  resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseMove | resize 热区鼠标移动事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onKeyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| onKeyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| onCopied | 复制事件 | (copyData: string) => void |  |  | \n| onActionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| onActionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| onContextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| onMouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| onSelected | 单元格选中事件 | (cells: ( [Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onReset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| onLinkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| onScroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: [ColCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n| onRowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: [RowCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n \n## SheetComponentOptions \n \nReact 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有两点不同 \n \n- tooltip 的 content 从 `Element | string` 变为了 `ReactNode`, 即可以是任意的 `jsx` 元素 \n- 分页配置从 S2 的分页配置 变为了 `antd` 的分页配置，即支持对 `antd` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps as AntdPaginationProps } from 'antd'; \n \ntype SheetComponentOptions = S2Options< \n  React.ReactNode, \n  Pagination & AntdPaginationProps \n>; \n``` \n \n<br/> \n \n# Vue 表组件 \n \n基于 `@antv/s2` 层封装的 `Vue 3.0` 版开箱即用的组件 `<SheetComponent />` \n \n## props \n \n功能描述： Vue SheetComponent 组件的 props，如 `<SheetComponent :sheetType=\"pivot\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 | `pivot | table` | `pivot` |  | \n| dataCfg | 透视表数据映射配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions-1) |  | ✓ | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (pageSize: number) => void,<br>onChange?: (current: number) => void <br>} | `false` |  | \n| themeCfg | 自定义表格主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n \n## events \n \n功能描述： Vue SheetComponent 组件的 events，`<SheetComponent @rowCellClick=\"handleRowCellClick\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions-1)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| getSpreadSheet | 获取表实例 (1.4.0 已废弃，请使用 `mounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| rangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| rowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellTrendIconClick | 数值趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| dataCellBrushSelection | 数值单元格刷选事件 | (brushRangeDataCells: ( [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| dataCellScroll | 数值单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| cornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| rangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| rangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| layoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| layoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| layoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| layoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| collapseRowsAll | 树状模式下收起全部的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| beforeRender | 开始 render 前的事件 | () => void; |  |  | \n| afterRender | render 完成的事件 | () => void; |  |  | \n| mounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| destroy | 表格销毁事件 | () => void; |  |  | \n| layoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseUp | resize 热区鼠标松开事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseMove | resize 热区鼠标移动事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| keyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| keyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| copied | 复制事件 | (copyData: string) => void |  |  | \n| actionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| actionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| contextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| mouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| selected | 单元格选中事件 | ( cells: ([Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| reset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| linkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| scroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: ColCell[]) => void; |  |  | \n| rowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: RowCell[]) => void; |  |  | \n \n## SheetComponentOptions \n \nVue 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有一点不同 \n \n- 分页配置从 S2 的分页配置 变为了 `antd-vue` 的分页配置，即支持对 `antd-vue` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps } from 'ant-design-vue'; \n \ntype SheetComponentOptions = S2Options< \n  Element | string, \n  Pagination & PaginationProps \n>; \n``` \n \n# 公共对象 \n \n## TargetCellInfo \n \n功能描述：交互回调函数的返回信息。 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| target | 交互作用对象 | [S2CellType](/docs/api/basic-class/base-cell) |  |  | \n| event | 事件 | [Event](#) |  |  | \n| viewMeta | 当前节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n \n \n### SortParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`     | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）         | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`                              | -      |      | \n| type          | 组内排序用来显示 icon （透视表适用）          | `string`                              | -      |      | \n| sortFunc      | 自定义排序的 function                        | (params: [SortFuncParam](#sortfuncparam)) => `string[]` | -      |      | \n \n#### SortFuncParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`    | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）      | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`    | -      |      | \n| type          | 组内排序用来显示 icon（透视表适用）             | `string`                              | -      |      | \n| data          | 当前排序数据列表                            | `Array<string \\| Record<string, any>>` | -      |      | \n \n \n## CellScrollPosition \n \n功能描述：单元格滚动的位置信息。 \n \n| 参数        | 说明         | 类型   | 默认值 | 必选 | \n| ---------- | ----------- | ----- | ----- | ---- | \n| scrollX     | 水平方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n| scrollY     | 垂直方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n \n## HiddenColumnsInfo \n \n功能描述： 开启 [隐藏列头](/docs/manual/advanced/interaction/hide-columns) 后，隐藏列头的节点信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| hideColumnNodes | 当前隐藏的节点信息 | [Node](/docs/api/basic-class/node)[] |  |  | \n| displaySiblingNode | 展示的相邻节点信息 | { prev:[Node](/docs/api/basic-class/node);next: [Node](/docs/api/basic-class/node) } |  |  | \n \n## ResizeParams \n \n功能描述：表格 resize（单元格行高列宽拖动变化）和单元格样式信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| info | resize 配置信息 | [ResizeInfo](#resizeinfo) |  |  | \n| style | options 中样式相关配置 | [style](/docs/api/general/S2Options#style) |  |  | \n \n## ResizeInfo \n \n功能描述：表格 resize（ 单元格行高列宽拖动变化）配置信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| theme | resize 热区配置 | [ResizeArea](/docs/api/general/S2Theme#resizearea) |  |  | \n| type | resize 方向 | `Horizontal` \\| `Vertical` |  |  | \n| offsetX | 横向偏移量 | `number` |  |  | \n| offsetY | 纵向偏移量 | `number` |  |  | \n| width | 拖拽的宽度 | `number` |  |  | \n| height | 拖拽 | `number` |  |  | \n| size | 热区尺寸 | `number` |  |  | \n| effect | 拖拽更改影响的区域 | `Field` \\| `Cell` \\| `Tree` \\| `Series` |  |  | \n| isResizeArea | 是否属于 resize 热区 | `boolean` |  |  | \n| id | 字段 id | `string` |  |  | \n| meta | resize 热区对应单元格节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n| resizedWidth | 拖拽后的宽度 | `number` |  |  | \n| resizedHeight | 拖拽后的高度 | `number` |  |  | \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"basic",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/BLitStN%24sR/196f5853-98cf-414f-af83-16b9c594c377.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { merge } from 'lodash';\nimport { DataCell, measureTextWidth } from '@antv/s2';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\n// 进度条\nconst PROGRESS_BAR = {\n  width: 80,\n  height: 10,\n  innerHeight: 6,\n};\n\n// 期望线\nconst EXPECTED_LINE = {\n  width: 1,\n  height: 12,\n  color: '#000',\n};\n\n// 当前进度状态颜色\nconst STATUS_COLOR = {\n  healthy: '#30BF78',\n  late: '#FAAD14',\n  danger: '#F4664A',\n};\n\nconst DERIVE_COLOR = {\n  up: '#F4664A',\n  down: '#30BF78',\n};\n\n// 间距\nconst PADDING = 10;\n\nfunction getStatusColorByProgress(realProgress, expectedProgress) {\n  const leftWorker = expectedProgress - realProgress;\n  if (leftWorker <= 0.1) {\n    return STATUS_COLOR.healthy;\n  }\n  if (leftWorker > 0.1 && leftWorker <= 0.3) {\n    return STATUS_COLOR.late;\n  }\n  return STATUS_COLOR.danger;\n}\n\nconst CONTAINER_COLOR = '#E9E9E9';\n\nclass KpiStrategyDataCell extends DataCell {\n  // 重写数值单元格\n  initCell() {\n    super.initCell();\n    // 在绘制完原本的单元格后, 再绘制进度条和衍生指标\n    this.renderProgressBar();\n    this.renderDeriveValue();\n  }\n\n  // 如果是进度, 格式化为百分比 (只做 demo 示例, 请根据实际情况使用)\n  getFormattedFieldValue() {\n    const { data } = this.meta;\n    if (!data || !data.isProgress) {\n      return super.getFormattedFieldValue();\n    }\n    const formattedValue = `${data.value * 100} %`;\n    return { formattedValue, value: data.value };\n  }\n\n  // 绘制衍生指标\n  renderDeriveValue() {\n    // 通过 this.meta 拿到当前单元格的有效信息\n    const { x, width, data } = this.meta;\n    if (!data || data.isExtra) {\n      return;\n    }\n    const value = data?.compare ?? '';\n    const isDown = value.startsWith('-');\n    const color = isDown ? DERIVE_COLOR.down : DERIVE_COLOR.up;\n    const displayValue = value.replace('-', '');\n    const text = isDown ? `↓${displayValue}` : `↑${displayValue}`;\n    const textStyle = {\n      fill: color,\n      fontSize: 12,\n    };\n    // 获取当前文本坐标\n    const { maxY } = this.textShape.getBBox();\n    // 获取当前文本宽度\n    const textWidth = measureTextWidth(text, textStyle);\n    // 衍生指标靠右显示\n    const textX = x + width - textWidth - PADDING;\n    // 衍生指标和数值对齐显示\n    const textY = maxY;\n\n    this.addShape('text', {\n      attrs: {\n        x: textX,\n        y: textY,\n        text,\n        ...textStyle,\n      },\n    });\n  }\n\n  // 绘制子弹进度条\n\n  renderProgressBar() {\n    const { x, y, width, height, data } = this.meta;\n    if (!data || !data.isProgress) {\n      return;\n    }\n    const currentProgress = data.value;\n    const expectedProgress = data.expectedValue;\n\n    const currentProgressWidth = Math.min(\n      PROGRESS_BAR.width * currentProgress,\n      PROGRESS_BAR.width,\n    );\n\n    // 总进度条\n    this.addShape('rect', {\n      attrs: {\n        x: x + width - PROGRESS_BAR.width - PADDING,\n        y: y + (height - PROGRESS_BAR.height) / 2,\n        width: PROGRESS_BAR.width,\n        height: PROGRESS_BAR.height,\n        fill: CONTAINER_COLOR,\n      },\n    });\n    // 当前进度条\n    this.addShape('rect', {\n      attrs: {\n        x: x + width - PROGRESS_BAR.width - PADDING,\n        y: y + (height - PROGRESS_BAR.innerHeight) / 2,\n        width: currentProgressWidth,\n        height: PROGRESS_BAR.innerHeight,\n        fill: getStatusColorByProgress(currentProgress, expectedProgress),\n      },\n    });\n    // 期望线\n    this.addShape('line', {\n      attrs: {\n        x1:\n          x +\n          width -\n          PROGRESS_BAR.width +\n          PROGRESS_BAR.width * expectedProgress,\n        y1: y + (height - EXPECTED_LINE.height) / 2,\n        x2:\n          x +\n          width -\n          PROGRESS_BAR.width +\n          PROGRESS_BAR.width * expectedProgress,\n        y2: y + (height - EXPECTED_LINE.height) / 2 + EXPECTED_LINE.height,\n        stroke: EXPECTED_LINE.color,\n        lineWidth: EXPECTED_LINE.width,\n        opacity: 0.25,\n      },\n    });\n  }\n}\n\nfetch('https://assets.antv.antgroup.com/s2/kpi-strategy.json')\n  .then((res) => res.json())\n  .then(({ data }) => {\n    const s2DataConfig = {\n      fields: {\n        rows: ['type', 'subType'],\n        columns: ['name'],\n        values: ['value'],\n        valueInCols: true,\n      },\n      meta: [\n        {\n          field: 'type',\n          name: '指标',\n        },\n        {\n          field: 'name',\n          name: '日期',\n          formatter: (value) => value ?? '-',\n        },\n        {\n          field: 'subType',\n          name: '子类别',\n        },\n        {\n          field: 'value',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      hierarchyType: 'tree',\n      tooltip: {\n        operation: {\n          trend: true,\n          hiddenColumns: true,\n        },\n      },\n      totals: {\n        row: {\n          showSubTotals: true,\n        },\n      },\n      interaction: {\n        selectedCellsSpotlight: true,\n        hoverHighlight: true,\n      },\n      // 默认数值挂列头, 会同时显示列头和数值, 隐藏数值列, 使其列头只展示日期, 更美观\n      style: {\n        colCfg: {\n          hideMeasureColumn: true,\n        },\n        cellCfg: {\n          width: 150,\n        },\n      },\n      // 自定义角头文本\n      cornerText: '指标',\n      // 覆盖默认数值单元格, 额外绘制衍生指标和子弹图\n      dataCell: (viewMeta) =>\n        new KpiStrategyDataCell(viewMeta, viewMeta.spreadsheet),\n    };\n\n    // 覆盖默认主题, 让单元格文字靠左显示\n    const theme = {\n      dataCell: {\n        // 父节点\n        bolderText: {\n          textAlign: 'left',\n        },\n        // 子节点\n        text: {\n          textAlign: 'left',\n        },\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={s2DataConfig}\n        options={s2Options}\n        sheetType=\"pivot\"\n        themeCfg={{\n          theme: merge({}, theme),\n        }}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"KPI 趋势表",en:"KPI StrategySheet"},filename:"basic.tsx",isNew:!1},{id:"covid-trend",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/xv%2685cV97/2022-09-15%25252022.43.09.gif",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { isNil } from 'lodash';\nimport { isUpDataValue } from '@antv/s2';\nimport { SheetComponent, SheetComponentOptions } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\n// 数据来源：https://voice.baidu.com/act/newpneumonia/newpneumonia/?from=osari_pc_1&city=%E5%9B%9B%E5%B7%9D-%E5%9B%9B%E5%B7%9D\nfetch(\n  'https://gw.alipayobjects.com/os/antfincdn/AaxWQTWBO/sichuan-covid-trend.json',\n)\n  .then((res) => res.json())\n  .then((s2DataCfg) => {\n    const s2Options: SheetComponentOptions = {\n      width: 1200,\n      height: 600,\n      placeholder: '',\n      style: {\n        cellCfg: {\n          height: 60,\n        },\n        colCfg: {\n          widthByFieldValue: { 近14日趋势图: 300 },\n        },\n      },\n      conditions: {\n        text: [\n          {\n            mapping: (value, cellInfo) => {\n              const { colIndex } = cellInfo;\n              const isNilValue = isNil(value) || value === '';\n\n              if (colIndex === 0 || isNilValue) {\n                return {\n                  fill: '#000',\n                };\n              }\n              return {\n                fill: isUpDataValue(value) ? '#FF4D4F' : '#29A294',\n              };\n            },\n          },\n        ],\n        icon: [\n          {\n            position: 'right',\n            mapping(value, cellInfo) {\n              const { colIndex } = cellInfo;\n              const isNilValue = isNil(value) || value === '';\n\n              if (colIndex === 0 || isNilValue) {\n                return null;\n              }\n              return isUpDataValue(value)\n                ? {\n                    // icon 用于指定图标条件格式所使用的 icon 类型\n                    icon: 'CellUp',\n                    fill: '#FF4D4F',\n                  }\n                : {\n                    icon: 'CellDown',\n                    fill: '#29A294',\n                  };\n            },\n          },\n        ],\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={s2DataCfg}\n        options={s2Options}\n        sheetType=\"strategy\"\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"四川疫情趋势表",en:"Covid StrategySheet"},filename:"covid-trend.tsx",isNew:!1}],icon:"",id:"kpi-strategy",title:{en:"KPI Strategy",zh:"KPI 趋势表"},api:{zh:" \n \n# React 表组件 \n \n基于 `@antv/s2` 封装的 `React` 版开箱即用的组件 `<SheetComponent />` \n \n## SpreadsheetProps \n \n功能描述： React SheetComponent 组件的 props 参数 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 <br> 3. `gridAnalysis`: 网格分析表 <br/> 4. `strategy`: 趋势分析表 | `pivot \\| table \\| gridAnalysis \\| strategy` \\| `pivot` |  | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| dataCfg | 透视表数据映射相关配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions) |  | ✓ | \n| partDrillDown | 维度下钻相关属性 | [PartDrillDown](/docs/api/components/drill-down) |  |  | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (current:number, pageSize: number) => void,<br>onChange?: (current:number, pageSize: number) => void <br>} | `false` |  | \n| themeCfg | 自定义透视表主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n| header | 表头配置项 | [HeaderCfgProps](/docs/api/components/header) |  |  | \n| getSpreadSheet | 获取表实例 (1.29.0 已废弃，请使用 `onMounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onRangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| onRowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellTrendIconClick | 数值单元格的趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onDataCellBrushSelection | 数值单元格刷选事件 | ( dataCells: [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onDataCellSelectMove | 数值单元格键盘方向键移动事件 | (metas: CellMeta[]) => void |  |  | \n| onDataCellEditEnd | 数值单元格编辑完成（暂只支持编辑表） | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onCornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| onRangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| onRangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| onLayoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| onLayoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| onLayoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onLayoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| onCollapseRowsAll | 树状模式下收起全部的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| onBeforeRender | 开始 render 前的事件 | () => void; |  |  | \n| onAfterRender | render 完成的事件 | () => void; |  |  | \n| onMounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onDestroy | 表格销毁事件 | () => void; |  |  | \n| onLayoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseUp | resize 热区鼠标松开事件 | ( event: `MouseEvent`,  resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseMove | resize 热区鼠标移动事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onKeyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| onKeyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| onCopied | 复制事件 | (copyData: string) => void |  |  | \n| onActionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| onActionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| onContextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| onMouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| onSelected | 单元格选中事件 | (cells: ( [Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onReset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| onLinkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| onScroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: [ColCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n| onRowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: [RowCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n \n## SheetComponentOptions \n \nReact 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有两点不同 \n \n- tooltip 的 content 从 `Element | string` 变为了 `ReactNode`, 即可以是任意的 `jsx` 元素 \n- 分页配置从 S2 的分页配置 变为了 `antd` 的分页配置，即支持对 `antd` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps as AntdPaginationProps } from 'antd'; \n \ntype SheetComponentOptions = S2Options< \n  React.ReactNode, \n  Pagination & AntdPaginationProps \n>; \n``` \n \n<br/> \n \n# Vue 表组件 \n \n基于 `@antv/s2` 层封装的 `Vue 3.0` 版开箱即用的组件 `<SheetComponent />` \n \n## props \n \n功能描述： Vue SheetComponent 组件的 props，如 `<SheetComponent :sheetType=\"pivot\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 | `pivot | table` | `pivot` |  | \n| dataCfg | 透视表数据映射配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions-1) |  | ✓ | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (pageSize: number) => void,<br>onChange?: (current: number) => void <br>} | `false` |  | \n| themeCfg | 自定义表格主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n \n## events \n \n功能描述： Vue SheetComponent 组件的 events，`<SheetComponent @rowCellClick=\"handleRowCellClick\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions-1)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| getSpreadSheet | 获取表实例 (1.4.0 已废弃，请使用 `mounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| rangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| rowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellTrendIconClick | 数值趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| dataCellBrushSelection | 数值单元格刷选事件 | (brushRangeDataCells: ( [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| dataCellScroll | 数值单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| cornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| rangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| rangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| layoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| layoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| layoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| layoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| collapseRowsAll | 树状模式下收起全部的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| beforeRender | 开始 render 前的事件 | () => void; |  |  | \n| afterRender | render 完成的事件 | () => void; |  |  | \n| mounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| destroy | 表格销毁事件 | () => void; |  |  | \n| layoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseUp | resize 热区鼠标松开事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseMove | resize 热区鼠标移动事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| keyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| keyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| copied | 复制事件 | (copyData: string) => void |  |  | \n| actionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| actionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| contextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| mouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| selected | 单元格选中事件 | ( cells: ([Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| reset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| linkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| scroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: ColCell[]) => void; |  |  | \n| rowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: RowCell[]) => void; |  |  | \n \n## SheetComponentOptions \n \nVue 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有一点不同 \n \n- 分页配置从 S2 的分页配置 变为了 `antd-vue` 的分页配置，即支持对 `antd-vue` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps } from 'ant-design-vue'; \n \ntype SheetComponentOptions = S2Options< \n  Element | string, \n  Pagination & PaginationProps \n>; \n``` \n \n# 公共对象 \n \n## TargetCellInfo \n \n功能描述：交互回调函数的返回信息。 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| target | 交互作用对象 | [S2CellType](/docs/api/basic-class/base-cell) |  |  | \n| event | 事件 | [Event](#) |  |  | \n| viewMeta | 当前节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n \n \n### SortParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`     | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）         | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`                              | -      |      | \n| type          | 组内排序用来显示 icon （透视表适用）          | `string`                              | -      |      | \n| sortFunc      | 自定义排序的 function                        | (params: [SortFuncParam](#sortfuncparam)) => `string[]` | -      |      | \n \n#### SortFuncParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`    | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）      | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`    | -      |      | \n| type          | 组内排序用来显示 icon（透视表适用）             | `string`                              | -      |      | \n| data          | 当前排序数据列表                            | `Array<string \\| Record<string, any>>` | -      |      | \n \n \n## CellScrollPosition \n \n功能描述：单元格滚动的位置信息。 \n \n| 参数        | 说明         | 类型   | 默认值 | 必选 | \n| ---------- | ----------- | ----- | ----- | ---- | \n| scrollX     | 水平方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n| scrollY     | 垂直方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n \n## HiddenColumnsInfo \n \n功能描述： 开启 [隐藏列头](/docs/manual/advanced/interaction/hide-columns) 后，隐藏列头的节点信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| hideColumnNodes | 当前隐藏的节点信息 | [Node](/docs/api/basic-class/node)[] |  |  | \n| displaySiblingNode | 展示的相邻节点信息 | { prev:[Node](/docs/api/basic-class/node);next: [Node](/docs/api/basic-class/node) } |  |  | \n \n## ResizeParams \n \n功能描述：表格 resize（单元格行高列宽拖动变化）和单元格样式信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| info | resize 配置信息 | [ResizeInfo](#resizeinfo) |  |  | \n| style | options 中样式相关配置 | [style](/docs/api/general/S2Options#style) |  |  | \n \n## ResizeInfo \n \n功能描述：表格 resize（ 单元格行高列宽拖动变化）配置信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| theme | resize 热区配置 | [ResizeArea](/docs/api/general/S2Theme#resizearea) |  |  | \n| type | resize 方向 | `Horizontal` \\| `Vertical` |  |  | \n| offsetX | 横向偏移量 | `number` |  |  | \n| offsetY | 纵向偏移量 | `number` |  |  | \n| width | 拖拽的宽度 | `number` |  |  | \n| height | 拖拽 | `number` |  |  | \n| size | 热区尺寸 | `number` |  |  | \n| effect | 拖拽更改影响的区域 | `Field` \\| `Cell` \\| `Tree` \\| `Series` |  |  | \n| isResizeArea | 是否属于 resize 热区 | `boolean` |  |  | \n| id | 字段 id | `string` |  |  | \n| meta | resize 热区对应单元格节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n| resizedWidth | 拖拽后的宽度 | `number` |  |  | \n| resizedHeight | 拖拽后的高度 | `number` |  |  | \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n \n",en:" \n \n# React 表组件 \n \n基于 `@antv/s2` 封装的 `React` 版开箱即用的组件 `<SheetComponent />` \n \n## SpreadsheetProps \n \n功能描述： React SheetComponent 组件的 props 参数 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 <br> 3. `gridAnalysis`: 网格分析表 <br/> 4. `strategy`: 趋势分析表 | `pivot \\| table \\| gridAnalysis \\| strategy` \\| `pivot` |  | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| dataCfg | 透视表数据映射相关配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions) |  | ✓ | \n| partDrillDown | 维度下钻相关属性 | [PartDrillDown](/docs/api/components/drill-down) |  |  | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (current:number, pageSize: number) => void,<br>onChange?: (current:number, pageSize: number) => void <br>} | `false` |  | \n| themeCfg | 自定义透视表主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n| header | 表头配置项 | [HeaderCfgProps](/docs/api/components/header) |  |  | \n| getSpreadSheet | 获取表实例 (1.29.0 已废弃，请使用 `onMounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onRangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| onRowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellTrendIconClick | 数值单元格的趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onDataCellBrushSelection | 数值单元格刷选事件 | ( dataCells: [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onDataCellSelectMove | 数值单元格键盘方向键移动事件 | (metas: CellMeta[]) => void |  |  | \n| onDataCellEditEnd | 数值单元格编辑完成（暂只支持编辑表） | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onCornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| onRangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| onRangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| onLayoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| onLayoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| onLayoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onLayoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| onCollapseRowsAll | 树状模式下收起全部的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| onBeforeRender | 开始 render 前的事件 | () => void; |  |  | \n| onAfterRender | render 完成的事件 | () => void; |  |  | \n| onMounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onDestroy | 表格销毁事件 | () => void; |  |  | \n| onLayoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseUp | resize 热区鼠标松开事件 | ( event: `MouseEvent`,  resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseMove | resize 热区鼠标移动事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onKeyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| onKeyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| onCopied | 复制事件 | (copyData: string) => void |  |  | \n| onActionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| onActionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| onContextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| onMouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| onSelected | 单元格选中事件 | (cells: ( [Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onReset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| onLinkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| onScroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: [ColCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n| onRowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: [RowCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n \n## SheetComponentOptions \n \nReact 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有两点不同 \n \n- tooltip 的 content 从 `Element | string` 变为了 `ReactNode`, 即可以是任意的 `jsx` 元素 \n- 分页配置从 S2 的分页配置 变为了 `antd` 的分页配置，即支持对 `antd` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps as AntdPaginationProps } from 'antd'; \n \ntype SheetComponentOptions = S2Options< \n  React.ReactNode, \n  Pagination & AntdPaginationProps \n>; \n``` \n \n<br/> \n \n# Vue 表组件 \n \n基于 `@antv/s2` 层封装的 `Vue 3.0` 版开箱即用的组件 `<SheetComponent />` \n \n## props \n \n功能描述： Vue SheetComponent 组件的 props，如 `<SheetComponent :sheetType=\"pivot\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 | `pivot | table` | `pivot` |  | \n| dataCfg | 透视表数据映射配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions-1) |  | ✓ | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (pageSize: number) => void,<br>onChange?: (current: number) => void <br>} | `false` |  | \n| themeCfg | 自定义表格主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n \n## events \n \n功能描述： Vue SheetComponent 组件的 events，`<SheetComponent @rowCellClick=\"handleRowCellClick\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions-1)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| getSpreadSheet | 获取表实例 (1.4.0 已废弃，请使用 `mounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| rangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| rowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellTrendIconClick | 数值趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| dataCellBrushSelection | 数值单元格刷选事件 | (brushRangeDataCells: ( [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| dataCellScroll | 数值单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| cornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| rangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| rangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| layoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| layoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| layoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| layoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| collapseRowsAll | 树状模式下收起全部的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| beforeRender | 开始 render 前的事件 | () => void; |  |  | \n| afterRender | render 完成的事件 | () => void; |  |  | \n| mounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| destroy | 表格销毁事件 | () => void; |  |  | \n| layoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseUp | resize 热区鼠标松开事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseMove | resize 热区鼠标移动事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| keyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| keyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| copied | 复制事件 | (copyData: string) => void |  |  | \n| actionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| actionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| contextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| mouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| selected | 单元格选中事件 | ( cells: ([Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| reset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| linkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| scroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: ColCell[]) => void; |  |  | \n| rowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: RowCell[]) => void; |  |  | \n \n## SheetComponentOptions \n \nVue 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有一点不同 \n \n- 分页配置从 S2 的分页配置 变为了 `antd-vue` 的分页配置，即支持对 `antd-vue` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps } from 'ant-design-vue'; \n \ntype SheetComponentOptions = S2Options< \n  Element | string, \n  Pagination & PaginationProps \n>; \n``` \n \n# 公共对象 \n \n## TargetCellInfo \n \n功能描述：交互回调函数的返回信息。 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| target | 交互作用对象 | [S2CellType](/docs/api/basic-class/base-cell) |  |  | \n| event | 事件 | [Event](#) |  |  | \n| viewMeta | 当前节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n \n \n### SortParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`     | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）         | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`                              | -      |      | \n| type          | 组内排序用来显示 icon （透视表适用）          | `string`                              | -      |      | \n| sortFunc      | 自定义排序的 function                        | (params: [SortFuncParam](#sortfuncparam)) => `string[]` | -      |      | \n \n#### SortFuncParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`    | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）      | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`    | -      |      | \n| type          | 组内排序用来显示 icon（透视表适用）             | `string`                              | -      |      | \n| data          | 当前排序数据列表                            | `Array<string \\| Record<string, any>>` | -      |      | \n \n \n## CellScrollPosition \n \n功能描述：单元格滚动的位置信息。 \n \n| 参数        | 说明         | 类型   | 默认值 | 必选 | \n| ---------- | ----------- | ----- | ----- | ---- | \n| scrollX     | 水平方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n| scrollY     | 垂直方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n \n## HiddenColumnsInfo \n \n功能描述： 开启 [隐藏列头](/docs/manual/advanced/interaction/hide-columns) 后，隐藏列头的节点信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| hideColumnNodes | 当前隐藏的节点信息 | [Node](/docs/api/basic-class/node)[] |  |  | \n| displaySiblingNode | 展示的相邻节点信息 | { prev:[Node](/docs/api/basic-class/node);next: [Node](/docs/api/basic-class/node) } |  |  | \n \n## ResizeParams \n \n功能描述：表格 resize（单元格行高列宽拖动变化）和单元格样式信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| info | resize 配置信息 | [ResizeInfo](#resizeinfo) |  |  | \n| style | options 中样式相关配置 | [style](/docs/api/general/S2Options#style) |  |  | \n \n## ResizeInfo \n \n功能描述：表格 resize（ 单元格行高列宽拖动变化）配置信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| theme | resize 热区配置 | [ResizeArea](/docs/api/general/S2Theme#resizearea) |  |  | \n| type | resize 方向 | `Horizontal` \\| `Vertical` |  |  | \n| offsetX | 横向偏移量 | `number` |  |  | \n| offsetY | 纵向偏移量 | `number` |  |  | \n| width | 拖拽的宽度 | `number` |  |  | \n| height | 拖拽 | `number` |  |  | \n| size | 热区尺寸 | `number` |  |  | \n| effect | 拖拽更改影响的区域 | `Field` \\| `Cell` \\| `Tree` \\| `Series` |  |  | \n| isResizeArea | 是否属于 resize 热区 | `boolean` |  |  | \n| id | 字段 id | `string` |  |  | \n| meta | resize 热区对应单元格节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n| resizedWidth | 拖拽后的宽度 | `number` |  |  | \n| resizedHeight | 拖拽后的高度 | `number` |  |  | \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n \n"},childrenKey:"demos",order:3},{demos:[{id:"index",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/nVlBvKDBjT/search.gif",source:'import React, { useState, useEffect, useRef } from \'react\';\nimport ReactDOM from \'react-dom\';\nimport insertCss from \'insert-css\';\nimport {\n  TableColCell,\n  GuiIcon,\n  TableCornerCell,\n  S2Event,\n  InteractionStateName,\n  CellTypes,\n} from \'@antv/s2\';\nimport { SheetComponent } from \'@antv/s2-react\';\nimport {\n  Input,\n  Divider,\n  Space,\n  Button,\n  Modal,\n  Radio,\n  Form,\n  Popover,\n  Checkbox,\n  message,\n} from \'antd\';\nimport { get, uniq } from \'lodash\';\nimport \'@antv/s2-react/dist/style.min.css\';\nimport \'antd/es/checkbox/style/index.css\';\n\nconst { Search } = Input;\n\nconst ShowList = ({ columns, setColumns, allChecked }) => {\n  return (\n    <Popover\n      trigger="click"\n      placement="bottomRight"\n      title={\n        <div>\n          <Checkbox\n            checked={allChecked}\n            onChange={() =>\n              allChecked ? setColumns([]) : setColumns([...initColumns])\n            }\n          >\n            全选 {columns.length} / {initColumns.length}\n          </Checkbox>\n        </div>\n      }\n      content={initColumns.map((e, i) => (\n        <div key={e}>\n          <Checkbox\n            checked={columns.includes(e)}\n            onChange={() =>\n              columns.includes(e)\n                ? setColumns((fields) => fields.filter((item) => e !== item))\n                : setColumns((fields) => [...fields, e])\n            }\n          >\n            {e}\n          </Checkbox>\n        </div>\n      ))}\n    >\n      <Button>隐藏列</Button>\n    </Popover>\n  );\n};\n\nclass CustomCornerCell extends TableCornerCell {\n  drawBackgroundShape() {\n    super.drawBackgroundShape();\n  }\n\n  drawInteractiveBgShape() {\n    super.drawInteractiveBgShape();\n  }\n\n  drawTextShape() {\n    const { x, y, width: cellWidth, height: cellHeight, key } = this.meta;\n    const padding = 4;\n    this.textShape = this.addShape(\'polygon\', {\n      zIndex: 4,\n      attrs: {\n        fill: \'rgba(0,0,0,0.1)\',\n        points: [\n          [x + cellWidth - padding + 2, y + padding],\n          [x + cellWidth - padding + 2, y + cellHeight - padding],\n          [\n            x + cellWidth - padding - cellHeight + padding * 2,\n            y + cellHeight - padding,\n          ],\n        ],\n      },\n    });\n  }\n}\n\nclass CustomTableColCell extends TableColCell {\n  onIconClick;\n\n  constructor(meta, spreadsheet, headerConfig, callback) {\n    super(meta, spreadsheet, headerConfig);\n    this.onIconClick = callback;\n  }\n\n  drawTextShape() {\n    super.drawTextShape();\n\n    const { x, y, width: cellWidth, height: cellHeight } = this.meta;\n    const style = this.getStyle();\n    const iconSize = get(style, \'icon.size\');\n    const iconMargin = get(style, \'icon.margin\');\n\n    const iconX = x + cellWidth - iconSize - iconMargin?.right;\n    const iconY = y + cellHeight / 2 - iconSize / 2;\n\n    this.renderFilterIcon({\n      x: iconX,\n      y: iconY,\n      width: iconSize,\n      height: iconSize,\n    });\n  }\n\n  renderFilterIcon(position) {\n    const sortMethod = getCurrentSortMethod(\n      this.meta.value,\n      this.spreadsheet.dataCfg.sortParams,\n    );\n    /**\n     * 有值说明有加filter\n     */\n\n    const isFiltered = !!getCurrentFilterParams(\n      this.meta.value,\n      this.spreadsheet.dataCfg.filterParams,\n    ).length;\n\n    const { x, y, width, height } = position;\n    const icon = new GuiIcon({\n      name: iconMap[sortMethod.toLowerCase()],\n      x,\n      y,\n      width,\n      height,\n      fill: isFiltered ? \'#873bf4\' : \'rgb(67, 72, 91)\',\n    });\n    this.add(icon);\n\n    icon.on(\'click\', () => {\n      this.onIconClick?.({\n        meta: this.meta,\n      });\n    });\n  }\n}\n\nconst iconMap = {\n  none: \'Filter\',\n  asc: \'SortUp\',\n  desc: \'SortDown\',\n};\n\nexport const filterIcon =\n  \'<svg t="1633848048963" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="85936" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M0 0h1024L724.676923 488.369231V1024l-425.353846-141.784615v-393.846154L0 0z m196.923077 102.4l204.8 354.461538v362.338462l228.430769 63.015385V456.861538l212.676923-354.461538H196.923077z" opacity=".4" p-id="85937"></path></svg>\';\nexport const sortUp =\n  \'<svg t="1634734477742" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2208" width="200" height="200"><path d="M569.508769 653.352619l151.594419 0 0 108.819221-151.594419 0L569.508769 653.352619zM569.508769 65.693452l385.479045 0 0 108.828814L569.508569 174.522266 569.508769 65.693452 569.508769 65.693452zM569.508769 261.583239l307.513506 0 0 108.819021L569.508769 370.402259 569.508769 261.583239 569.508769 261.583239zM569.508769 457.463032l229.552363 0 0 108.821019-229.552363 0C569.508769 566.284051 569.508769 457.463032 569.508769 457.463032zM569.508769 849.232612l73.62868 0 0 108.826815-73.62868 0L569.508769 849.232612zM354.693414 427.846912l0 530.212516L203.94622 958.059428 203.94622 427.846912 62.754748 427.846912 279.308125 65.187795 495.87849 427.846912 354.693414 427.846912z" p-id="2209"></path></svg>\';\nexport const sortDown =\n  \'<svg t="1634734501800" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2875" width="200" height="200"><path d="M279.15323 958.059228l217.110799-363.160177-141.539436 0L354.724593 63.957829l-151.123938 0 0 530.943021L62.057421 594.900849 279.15323 958.059228 279.15323 958.059228zM570.078783 64.464885l386.443791 0 0 108.976114L570.078583 173.440999 570.078783 64.464885 570.078783 64.464885zM570.078783 369.594007 878.364965 369.594007l0-108.974515L570.078783 260.619492 570.078783 369.594007zM570.078783 565.747016l230.128573 0 0-108.976114L570.078783 456.770901 570.078783 565.747016 570.078783 565.747016zM570.078783 761.904621l151.972163 0L722.050945 652.930305l-151.972163 0L570.078783 761.904621zM570.078783 958.059228l73.813355 0 0-108.974315-73.813355 0L570.078783 958.059228z" p-id="2876"></path></svg>\';\n\nconst getSearchResult = (searchKey, data, columns) => {\n  if (!searchKey) {\n    return [];\n  }\n  const results = [];\n  data.forEach((row, rowId) => {\n    columns.forEach((col, colId) => {\n      if (\n        (`${row[col]}` || \'\').toLowerCase().includes(searchKey.toLowerCase())\n      ) {\n        results.push({\n          col: colId,\n          row: rowId,\n        });\n      }\n    });\n  });\n\n  return results;\n};\n\nconst initColumns = [\'province\', \'city\', \'type\', \'price\'];\n\nconst scrollToCell = (rowIndex, colIndex, options, facet, interaction) => {\n  const { frozenRowCount } = options;\n  const colsNodes = facet.layoutResult.colLeafNodes;\n\n  let offsetX = 0;\n  let offsetY = 0;\n\n  offsetY = facet.viewCellHeights.getCellOffsetY(rowIndex - 1);\n  offsetX = facet.layoutResult.colLeafNodes.find(\n    (item) => item.colIndex === colIndex,\n  )?.x;\n  if (frozenRowCount > 0 && rowIndex > frozenRowCount - 1) {\n    offsetY -= facet.getTotalHeightForRange(0, frozenRowCount - 1);\n  }\n\n  if (offsetY < 0) {\n    offsetY = 0;\n  }\n\n  facet.scrollWithAnimation({\n    offsetX: {\n      value: offsetX,\n    },\n    offsetY: {\n      value: offsetY,\n    },\n  });\n\n  interaction.changeState({\n    stateName: InteractionStateName.SELECTED,\n    cells: [\n      {\n        colIndex,\n        rowIndex,\n        id: `${String(rowIndex)}-${colsNodes[colIndex + 1].id}`,\n        type: CellTypes.DATA_CELL,\n      },\n    ],\n  });\n};\n\nconst App = ({ data }) => {\n  const onIconClick = ({ meta }) => {\n    setInteractedCol(meta.value);\n    setColModalVisible(!colModalVisible);\n  };\n  const s2Ref = useRef(null);\n  const [columns, setColumns] = React.useState(initColumns);\n\n  const [interactedCol, setInteractedCol] = useState(\'\');\n  const modalCallbackRef = useRef((e) => {});\n\n  const [options, setOptions] = useState({\n    width: 600,\n    height: 400,\n    showSeriesNumber: true,\n    interaction: {\n      enableCopy: true,\n      autoResetSheetStyle: false,\n      hoverFocus: false,\n    },\n    colCell: (item, spreadsheet, headerConfig) => {\n      if (item.colIndex === 0) {\n        return new CustomCornerCell(item, spreadsheet, headerConfig);\n      }\n      return new CustomTableColCell(\n        item,\n        spreadsheet,\n        headerConfig,\n        onIconClick,\n      );\n    },\n    customSVGIcons: [\n      {\n        name: \'Filter\',\n        svg: filterIcon,\n      },\n      {\n        name: \'SortUp\',\n        svg: sortUp,\n      },\n      {\n        name: \'SortDown\',\n        svg: sortDown,\n      },\n    ],\n    tooltip: {\n      operation: {\n        hiddenColumns: true,\n      },\n    },\n    showDefaultHeaderActionIcon: false,\n  });\n  const [dataCfg, setDataCfg] = useState({\n    fields: {\n      columns,\n    },\n    data,\n    sortParams: [],\n    filterParams: [],\n  });\n\n  useEffect(() => {\n    setDataCfg((cfg) => ({\n      ...cfg,\n      fields: { columns },\n    }));\n    s2Ref.current.render(true);\n  }, [columns.length]);\n\n  const [searchKey, setSearchKey] = useState(\'\');\n  const [searchResult, setSearchResult] = useState([]);\n  const [colModalVisible, setColModalVisible] = useState(false);\n  const [searchResultActiveIndex, setSearchResultActiveIndex] = useState(-1);\n  const [form] = Form.useForm();\n\n  const allChecked = columns.length === initColumns.length;\n\n  const focusNext = (results, currentIndex) => {\n    const length = results.length;\n    let nextIndex = currentIndex + 1;\n    if (nextIndex >= length) {\n      nextIndex = 0;\n    }\n    setSearchResultActiveIndex(nextIndex);\n    const current = results[nextIndex];\n    scrollToCell(\n      current.row,\n      current.col,\n      s2Ref.current.options,\n      s2Ref.current.facet,\n      s2Ref.current.interaction,\n    );\n  };\n\n  const focusPrev = (results) => {\n    const length = results.length;\n    let nextIndex = searchResultActiveIndex - 1;\n    if (nextIndex < 0) {\n      nextIndex = length - 1;\n    }\n    setSearchResultActiveIndex(nextIndex);\n    const current = results[nextIndex];\n    scrollToCell(\n      current.row,\n      current.col,\n      s2Ref.current.options,\n      s2Ref.current.facet,\n      s2Ref.current.interaction,\n    );\n  };\n\n  const search = (key) => {\n    let searchData = [];\n    if (s2Ref.current) {\n      searchData = s2Ref.current.dataSet.getDisplayDataSet();\n    }\n    const results = getSearchResult(key, searchData, columns);\n    setSearchResult(results);\n    setSearchResultActiveIndex(-1);\n    if (results.length > 0) {\n      focusNext(results, -1);\n    }\n  };\n\n  return (\n    <div>\n      <Space>\n        <ShowList\n          columns={columns}\n          allChecked={allChecked}\n          setColumns={setColumns}\n        />\n        <Search\n          placeholder="输入关键词搜索"\n          allowClear\n          enterButton="Search"\n          value={searchKey}\n          onChange={(e) => {\n            setSearchKey(e.target.value);\n          }}\n          onSearch={(key) => {\n            search(key);\n          }}\n        />\n\n        {searchResult.length ? (\n          <>\n            <div>{`${searchResultActiveIndex + 1}/${\n              searchResult.length + 1\n            }`}</div>\n            <Button\n              shape="circle"\n              icon={<antdIcons.ArrowLeftOutlined />}\n              onClick={() => {\n                if (searchResult.length > 0) {\n                  focusPrev(searchResult, searchResultActiveIndex);\n                }\n              }}\n            />\n            <Button\n              shape="circle"\n              icon={<antdIcons.ArrowRightOutlined />}\n              onClick={() => {\n                if (searchResult.length > 0) {\n                  focusNext(searchResult, searchResultActiveIndex);\n                }\n              }}\n            />\n          </>\n        ) : null}\n      </Space>\n\n      <Divider />\n      <SheetComponent\n        ref={s2Ref}\n        dataCfg={dataCfg}\n        options={options}\n        sheetType="table"\n        onColCellClick={(e) => {\n          // 最左侧列的格子点击后全选\n          if (e.viewMeta.colIndex === 0) {\n            s2Ref.current?.interaction.selectAll();\n          }\n        }}\n        onCopied={() => {\n          message.success(\'复制成功\');\n        }}\n      />\n      <Modal\n        title="列设置"\n        visible={colModalVisible}\n        className="antv-s2-data-preview-demo-modal"\n        onCancel={() => {\n          setColModalVisible(false);\n          form.resetFields();\n        }}\n        onOk={() => {\n          modalCallbackRef.current();\n          setColModalVisible(false);\n        }}\n      >\n        <SortPopover\n          spreadsheet={s2Ref.current}\n          fieldName={interactedCol}\n          modalCallbackRef={modalCallbackRef}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nconst convertToObject = (values) => {\n  const initData = {};\n\n  values.forEach((val) => {\n    initData[val] = true;\n  });\n\n  return initData;\n};\n\n/**\n * 返回当前sortMethod  默认为NONE\n * @param fieldName\n * @param sortParams\n * @returns\n */\n\nexport const getCurrentSortMethod = (fieldName, sortParams) => {\n  return (\n    get(\n      (sortParams || []).filter((param) => param.sortFieldId === fieldName),\n      \'[0].sortMethod\',\n      \'NONE\',\n    ) || \'NONE\'\n  );\n};\n\n/**\n *\n * @param fieldName\n * @param filterParams\n * @returns\n */\nexport const getCurrentFilterParams = (fieldName, filterParams) => {\n  const filtered = get(\n    (filterParams || []).filter((param) => param.filterKey === fieldName),\n    \'[0].filteredValues\',\n    [],\n  );\n\n  return filtered;\n};\n\nconst SortPopover = ({ fieldName, spreadsheet, modalCallbackRef }) => {\n  const fieldData = React.useMemo(\n    () =>\n      uniq(\n        // slice掉第一行  （第一行是column名）\n        spreadsheet.dataSet.originData.slice(1).map((item) => item[fieldName]),\n      ),\n    [spreadsheet.dataSet.originData, fieldName],\n  );\n\n  const { sortParams, filterParams } = spreadsheet.dataCfg;\n  const [sort, setsort] = React.useState(\n    getCurrentSortMethod(fieldName, sortParams),\n  );\n  const [filtered, setfiltered] = React.useState(\n    convertToObject(getCurrentFilterParams(fieldName, filterParams)),\n  );\n  const [changed, setchanged] = React.useState({\n    sort: false,\n    filter: false,\n  });\n  const [searchKeyword, setsearchKeyword] = React.useState(\'\');\n\n  const searchedFieldData = React.useMemo(\n    () =>\n      fieldData.filter((data) => {\n        if (searchKeyword) {\n          if (typeof data === \'string\') {\n            return data.search(searchKeyword) !== -1;\n          }\n          return false;\n        }\n        return true;\n      }),\n    [searchKeyword, fieldData],\n  );\n\n  const onKeywordChange = (keyword) => {\n    // 关键词变化时将不在关键词内的值过滤\n    setsearchKeyword(keyword);\n    setchanged((old) => ({ ...old, filter: true }));\n    const newFilter = {};\n    fieldData\n      .filter(\n        (data) =>\n          !fieldData\n            .filter((field) => {\n              if (keyword) {\n                if (typeof field === \'string\') {\n                  return field.search(keyword) !== -1;\n                }\n                return false;\n              }\n              return true;\n            })\n            .includes(data),\n      )\n      .forEach((data) => {\n        newFilter[data] = true;\n      });\n    setfiltered(newFilter);\n  };\n\n  modalCallbackRef.current = () => {\n    if (changed.sort) {\n      spreadsheet.emit(S2Event.RANGE_SORT, [\n        {\n          sortFieldId: fieldName,\n          sortMethod: sort,\n        },\n      ]);\n    }\n    if (changed.filter) {\n      spreadsheet.emit(S2Event.RANGE_FILTER, {\n        filterKey: fieldName,\n        // 将Object还原成数组\n        filteredValues: Object.entries(filtered)\n          .map(([fieldValue, isFiltered]) => {\n            if (isFiltered) return fieldValue;\n          })\n          .filter(Boolean),\n      });\n    }\n    setchanged({ filter: false, sort: false });\n  };\n\n  return (\n    <Form\n      style={{ padding: \'1em\' }}\n      labelCol={{ span: 6 }}\n      wrapperCol={{ span: 18 }}\n    >\n      <Form.Item label="数据排序: " className="sort-item">\n        <Radio.Group\n          onChange={(e) => {\n            setsort(e.target.value);\n            setchanged((val) => ({ ...val, sort: true }));\n          }}\n          value={sort}\n        >\n          <Radio value={\'NONE\'}>无</Radio>\n          <Radio value={\'ASC\'}>升序</Radio>\n          <Radio value={\'DESC\'}>降序</Radio>\n        </Radio.Group>\n        ,\n      </Form.Item>\n      <Form.Item label="数值筛选: " className="filter-item">\n        <div>\n          <Input.Search\n            value={searchKeyword}\n            onChange={(e) => onKeywordChange(e.target.value)}\n            placeholder="请输入搜索关键词"\n            className="search-box"\n          />\n          <div className="check-item-list">\n            <Checkbox\n              className="check-item"\n              checked={searchedFieldData.every(\n                (fieldValue) => !filtered[fieldValue],\n              )}\n              indeterminate={\n                searchedFieldData.some((fieldValue) => !filtered[fieldValue]) &&\n                !searchedFieldData.every((fieldValue) => !filtered[fieldValue])\n              }\n              onChange={(e) => {\n                const {\n                  target: { checked },\n                } = e;\n                setchanged((val) => ({ ...val, filter: true }));\n\n                if (checked) {\n                  setfiltered((old) => {\n                    const newValue = {};\n                    searchedFieldData.forEach((fieldValue) => {\n                      newValue[fieldValue] = false;\n                    });\n                    return newValue;\n                  });\n                } else {\n                  // 将全部过滤\n                  setfiltered((old) => {\n                    const newValue = {};\n                    searchedFieldData.forEach((fieldValue) => {\n                      newValue[fieldValue] = true;\n                    });\n\n                    return newValue;\n                  });\n                }\n              }}\n            >\n              {\'全选\'}\n            </Checkbox>\n\n            {searchedFieldData.map((item) => {\n              return (\n                <Checkbox\n                  className="check-item"\n                  checked={!filtered[item]}\n                  onChange={(e) => {\n                    setchanged((old) => ({ ...old, filter: true }));\n                    setfiltered((old) => ({\n                      ...old,\n                      [item]: !e.target.checked,\n                    }));\n                  }}\n                >\n                  {item}\n                </Checkbox>\n              );\n            })}\n          </div>\n        </div>\n      </Form.Item>\n    </Form>\n  );\n};\n\nfetch(\'https://assets.antv.antgroup.com/s2/basic-table-mode.json\')\n  .then((res) => res.json())\n  .then((res) => {\n    ReactDOM.render(<App data={res} />, document.getElementById(\'container\'));\n  });\n\ninsertCss(`\n  .antv-s2-data-preview-demo-modal .filter-item{\n    margin-top: 20px;\n  }\n  .antv-s2-data-preview-demo-modal .check-item-list{\n    display: flex;\n    flex-direction: column;\n  }\n  .ant-checkbox-wrapper.check-item {\n    margin-left: 0;\n  }\n  .antv-s2-data-preview-demo-modal .search-box{\n    margin-bottom: 5px\n  }\n`);\n',title:{zh:"数据预览表",en:"Data Preview Table"},filename:"index.tsx",isNew:!1},{id:"house",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/JgAFxd5G0/maifangfengmian1.gif",source:"import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Select, InputNumber, Space } from 'antd';\nimport {\n  every,\n  filter, isNil,\n  last,\n  map,\n  omit,\n} from 'lodash';\nimport { SheetComponent } from '@antv/s2-react';\nimport insertCss from 'insert-css';\n\nconst ID_SEPARATOR = '[&]';\nconst defaultHouseInfo = {\n  name: ['15#', '16#', '21#', '22#'],\n  unit: ['1单元', '2单元'],\n  building: [1, 2, 3, 4, 5],\n  nearStreet: [true, false],\n  property: ['公寓', '住宅'],\n  toward: ['东', '南', '西', '北'],\n  level: [\n    2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n    23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39,\n  ],\n  area: [92, 111, 114, 119, 120, 123, 125, 135, 138],\n};\nconst s2Options = {\n  width: 700,\n  height: 580,\n  pagination: {\n    pageSize: 50,\n    current: 1,\n  },\n  conditions: {\n    // 背景 (background) 字段标记\n    background: [\n      {\n        field: 'area',\n        mapping(value) {\n          if (value === 123 || value === 119) {\n            return {\n              // fill 是背景字段标记下唯一必须的字段，用于指定文本颜色\n              fill: '#b8e1ff',\n            };\n          }\n          return {\n            fill: '#fff',\n          };\n        },\n      },\n    ],\n  },\n};\nconst defaultSortParams = [\n  {\n    sortFieldId: 'name',\n    sortMethod: 'ASC',\n  },\n  {\n    sortFieldId: 'unit',\n    sortMethod: 'ASC',\n  },\n  {\n    sortFieldId: 'level',\n    sortFunc: (params) => {\n      const { data } = params;\n      return data.sort((a, b) => {\n        const aNum = last(a.split(ID_SEPARATOR));\n        const bNum = last(b.split(ID_SEPARATOR));\n        return aNum - bNum;\n      });\n    },\n  },\n];\nconst dataConfig = {\n  data: [],\n  describe: '如何使用 S2 买房',\n  fields: {\n    rows: [\n      'name',\n      'unit',\n      'building',\n      'level',\n      'nearStreet',\n      'toward',\n      'property',\n    ],\n    columns: [],\n    values: ['area'],\n    valueInCols: true,\n  },\n  meta: [\n    {\n      field: 'name',\n      name: '楼栋',\n    },\n    {\n      field: 'unit',\n      name: '单元号',\n    },\n    {\n      field: 'building',\n      name: '房号',\n    },\n    {\n      field: 'level',\n      name: '楼层',\n    },\n    {\n      field: 'property',\n      name: '房屋类型',\n    },\n    {\n      field: 'nearStreet',\n      name: '是否临街',\n    },\n    {\n      field: 'toward',\n      name: '朝向',\n    },\n    {\n      field: 'area',\n      name: '面积',\n    },\n    {\n      field: 'note',\n      name: '备注',\n    },\n    {\n      field: 'score',\n      name: '评分',\n    },\n  ],\n  sortParams: defaultSortParams,\n};\n\nconst SelectItem = (props) => {\n  const { data, dataName, onChange } = props;\n\n  return (\n    <Select\n      allowClear={true}\n      placeholder=\"全部\"\n      style={{ width: '150px' }}\n      onChange={(value) => {\n        onChange({\n          key: dataName,\n          value: value,\n        });\n      }}\n    >\n      {map(data, (item) => (\n        <Select.Option key={`${item}`} value={item}>\n          {`${item}`}\n        </Select.Option>\n      ))}\n    </Select>\n  );\n};\n\nconst RangeSelect = (props) => {\n  const { data, dataName, onChange } = props;\n  const min = Math.min(...data);\n  const max = Math.max(...data);\n  const [info, setInfo] = useState({ min, max });\n  const handleChange = (value, key) => {\n    const tempInfo = Object.assign({}, info);\n    tempInfo[key] = value;\n    setInfo(tempInfo);\n\n    onChange({\n      key: dataName,\n      value: [tempInfo.min, tempInfo.max],\n    });\n  };\n\n  return (\n    <Space>\n      <InputNumber\n        placeholder={'最小值'}\n        min={min}\n        max={max}\n        defaultValue={min}\n        onChange={(e) => handleChange(e, 'min')}\n      />\n      <InputNumber\n        placeholder={'最大值'}\n        min={min}\n        max={max}\n        defaultValue={max}\n        onChange={(e) => handleChange(e, 'max')}\n      />\n    </Space>\n  );\n};\n\nconst SelectList = (props) => {\n  const { filterData } = props;\n  const [filterInfo, setFilterInfo] = useState({});\n\n  const onChange = ({ key, value }) => {\n    let tempHouseInfo = Object.assign({}, filterInfo);\n    if (isNil(value)) {\n      tempHouseInfo = omit(tempHouseInfo, key);\n    } else {\n      tempHouseInfo[key] = value;\n    }\n    setFilterInfo(tempHouseInfo);\n    filterData(tempHouseInfo);\n  };\n\n  return (\n    <div className=\"select-list\">\n      {map(defaultHouseInfo, (item, key) => {\n        return (\n          <Space className=\"select-item\" key={key}>\n            <span className=\"select-label\"> {key}</span>\n            {key === 'area' || key === 'level' ? (\n              <RangeSelect data={item} dataName={key} onChange={onChange} />\n            ) : (\n              <SelectItem data={item} dataName={key} onChange={onChange} />\n            )}\n          </Space>\n        );\n      })}\n    </div>\n  );\n};\n\nconst Sheet = ({ data }) => {\n  const [dataSource, setDataSource] = useState(data);\n\n  const filterData = (filterInfo) => {\n    const result = filter(data, (item) => {\n      return every(filterInfo, (value, key) => {\n        if (key === 'area') {\n          return value[0] <= item.area && value[1] >= item.area;\n        }\n        if (key === 'level') {\n          return value[0] <= item.level && value[1] >= item.level;\n        }\n        if(key === 'nearStreet') {\n          console.log(item.nearStreet, 'item.nearStreet',  value, 'value');\n          console.log(item.nearStreet === value, 'item.nearStreet === value');\n        }\n        return item[key] === value;\n      });\n    });\n    setDataSource(result);\n  };\n\n  return (\n    <div>\n      <SelectList filterData={filterData} />\n      <SheetComponent\n        sheetType={'pivot'}\n        dataCfg={{ ...dataConfig, data: dataSource }}\n        options={s2Options}\n        showPagination={true}\n      />\n    </div>\n  );\n};\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/6420f338-9169-4b1f-b0f0-35f1a8295e67.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    ReactDOM.render(\n      <Sheet data={data} />,\n      document.getElementById('container'),\n    );\n  });\n\n// We use 'insert-css' to insert custom styles\n// It is recommended to add the style to your own style sheet files\n// If you want to copy the code directly, please remember to install the npm package 'insert-css\ninsertCss(`\n  .select-item {\n      margin: 5px 16px 0 0;\n  }\n  .select-list {\n      display: flex;\n      flex-wrap: wrap;\n      margin-bottom: 20px;\n  }\n  .select-label {\n    display: inline-block;\n    width: 80px;\n  }\n`);\n",title:{zh:"如何用 S2 买房",en:"How to buy a house with S2"},filename:"house.tsx",isNew:!1},{id:"excel",screenshot:"https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*RF2ZQoZqI80AAAAAAAAAAAAAARQnAQ",source:"import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\nimport 'antd/es/checkbox/style/index.css';\n\n\n// 初始化配置\nconst s2Options = {\n  width: 600,\n  height: 400,\n  showSeriesNumber: true,\n  tooltip: { showTooltip: false },\n  interaction: { enableCopy: true, hoverHighlight: false },\n  showDefaultHeaderActionIcon: false,\n};\n\n// 初始化数据\nconst s2DataCfg = {\n  fields: { columns: ['province', 'city', 'type', 'price'] },\n  sortParams: [],\n};\n\nconst App = ({ data }) => {\n  const S2Ref = useRef(null);\n  const [options, setOptions] = useState(s2Options);\n  const [dataCfg, setDataCfg] = useState({ ...s2DataCfg, data });\n\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <SheetComponent\n        ref={S2Ref}\n        dataCfg={dataCfg}\n        options={options}\n        sheetType=\"editable\"\n      />\n    </div>\n  );\n};\n\nfetch('https://assets.antv.antgroup.com/s2/basic-table-mode.json')\n  .then((res) => res.json())\n  .then((res) => {\n    ReactDOM.render(<App data={res} />, document.getElementById('container'));\n  });\n",title:{zh:"编辑模式",en:"Edit Mode"},filename:"excel.tsx",isNew:!1}],icon:"",id:"data-preview",title:{en:"Data Preview Table",zh:"数据预览表格"},api:{zh:"",en:""},childrenKey:"demos",order:5},{demos:[{id:"mosaic",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/CT6lTXeKB6/20690319-81f8-4847-9247-c1f7e7f2d9d1.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\n// more Info https://observablehq.com/@pearmini/mosaic-antv-s2\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/7f6ebbb4-ffeb-4f6c-a763-6faa8c0ccf7a.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 700,\n      height: 575,\n      frozenRowHeader: false,\n      conditions: {\n        background: [\n          {\n            field: 'color',\n            mapping: (fill) => ({ fill }),\n          },\n        ],\n      },\n      interaction: {\n        hoverHighlight: false,\n        hoverFocus: false,\n      },\n      style: {\n        layoutWidthType: 'compact',\n        colCfg: {\n          height: 0,\n          widthByFieldValue: {\n            color: 23,\n          },\n        },\n        cellCfg: {\n          height: 23,\n        },\n      },\n    };\n\n    const customTheme = {\n      rowCell: {\n        cell: {\n          backgroundColor: dataCfg.data[0].color,\n          horizontalBorderColorOpacity: 0,\n          verticalBorderColorOpacity: 0,\n        },\n      },\n      dataCell: {\n        text: {\n          opacity: 0,\n        },\n        cell: {\n          horizontalBorderColorOpacity: 0,\n          verticalBorderColorOpacity: 0,\n        },\n      },\n      splitLine: {\n        horizontalBorderColorOpacity: 0,\n        verticalBorderColorOpacity: 0,\n      },\n      background: {\n        color: dataCfg.data[0].color,\n      },\n      scrollBar: {\n        size: 0,\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={dataCfg}\n        options={s2Options}\n        themeCfg={{ theme: customTheme }}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"马赛克",en:"Mosaic"},filename:"mosaic.tsx",isNew:!1},{id:"time-spend-abstract",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/lN8USZvMEV/f6b5e06f-5def-4db8-a9c8-826e347d0fa1.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport insertCss from 'insert-css';\nimport { SheetComponent } from '@antv/s2-react';\nimport { DataCell } from '@antv/s2';\nimport '@antv/s2-react/dist/style.min.css';\n\nconst paletteLegendMap = [\n  {\n    text: '睡觉',\n    img: 'https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*zGyiSa2A8ZMAAAAAAAAAAAAAARQnAQ',\n  },\n  {\n    text: '工作',\n    img: 'https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*RdyWRpg3hRAAAAAAAAAAAAAAARQnAQ',\n  },\n\n  {\n    text: '上学',\n    img: 'https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*1p5iTYDCkKEAAAAAAAAAAAAAARQnAQ',\n  },\n  {\n    text: '吃饭',\n    img: 'https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*XHHcSZxmR7gAAAAAAAAAAAAAARQnAQ',\n  },\n  {\n    text: '学习',\n    img: 'https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*1p5iTYDCkKEAAAAAAAAAAAAAARQnAQ',\n  },\n  {\n    text: '娱乐',\n    img: 'https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*ZRaUT55QCaoAAAAAAAAAAAAAARQnAQ',\n  },\n  {\n    text: '运动',\n    img: 'https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*xpO5Sawk8YIAAAAAAAAAAAAAARQnAQ',\n  },\n  {\n    text: '其他',\n    img: 'https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*e5A3SKifw1EAAAAAAAAAAAAAARQnAQ',\n  },\n];\n// 自定义单元格\nclass CustomDataCell extends DataCell {\n  drawTextShape() {\n    const { fieldValue } = this.meta;\n    const url =\n      paletteLegendMap.find((v) => v.text === fieldValue)?.img ??\n      'https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*e5A3SKifw1EAAAAAAAAAAAAAARQnAQ';\n    const img = new Image();\n    img.src = url;\n    const { x, y, width, height } = this.meta;\n    img.onload = () => {\n      this.textShape = this.addShape('image', {\n        attrs: {\n          x: x + (width - img?.width) / 2,\n          y: y + (height - img?.height) / 2,\n          width: img?.width ?? width,\n          height: img?.height ?? height,\n          img: url,\n        },\n      });\n    };\n  }\n}\n\nfetch('https://assets.antv.antgroup.com/s2/time-spend.json')\n  .then((res) => res.json())\n  .then((s2DataConfig) => {\n    const s2Theme = {\n      colCell: {\n        text: {\n          opacity: 0,\n        },\n        bolderText: {\n          opacity: 0,\n        },\n        cell: {\n          backgroundColor: '#020138',\n        },\n      },\n      rowCell: {\n        text: {\n          opacity: 0,\n        },\n        bolderText: {\n          opacity: 0,\n        },\n        cell: {\n          horizontalBorderColorOpacity: 0,\n          verticalBorderColorOpacity: 0,\n          backgroundColor: '#020138',\n          interactionState: {\n            // -------------- hover -------------------\n            hover: {\n              backgroundColor: 'rgba(255,255,255,0.18)',\n            },\n            // -------------- selected -------------------\n            selected: {\n              backgroundColor: 'rgba(255,255,255,0.18)',\n            },\n          },\n        },\n      },\n      dataCell: {\n        cell: {\n          horizontalBorderColorOpacity: 0,\n          verticalBorderColorOpacity: 0,\n          crossBackgroundColor: '#020138',\n          backgroundColor: '#020138',\n          interactionState: {\n            // -------------- hover -------------------\n            hover: {\n              backgroundColor: 'rgba(255,255,255,0.18)',\n            },\n            // -------------- keep hover -------------------\n            hoverFocus: {\n              backgroundColor: 'rgba(255, 255, 255, 0.18)',\n              borderOpacity: 0,\n            },\n            // -------------- selected -------------------\n            selected: {\n              backgroundColor: 'rgba(255,255,255,0.18)',\n            },\n          },\n        },\n      },\n      cornerCell: {\n        bolderText: {\n          opacity: 0,\n        },\n        cell: {\n          horizontalBorderColorOpacity: 0,\n          verticalBorderColorOpacity: 0,\n          backgroundColor: '#020138',\n        },\n      },\n      splitLine: {\n        horizontalBorderColorOpacity: 0,\n        verticalBorderColorOpacity: 0,\n      },\n      background: {\n        color: '#020138',\n      },\n    };\n\n    const s2Options = {\n      width: 1150,\n      height: 720,\n      showDefaultHeaderActionIcon: false,\n      dataCell: (viewMeta) => {\n        return new CustomDataCell(viewMeta, viewMeta?.spreadsheet);\n      },\n      interaction: {\n        hoverHighlight: false,\n      },\n      style: {\n        layoutWidthType: 'compact',\n        colCfg: {\n          hideMeasureColumn: true,\n          height: 0,\n        },\n        cellCfg: {\n          height: 80,\n        },\n      },\n    };\n    const PaletteLegend = () => (\n      <div className=\"palette\">\n        {paletteLegendMap.map((value, key) => (\n          <div key={key} className=\"palette-group\">\n            <img className=\"palette-img\" src={value.img} />\n            <span className=\"palette-text\">{value.text}</span>\n          </div>\n        ))}\n      </div>\n    );\n    ReactDOM.render(\n      <div className=\"sheet-wrapper\">\n        <PaletteLegend />\n        <SheetComponent\n          dataCfg={s2DataConfig}\n          options={s2Options}\n          sheetType=\"pivot\"\n          themeCfg={{ theme: s2Theme }}\n        />\n      </div>,\n      document.getElementById('container'),\n    );\n  });\n\ninsertCss(`\n  .sheet-wrapper {\n    background: #010138;\n    padding: 16px;\n  }\n  .palette {\n    display: flex;\n    width: 100%;\n    overflow: hidden;\n    margin-bottom: 16px;\n    margin-left: 88px;\n  }\n  .palette-group {\n    display: flex;\n  }\n  .palette-img {\n    width: auto;\n    height: 20px;\n  }\n  .palette-text {\n    color: #FFF;\n    width: 50px;\n    font-size: 12px;\n    padding-left: 8px;\n  }\n`);\n",title:{zh:"想如何度过一天 (抽象版)",en:"How to spend the day"},filename:"time-spend-abstract.tsx",isNew:!1},{id:"lost-text",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*3WDCR7PZY6MAAAAAAAAAAAAADmJ7AQ/original",source:"/* eslint-disable max-classes-per-file */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport { Tag } from 'antd';\nimport {\n  BaseEvent,\n  CellTypes,\n  getTheme,\n  InterceptType,\n  S2Event,\n  CornerCell,\n} from '@antv/s2';\n\nimport '@antv/s2-react/dist/style.min.css';\n\nconst Theme = {\n  rowCell: {\n    text: {\n      opacity: 0,\n    },\n    bolderText: {\n      opacity: 0,\n    },\n    measureText: {\n      opacity: 0,\n    },\n  },\n  colCell: {\n    text: {\n      opacity: 0,\n    },\n    bolderText: {\n      opacity: 0,\n    },\n    measureText: {\n      opacity: 0,\n    },\n  },\n  dataCell: {\n    text: {\n      opacity: 0,\n    },\n  },\n};\n\nclass CustomCornerCell extends CornerCell {\n  drawBackgroundShape() {\n    this.addShape('rect', {\n      attrs: {\n        ...this.getCellArea(),\n        fill: '#E0E9FD',\n      },\n    });\n  }\n\n  getCornerText() {\n    return '👍🏻';\n  }\n}\n\nclass CustomInteraction extends BaseEvent {\n  timer = null;\n\n  count = 0;\n\n  changeCell(cellType: CellTypes) {\n    this.count++;\n\n    const defaultTheme = getTheme(null)?.[cellType];\n    this.spreadsheet.setTheme({\n      [cellType]: defaultTheme,\n    });\n    this.spreadsheet.render(false);\n\n    if (this.count >= 3) {\n      clearInterval(this.timer);\n      this.showSuccessTips();\n    }\n  }\n\n  resetCell() {\n    this.count = 0;\n    this.spreadsheet.setTheme(Theme);\n    this.spreadsheet.render(false);\n  }\n\n  showSuccessTips() {\n    const rect = this.spreadsheet.getCanvasElement().getBoundingClientRect();\n\n    this.spreadsheet.showTooltip({\n      position: {\n        x: rect.width / 2 + rect.left,\n        y: rect.height / 2 + rect.top,\n      },\n      content: (\n        <div\n          style={{\n            padding: 20,\n            textAlign: 'center',\n          }}\n        >\n          <h3>💐 通关啦 💐</h3>\n          <p>\n            S2\n            多维交叉分析表格是多维交叉分析领域的表格解决方案，数据驱动视图，提供底层核心库、基础组件库、业务场景库，具备自由扩展的能力，让开发者既能开箱即用，也能基于自身场景自由发挥。\n          </p>\n          <p>\n            <a href=\"https://s2.antv.antgroup.com\" target=\"__blank\">\n              前往官网 https://s2.antv.antgroup.com/\n            </a>\n          </p>\n        </div>\n      ),\n    });\n    this.spreadsheet.interaction.addIntercepts([InterceptType.HOVER]);\n  }\n\n  bindEvents() {\n    // 角头: 一键三连\n    this.addCornerCellInteraction();\n    // 行头: 多选全部偶数行\n    this.addRowCellInteraction();\n    // 列头: 调整列宽/刷选全部\n    this.addColCellInteraction();\n    // 数值: 键盘方向键移动端选中单元格到右下角\n    this.addDataCellInteraction();\n  }\n\n  addCornerCellInteraction() {\n    const countMap: Record<number, CellTypes> = {\n      0: CellTypes.ROW_CELL,\n      1: CellTypes.COL_CELL,\n      2: CellTypes.DATA_CELL,\n    };\n\n    this.spreadsheet.on(S2Event.CORNER_CELL_MOUSE_DOWN, () => {\n      clearInterval(this.timer);\n      this.resetCell();\n\n      this.timer = setInterval(() => {\n        this.changeCell(countMap[this.count]);\n      }, 1000);\n    });\n\n    this.spreadsheet.on(S2Event.CORNER_CELL_MOUSE_UP, () => {\n      clearInterval(this.timer);\n\n      if (this.count < 3) {\n        this.resetCell();\n      }\n    });\n  }\n\n  addDataCellInteraction() {\n    this.spreadsheet.on(S2Event.DATA_CELL_SELECT_MOVE, (cells) => {\n      const { colIndex, rowIndex } = cells[0];\n\n      const isLastCell = colIndex === 3 && rowIndex === 7;\n      if (isLastCell) {\n        this.changeCell(CellTypes.DATA_CELL);\n      }\n    });\n  }\n\n  addColCellInteraction() {\n    this.spreadsheet.on(S2Event.LAYOUT_RESIZE_COL_WIDTH, ({ info }) => {\n      const rules = [6, 66, 666];\n      if (rules.includes(info.resizedWidth)) {\n        this.changeCell(CellTypes.COL_CELL);\n      }\n    });\n\n    this.spreadsheet.on(S2Event.COL_CELL_BRUSH_SELECTION, (colCells) => {\n      const isAllSelected =\n        colCells.length === this.spreadsheet.getColumnNodes().length;\n      if (isAllSelected) {\n        this.changeCell(CellTypes.COL_CELL);\n      }\n    });\n  }\n\n  addRowCellInteraction() {\n    this.spreadsheet.on(S2Event.GLOBAL_SELECTED, (cells) => {\n      const selectedOddRowCells = cells.filter((cell) => {\n        const meta = cell.getMeta();\n        return cell.cellType === CellTypes.ROW_CELL && meta.rowIndex % 2 !== 0;\n      });\n\n      const isAllOddRowCellsSelected = selectedOddRowCells.length === 4;\n      if (isAllOddRowCellsSelected) {\n        this.changeCell(CellTypes.ROW_CELL);\n      }\n    });\n  }\n}\n\nexport const s2Options = {\n  debug: true,\n  width: 600,\n  height: 400,\n  showSeriesNumber: false,\n  showDefaultHeaderActionIcon: false,\n  interaction: {\n    enableCopy: true,\n    // 防止 mac 触摸板横向滚动触发浏览器返回, 和移动端下拉刷新\n    overscrollBehavior: 'none',\n    brushSelection: {\n      data: true,\n      col: true,\n      row: true,\n    },\n    hoverFocus: false,\n    hoverHighlight: false,\n    customInteractions: [\n      {\n        key: 'CustomInteraction',\n        interaction: CustomInteraction,\n      },\n    ],\n  },\n  tooltip: {\n    showTooltip: false,\n  },\n  hierarchyType: 'grid',\n  style: {\n    rowCfg: {\n      width: 100,\n    },\n    cellCfg: {\n      width: 50,\n      height: 30,\n    },\n  },\n  cornerCell: (...args) => new CustomCornerCell(...args),\n};\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={dataCfg}\n        options={s2Options}\n        themeCfg={{ theme: Theme }}\n        header={{\n          description: (\n            <>\n              <h4>\n                <span>单元格的文字都消失了, 想办法让文字全部显示出来.</span>\n                <a\n                  href=\"https://codesandbox.io/s/brave-pine-kki1xp?file=/src/index.tsx\"\n                  target=\"__blank\"\n                >\n                  查看代码\n                </a>\n              </h4>\n              <ul>\n                <li>\n                  <Tag>\n                    列头可以 \"调整\" 成三个尺码: s (6px) M (66px) L (666px)\n                  </Tag>\n                </li>\n                <li>\n                  <Tag>列头10个单元格可以 \"圈\" 在一起</Tag>\n                </li>\n                <li>\n                  <Tag>行头多选, 让它显示斑马纹</Tag>\n                </li>\n                <li>\n                  <Tag>有一个数值单元格喜欢待在角落 ↑ ↓ ← →</Tag>\n                </li>\n                <li>\n                  搞不定, 试试看看\n                  <a\n                    href=\"https://s2.antv.antgroup.com/manual/advanced/interaction/basic\"\n                    target=\"__blank\"\n                  >\n                    基础交互\n                  </a>\n                  章节或试试 <Tag>长按一键三连</Tag>\n                </li>\n              </ul>\n            </>\n          ),\n        }}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"消失的文字 (交互小游戏)",en:"Lost text"},filename:"lost-text.tsx",isNew:!1}],icon:"",id:"art",title:{en:"Art Work",zh:"💡灵光乍现"},api:{zh:"",en:""},childrenKey:"demos",order:6},{demos:[{id:"basic",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/qOOrO1WEZr/41e23d54-9a21-4ef3-9609-aa46ca871d83.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { compact } from 'lodash';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nconst disableColor = '#d3d7d4';\nconst colors = [\n  '#62BF7F',\n  '#8ECB7D',\n  '#A1D17F',\n  '#C9DC81',\n  '#FBDD80',\n  '#FBB17B',\n  '#FA8672',\n  '#FB6A6D',\n];\n\nfunction getRange(data) {\n  const values = data.map((d) => d.value);\n  const compactValue = compact(values);\n  return {\n    min: Math.min(...compactValue),\n    max: Math.max(...compactValue),\n  };\n}\n\nfunction getIndex(fieldValue, rawData) {\n  const { min, max } = getRange(rawData);\n  const step = Math.floor((max - min) / (colors.length - 1));\n  return Math.floor((fieldValue - min) / step);\n}\n\nfunction getDataConfig(rawData) {\n  return {\n    fields: {\n      rows: ['size', 'name'],\n      columns: ['time'],\n      values: ['value'],\n    },\n    meta: [\n      {\n        field: 'size',\n        name: '数据规模',\n      },\n      {\n        field: 'name',\n        name: '框架名称',\n      },\n      {\n        field: 'time',\n        name: '实验次数',\n      },\n      {\n        field: 'value',\n        name: '渲染时间',\n      },\n    ],\n    data: rawData,\n  };\n}\n\nfunction getOptions(rawData) {\n  return {\n    width: 600,\n    height: 200,\n    interaction: {\n      selectedCellsSpotlight: false,\n      hoverHighlight: false,\n    },\n    conditions: {\n      background: [\n        {\n          field: 'value',\n          mapping(fieldValue) {\n            const index = getIndex(fieldValue, rawData);\n            return {\n              fill: fieldValue ? colors[index] : disableColor,\n            };\n          },\n        },\n      ],\n    },\n  };\n}\n\nfetch('https://assets.antv.antgroup.com/s2/compare.json')\n  .then((res) => res.json())\n  .then((data) => {\n    ReactDOM.render(\n      <div>\n        <h3>1000 数据规模表格渲染时间对比</h3>\n        <SheetComponent\n          dataCfg={getDataConfig(data['1000'])}\n          options={getOptions(data['1000'])}\n          sheetType=\"pivot\"\n        />\n        <h3>10,000 数据规模表格渲染时间对比</h3>\n        <SheetComponent\n          dataCfg={getDataConfig(data['10000'])}\n          options={getOptions(data['10000'])}\n          sheetType=\"pivot\"\n        />\n        <h3>1,000,000 数据规模表格渲染时间对比</h3>\n        <SheetComponent\n          dataCfg={getDataConfig(data['1000000'])}\n          options={getOptions(data['1000000'])}\n          sheetType=\"pivot\"\n        />\n      </div>,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"性能对比表",en:"Performance Compare"},filename:"basic.tsx",isNew:!1},{id:"pivot",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/aQQMy0LpzT/scroll-pivot.gif",source:"import { PivotSheet } from '@antv/s2';\n\nconst s2Options = {\n  width: 600,\n  height: 480,\n};\n\nexport function generateRawData(row, col) {\n  const res = [];\n  const rowKeys = Object.keys(row);\n  const colKeys = Object.keys(col);\n\n  for (let i = 0; i < row[rowKeys[0]]; i++) {\n    for (let j = 0; j < row[rowKeys[1]]; j++) {\n      for (let m = 0; m < col[colKeys[0]]; m++) {\n        for (let n = 0; n < col[colKeys[1]]; n++) {\n          res.push({\n            province: `p${i}`,\n            city: `c${j}`,\n            type: `type${m}`,\n            subType: `subType${n}`,\n            number: i * n,\n          });\n        }\n      }\n    }\n  }\n\n  return res;\n}\n\nconst s2DataConfig = {\n  fields: {\n    rows: ['type', 'subType'],\n    columns: ['province', 'city'],\n    values: ['number'],\n  },\n  data: generateRawData(\n    { province: 10, city: 100 },\n    { type: 10, sub_type: 100 },\n  ),\n};\nconst container = document.getElementById('container');\n\nconst s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\ns2.render();\n",title:{zh:"100w条数据性能表现-透视表",en:"Performance Pivot Sheet"},filename:"pivot.tsx",isNew:!1},{id:"table",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/vkrof17e%24O/scroll-table.gif",source:"import { TableSheet } from '@antv/s2';\n\nconst s2Options = {\n  width: 600,\n  height: 480,\n  showSeriesNumber: true,\n};\n\nexport function generateRawData(row, col) {\n  const res = [];\n\n  const rowKeys = Object.keys(row);\n  const colKeys = Object.keys(col);\n\n  for (let i = 0; i < row[rowKeys[0]]; i++) {\n    for (let j = 0; j < row[rowKeys[1]]; j++) {\n      for (let m = 0; m < col[colKeys[0]]; m++) {\n        for (let n = 0; n < col[colKeys[1]]; n++) {\n          res.push({\n            province: `p${i}`,\n            city: `c${j}`,\n            type: `type${m}`,\n            subType: `subType${n}`,\n            number: i * n,\n          });\n        }\n      }\n    }\n  }\n\n  return res;\n}\n\nconst s2DataConfig = {\n  fields: {\n    columns: ['province', 'city', 'type', 'subType', 'number'],\n  },\n  data: generateRawData(\n    { province: 100, city: 10 },\n    { type: 100, sub_type: 10 },\n  ),\n};\n\nconst container = document.getElementById('container');\n\nconst s2 = new TableSheet(container, s2DataConfig, s2Options);\n\ns2.render();\n",title:{zh:"100w条数据性能表现-明细表",en:"Performance Table Sheet"},filename:"table.tsx",isNew:!1}],icon:"",id:"performance-compare",title:{en:"Performance compare",zh:"性能对比表"},api:{zh:"",en:""},childrenKey:"demos",order:6}],childrenKey:"examples"},{id:"basic",title:{zh:"表格形态",en:"Basic Sheets"},icon:"facet",examples:[{demos:[{id:"grid",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/a6zSe1gvvy/f97ed6ec-0a5d-49b7-8492-754611d0aea6.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      // 冻结行头\n      // frozenRowHeader: true\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"平铺模式",en:"Grid mode"},filename:"grid.ts",isNew:!1},{id:"tree",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/VnOOCNzUqk/a68995cb-7e96-452a-a0da-faf4b1f9d59b.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      hierarchyType: 'tree',\n      style: {\n        // 折叠全部\n        // hierarchyCollapse: true,\n\n        // 折叠浙江省下面所有的城市\n        collapsedRows: {\n          'root[&]浙江省': true,\n        },\n      },\n\n      // 冻结行头\n      // frozenRowHeader: true\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"树状模式",en:"Tree mode"},filename:"tree.ts",isNew:!1}],icon:"",id:"pivot",title:{en:"Basic pivot table",zh:"基础透视表"},api:{zh:"# S2DataConfig \n \n \nDemo of the DataConfig \n \n```ts \nconst s2DataConfig = { \n  data: [], \n  meta: [], \n  sortParams: [], \n  fields: { \n    rows: [], \n    columns: [], \n    values: [] \n  } \n} \n``` \n \nTabular data configuration \n \n| parameter  | illustrate                                                      | type                        | Defaults | required | \n| :--------- | :-------------------------------------------------------------- | :-------------------------- | :------- | :------- | \n| data       | Raw data                                                        | [Data\\[\\]](#data)           |          | ✓        | \n| fields     | dimension index                                                 | [Fields](#fields)           |          | ✓        | \n| totalData  | Total/Subtotal Data                                             | [Data\\[\\]](#data)           |          |          | \n| meta       | Field metadata, configurable field aliases and value formatting | [Meta\\[\\]](#meta)           |          |          | \n| sortParams | Sorting parameter configuration                                 | [SortParam\\[\\]](#sortparam) |          |          | \n \n### Data \n \nstring | number | [MiniChartData](#minichartdata) | [MultiData](#multidata) **required** , *default: null* \n \nFunction description: Set the data source data source of the table, for example: \n \n```ts \nconst data = [ \n  { \n    area: '东北', \n    province: '吉林', \n    city: '白山', \n    type: '办公用品', \n    subType: '纸张', \n    cost: '2', \n  }, \n  { \n    area: '东北', \n    province: '吉林', \n    city: '白山', \n    type: '办公用品', \n    subType: '笔', \n    cost: '3', \n  } \n]; \n``` \n \n### Fields \n \nobject is **required** , *default: null* \n \nFunction description: Configure the dimension field of the table, that is, the corresponding row and column dimensions \n \n| Configuration item name | illustrate                                                           | type                                  | Defaults | required | \n| :---------------------- | :------------------------------------------------------------------- | :------------------------------------ | :------- | :------- | \n| rows                    | list of row dimensions                                               | `string[]`                            | `[]`     |          | \n| customTreeItems         | Customize the header directory tree                                  | [CustomTreeItem[]](#customtreeitem) |          |          | \n| columns                 | list of column dimensions                                            | [Columns[]](#columns) | `[]`     |          | \n| values                  | List of Metric Dimensions                                            | `string[]`                            | `[]`     |          | \n| valueInCols             | Whether the indicator dimension is at the column header              | `boolean`                             | `true`   |          | \n| customValueOrder        | Position order of custom metric dimensions in row and column headers  [example](/en/examples/custom/custom-layout/#custom-value-order) | `number`                              | -        |          | \n \n### Meta \n \narray object **required** , *default: null* \n \nFunction description: Field metadata, configurable field alias and value formatting. \n \n| parameter   | illustrate | type                           | Defaults             | required              | \n| :---------- | :---- | :----------------------------- | :------------------- | :-------------------- | \n| field       | field id | `string`  |  |                       | \n| name   | Field Name  | `string`  |  |   | \n| description | Field description, which will be displayed in the tooltip corresponding to the row header, column header, and cell   | `string` |   |   | \n| formatter   | Formatting cells, row headers and column headers support formatting, but corner headers do not support formatting. The second parameter exists only for cells. Numerical fields: generally used to format numeric units Text fields: generally used as aliases for field enumeration values The second parameter will be passed in in the following situations: data cell formatting, copy/export, tooltip display ( **and only when selected When there are multiple cells, the data type is an array** ) | \\`(value: unknown, data?: Data | Data\\[], meta?: Node | ViewMeta) => string\\` | \n \n### MiniChartData \n \n \n#### renderMiniChart \n \nDraw mini charts in cells (support line charts, bullet charts, histograms) \n \n```ts \n renderMiniChart = (cell: S2CellType, data?: BaseChartData | BulletValue) => void; \n``` \n \n#### BaseChartData \n \nLine chart, histogram data configuration items, data format refer to `g2` \n \n| parameter      | illustrate                                                                                                   | type                     | required | Defaults | \n| -------------- | ------------------------------------------------------------------------------------------------------------ | ------------------------ | -------- | -------- | \n| type           | mini-chart type                                                                                              | `string` (line/bar)      | ✓        |          | \n| encode         | Encoding method, declare the corresponding column data bound to the x position channel or y position channel | `{x: string; y: string}` | ✓        |          | \n| data           | Raw data                                                                                                     | [Data\\[\\]](#data)        |          | ✓        | \n| \\[key: string] | Other transparent fields for customized display of custom cells                                              | `unknown`                |          |          | \n \n#### BulletValue \n \nBullet chart data configuration items \n \n| parameter      | illustrate                                                      | type              | required | Defaults | \n| -------------- | --------------------------------------------------------------- | ----------------- | -------- | -------- | \n| type           | mini-chart type                                                 | `string` (bullet) | ✓        | bullet   | \n| measure        | current indicator                                               | `number/string`   | ✓        |          | \n| target         | target value                                                    | `number/string`   | ✓        |          | \n| \\[key: string] | Other transparent fields for customized display of custom cells | `unknown`         |          |          | \n \n \n### MultiData \n \nobject is **required** , *default: null* \n \nFunction description: used to support custom data cell rendering of multiple indicator types. Example: [Trend Analysis Table](/examples/react-component/sheet#strategy) \n \n| Configuration item name | illustrate                                                      | type      | Defaults        | required | \n| :---------------------- | :-------------------------------------------------------------- | :-------- | :-------------- | :------- | \n| values                  | The formatted data is directly displayed in dataCfg             | \\`(string | number)\\[]\\[]\\` | ✓        | \n| originalValues          | raw data, for raw data export                                   | \\`(string | number)\\[]\\[]\\` |          | \n| label                   | Used as a subtitle of a cell, displayed on a separate line      | `string`  |                 |          | \n| \\[key: string]          | Other transparent fields for customized display of custom cells | `unknown` | \\`\\`            |          | \n \n \n### SortParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`     | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）         | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`                              | -      |      | \n| type          | 组内排序用来显示 icon （透视表适用）          | `string`                              | -      |      | \n| sortFunc      | 自定义排序的 function                        | (params: [SortFuncParam](#sortfuncparam)) => `string[]` | -      |      | \n \n#### SortFuncParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`    | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）      | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`    | -      |      | \n| type          | 组内排序用来显示 icon（透视表适用）             | `string`                              | -      |      | \n| data          | 当前排序数据列表                            | `Array<string \\| Record<string, any>>` | -      |      | \n \n \n \n### CustomTreeItem \n \n[详细说明](/docs/manual/advanced/custom/category-tree) [例子](/examples/custom/custom-tree#custom-tree) \n \n功能描述：自定义树状结构的配置，兼容 [antd Tree](https://ant.design/components/tree-cn/) 数据配置项； \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| key | 当前节点唯一标识 | `string` |    | ✓ | \n| title | 当前节点展示名 | `string` |    | ✓ | \n| collapsed | 节点是否收起（只会在自身代表非叶子节点生效） | `boolean` |  `false`  |  | \n| description | 节点的额外描述信息，在对应行头的 tooltip 中展示 | `string` |    |  | \n| children | 子节点 | [CustomTreeItem[]](#custom-tree-item) |    |  | \n \n \n### Columns \n \n`Array<ColumnNode | string>` \n \n列配置数组，在明细表模式下支持使用 [ColumnNode](#columnnode) 结构来描述列分组关系 \n \n### ColumnNode \n \n| 属性名称 | 说明     | 类型   | 默认值 | 必选 | \n| ------- | ---------| -------| ------|------| \n| name | 列字段 id 或分组 id   | string |       | ✓ | \n| children | 分组下面的子级  | Array\\<ColumnNode \\| string\\> |       |  | \n \n \n# S2Options \n \n \nForm parameter configuration \n \n\\| parameter | type | required | default value | function description| | :-- | :-- | :-: | :-- | :-- | --- | `number` | width| | height | `number` | | 480 | table height| | debug | `boolean` | | `false` | whether to enable debug mode| `grid` | hierarchyType | `grid` | `tree` | `customTree` | grid structure, tree: tree structure. [customTree](#tooltip) : custom tree structure | | conditions | [Conditions](#conditions) | | | condition pattern configuration | [](#interaction)| totals | [Totals](#totals) | | | | | Table Interaction Configuration| | pagination | [Pagination](#pagination) | | | `false` Configuration| `boolean` | `true` | `boolean` | | `false` | `boolean` | | `true` | `false` to display the default row header action icon | `showDefaultHeaderActionIcon` | [headerActionIcons](#headeractionicon) [|](#customsvgicon) `false` | custom svg icon| | style | [Style](#style) | | | cell style settings, such as layout type, width and height, margin, whether to hide the value column header, etc. | | frozenRowCount | `number` | | | the number of frozen rows, from counting from top (valid for schedules) | | frozenColCount | `number` | | | number of frozen columns, counting from left (valid for schedules) | | frozenTrailingRowCount | `number` | | | number of frozen rows, counting from bottom ( list is valid) | | frozenTrailingColCount | `number` | | | the number of frozen columns, counting from the right side (schedule is valid) | | `true` | `boolean` | | Blurred font rendering on high-definition retina screens| | mergedCellsInfo | [MergedCellInfo\\[\\]\\[\\]](#mergedcellinfo) | | | merged cell information| | placeholder | `(meta: Record<string, any>) => string | string` | | | fill content of empty cells | | cornerText | string | | | custom corner header text (valid when custom tree `hierarchyType: customTree` ) | | The text of the virtual value field of the corner head (valid when the value is the row header, replace the two words \"value\") | | dataCell | [DataCellCallback](#datacellcallback) | | | custom cell | | cornerCell | [CellCallback](#cellcallback) | | | custom cornerCell | | rowCell | [CellCallback](#cellcallback) | | | custom row header cell | | colCell | [CellCallback](#cellcallback) | | | custom column header cell | | cornerHeader | [CornerHeaderCallback](#cornerheadercallback) | | | custom corner header | | [layoutHierarchy](#layouthierarchy) | struct | | [layoutArrange](#layoutdataposition) | [LayoutArrange](#layoutarrange) | | | custom sort order | | layoutCoordinate | [layoutCoordinate](#layoutcoordinate) | [|](#filterdataitemcallback) | | `false` | [MappingDataItemCallback](#mappingdataitemcallback) | | | Convert data for tooltip display| | dataSet | [DataSet](#dataset) | | | custom data set| `transform` | supportCSSTransform | `boolean` | , mouse coordinates respond incorrectly| | devicePixelRatio | `number` | | `window.devicePixelRatio` | custom device pixel ratio| \n \n \n## Interaction \n \n| 参数    | 说明   | 类型                                        | 默认值   |        必选        | \n| -------- | ----------- |-------------------------------------------| -------- | ---------------- | \n| linkFields  | 标记字段为链接样式，用于外链跳转  | `string[]` \\| (meta: [Node](/docs/api/basic-class/node) \\| ViewMeta) => boolean    |    |    | \n| selectedCellsSpotlight               | 是否开启选中高亮聚光灯效果    | `boolean`                                 | `false`      |                  | \n| hoverHighlight                       | 鼠标悬停时高亮当前单元格，以及所对应的行头，列头<br/>rowHeader：是否高亮悬停格子所在行头<br/>colHeader：是否高亮悬停格子所在列头<br/>rowCells：是否高亮悬停格子所在行<br/>colCells：是否高亮悬停格子所在列<br/>true：同 `{rowHeader: true, colHeader: true, currentRow: true, currentCol: true}`                                                                                                                 | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, rowCells?: boolean, colCells?: boolean}`                                 | `true`                                                |                  | \n| hoverFocus                           | 鼠标悬停在当前单元格超过默认 800ms 后，保持当前高亮，显示 tooltip，悬停时间通过设置 `duration` 来控制   | `boolean  \\| {duration: number}`                                   |      `true`      |       | \n| hiddenColumnFields                   | 用于配置默认隐藏的列，透视表需要配置列头唯一 id, 明细表配置列头 field 字段即可                                                                                          | `string[]`                                |                                                       |                  | \n| enableCopy                           | 是否允许复制                                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| copyWithHeader                       | 复制数据是否带表头信息                                                                                                                            | `boolean`                                 | `false`                                               |                  | \n| copyWithFormat                       | 是否使用 field format 格式复制                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| customInteractions                   | 自定义交互 [详情](/docs/manual/advanced/interaction/custom)                                                                                | [CustomInteraction[]](#custominteraction) |                                                       |                  | \n| scrollSpeedRatio                     | 用于控制滚动速率，分水平和垂直两个方向，默认为 1                                                                                                              | [ScrollSpeedRatio](#scrollspeedratio)     |                                                       |                  | \n| autoResetSheetStyle                  | 用于控制点击表格外区域和按下 esc 键时是否重置交互状态                                                                                                          | `boolean`                                 | `true`                                                |                  | \n| resize                               | 用于控制 resize 热区是否显示     | `boolean`  \\| [ResizeInteractionOptions](#resizeinteractionoptions) |      `true`      |       | \n| brushSelection         | 是否允许单元格（包含行头，列头，数值单元格）刷选。    | `boolean` \\|  [BrushSelection](#brushSelection)  | `true`                         |     |  1.29.0 后支持 [BrushSelection](#brushSelection)   | \n| multiSelection                       | 是否允许多选 （包含行头，列头，数值单元格）                                                                                                                 | `boolean`                                 | `true`                                                |                  | \n| rangeSelection                       | 是否允许区间快捷多选                                                                                                                             | `boolean`                                 | `true`                                                |                  | \n| scrollbarPosition                    | 用于控制滚动条展示在内容区边缘还是画布边缘                                                                                                                  | `content \\| canvas`                                              |    `content`     |   | \n| eventListenerOptions                 | 事件监听函数 `addEventListener` 的 [可选项配置](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener), 可控制事件从冒泡阶段还是捕获阶段触发 | `false`                                   |                                                       | \n| selectedCellHighlight                | 选中格子后的高亮行为<br/>rowHeader：是否高亮选中格子所在行头<br/>colHeader：是否高亮选中格子所在列头<br/>currentRow：是否高亮选中格子所在行<br/>currentCol：是否高亮选中格子所在列<br/>true：同{rowHeader: true, colHeader: true}     | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, currentRow?: boolean, currentCol?: boolean }` | `false`                                               |                  | \n| overscrollBehavior                   | 控制滚动至边界的行为，可禁用浏览器的默认滚动行为。[详情](/docs/manual/advanced/interaction/basic/#修改滚动至边界行为)  | `auto \\| contain \\| none \\| null`  |  `auto` | \n| hoverAfterScroll                   | 滚动结束后是否在当前鼠标所处单元格自动触发悬停表现  | `boolean`  |  `false` | \n \n### CustomInteraction \n \n功能描述：自定义交互，继承 baseEvent:  [具体例子](/docs/manual/advanced/interaction/custom) \n \n| 参数        | 说明           | 类型                                              | 默认值 | 必选  | \n| ----------- | -------------- | ------------------------------------------------- | ------ | --- | \n| key         | 交互的唯一标识 | `string`                                          |        |   ✓   | \n| interaction |                | [InteractionConstructor](/docs/api/basic-class/interaction#interactionconstructor) |        |   ✓   | \n \n### ScrollSpeedRatio \n \n```js \ninterface ScrollSpeedRatio { \n  horizontal?: number; // 水平滚动速率，默认为 1 \n  vertical?: number; // 垂直滚动速率，默认为 1 \n} \n``` \n \n### ResizeInteractionOptions \n \n| 参数                 | 说明     | 类型    | 默认值 | 必选  | \n| -------------------- | ------- | ----------------- | ------ | --- | \n| rowCellVertical      | 是否开启行头垂直方向 resize 热区                                                   | `boolean`         | true   |       | \n| cornerCellHorizontal | 是否开启角头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellHorizontal    | 是否开启列头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellVertical      | 是否开启列头垂直方向 resize 热区 （列头隐藏时该配置无效）                                                   | `boolean`         | true   |       | \n| rowResizeType        | 用于控制行高 resize 时是同时对所有 Cell 生效，还是只对当前行生效。默认对所有行生效 | `all`\\| `current` | `all`  |       | \n| disable        | 用于控制行高 resize 是否生效 查看例子 | (resizeInfo: [S2CellType](/docs/api/components/sheet-component#resizeinfo)) => boolean |   |       | \n| visible        | 自定义当前单元格是否显示 resize 热区 | (cell: [S2CellType](/docs/api/basic-class/base-cell)) => boolean |   |       | \n \n### brushSelection \n \n| 参数              | 说明                  | 类型              | 默认值   | 必选  | \n| ----------------- | --------------------- | ----------------- | ------- | --- | \n| data            | 是否允许数值单元格刷选         | `boolean`         | true  |       | \n| row             | 是否允许行头单元格刷选（仅支持透视表） | `boolean`         | false |       | \n| col             | 是否允许列头单元格刷选 | `boolean`         | false |       | \n \n \n \n## Conditions \n \n类型：`object`，**必选**，默认值：`{}` \n \n<description>功能描述： 配置字段标记。分为文本 (text)，背景 (background)，柱状图 (interval)，图标 (icon)。</description> \n \n| 参数       | 说明 | 类型            | 默认值 | 必选  | \n| ---------- | ---------- | ---------------  | ------ | ---- | \n| text       | 文本字段标记   | `Condition[]`     | - |            | \n| background | 背景字段标记   | `Condition[]`    | -      |            | \n| interval   | 柱状图字段标记 | `Condition[]`     | -      |            | \n| icon       | 图标字段标记   | `IconCondition[]` | -  |            | \n \n### Condition \n \n类型：`object`，**必选**，默认值：`undefined` \n \n<description>功能描述： 配置条件格式。包括文本 (text)，背景 (background)，柱状图 (interval)。</description> \n \n| 参数      | 说明                                | 类型         | 默认值      | 必选  | \n|---------|-----------------------------------|------------|----------|-----| \n| field   | 1. 字段 ID <br /> 2. 使用正则表达式匹配字段 ID | `string \\| RegExp` |     | ✓          | \n| mapping | 作用映射函数​                           | `function` |          | ✓   | \n \n#### mapping \n \n```typescript \ntype MappingFunction = ( \n  fieldValue: number | string | null, \n  data: Record<string, any> \n) => { \n  // 仅用于图标字段标记，可选 \n  icon?: string; \n \n  // 背景 ｜ 文本 ｜ 柱状图 | 图标 字段标记颜色填充，必选 \n  fill: string; \n \n  // 仅用于柱状图字段标记，可选 \n  isCompare?: boolean; \n  minValue?: number; \n  maxValue?: number; \n \n  // 仅用于背景字段标记，可选。（当背景颜色较暗，将文本颜色设置为白色。优先级低于 文本字段标记） \n  intelligentReverseTextColor?: boolean; \n} | null | undefined // 返回值为空时，表示当前字段不显示字段标记样式 \n \n``` \n \n**condition 用法示例：** \n \n```javascript \nconst options = { \n  conditions: { \n    text: [ \n      { \n        field: \"province\", \n        mapping: () => ({ \n          fill: \"rgba(0, 0, 0, .65)\", \n        }), \n      }, \n    ], \n    interval: [ \n      { \n        field: \"sub_type\", \n        mapping: () => { \n          return { \n            fill: \"green\", \n          }; \n        }, \n      }, \n    ], \n    background: [ \n      { \n        field: \"count\", \n        mapping: () => ({ \n          fill: \"#ff00ff\", \n        }), \n      }, \n    ], \n  }, \n}; \n \n``` \n \n### IconCondition \n \n类型：`object`，**必选**，默认值：`null` \n \n<description>功能描述： 配置图标 (icon) 条件格式。</description> \n \n| 参数     | 说明 | 类型     | 默认值  | 必选    | \n| -------- | ------------ | -------- | ------- | ----  | \n| field    | 字段 ID       | `string`   |                | ✓    | \n| position | icon 相较于文字的位置 | `left \\| right`   | `right` |         | \n| mapping  | 作用映射函数​ | `function` |                 | ✓    | \n \n**icon condition 用法示例：** \n \n```javascript \n const options = { \n  conditions: { \n    icon: [ \n      { \n        field: \"profit\", \n        position: \"left\", \n        mapping: () => { \n          return { \n            icon: \"InfoCircle\", \n            fill: \"red\", \n          }; \n        }, \n      }, \n    ], \n  }, \n}; \n \n``` \n \n \n \n## Totals \n \nobject **必选**,_default：null_ 功能描述： 小计总计配置 \n \n| 参数 | 说明   | 类型                                          | 必选  | 默认值 | \n| ---- | ------ | --------------------------------------------- | ---- | ------ | \n| row  | 行总计 | [Total](/docs/api/general/S2Options#total) |       |    | \n| col  | 列总计 | [Total](/docs/api/general/S2Options#total) |       |    | \n \n## Total \n \nobject **必选**,_default：null_ 功能描述： 小计总计配置 \n \n| 参数                | 说明                     | 类型         | 默认值  | 必选  | \n| ------------------- | ------------------------ | ------------ | ------- | ---- | \n| showGrandTotals     | 是否显示总计             | `boolean`    | `false` |      | \n| showSubTotals       | 是否显示小计。当配置为对象时，always 控制是否在子维度不足 2 个时始终展示小计，默认不展示             | `boolean \\| { always: boolean }`    | `false` |      | \n| subTotalsDimensions | 小计的汇总维度           | `string[]`   | `[]`    |      | \n| reverseLayout       | 总计布局位置，默认下或右 | `boolean`    | `false` |      | \n| reverseSubLayout    | 小计布局位置，默认下或右 | `boolean`    | `false` |      | \n| label               | 总计别名                 | `string`     |         |       | \n| subLabel            | 小计别名                 | `string`     |         |       | \n| calcTotals          | 自定义计算总计                 | [CalcTotals](#calctotals) |         |       | \n| calcSubTotals       | 自定义计算小计                 | [CalcTotals](#calctotals) |         |       | \n| totalsGroupDimensions                  | 总计的分组维度                                            |`string[]`    |                    |      | \n| subTotalsGroupDimensions               | 小计的分组维度                                            |  `string[]`            |                    |      | \n \n## CalcTotals \n \nobject **可选**,_default：null_ 功能描述： 计算小计总计配置 \n \n| 参数        | 说明       | 类型                                                                 | 必选  | 默认值 | \n| ----------- | ---------- | -------------------------------------------------------------------- | --- | ------ | \n| aggregation | 聚合方式   | `Aggregation.SUM` \\| `Aggregation.MIN` \\| `Aggregation.MAX` \\| `Aggregation.AVG`                                                                |       |        | \n| calcFunc    | 自定义方法 | `(query: Record<string, any>, arr: Record<string, any>[]) => number` |       |        | \n \n \n \n## Tooltip \n \nobject **可选**,_default：null_ 功能描述： tooltip 配置 \n \n| 参数               | 说明   | 类型      | 默认值 | 必选 | \n| ------------------ | ----------- | ----------- | ------ | --- | \n| showTooltip        | 是否展示 tooltip                                             | `boolean`                               | `true` |      | \n| operation          | tooltip 操作配置项    | [TooltipOperation](#tooltipoperation)   | -      |      | \n| row                | 行头配置    | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| col                | 列头配置     | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| data               | 数值配置  | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| corner             | 角头配置    | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| renderTooltip      | 自定义整个 tooltip, 可以继承 BaseTooltip 自己重写一些方法    | [RenderTooltip](#rendertooltip)         | -      |      | \n| content   | 自定义 tooltip 内容  | `ReactNode \\| Element \\| string` 或者 `(cell, defaultTooltipShowOptions) => ReactNode \\| Element \\| string`   | -      |      | \n| autoAdjustBoundary | 当 tooltip 超过边界时自动调整显示位置，container: 图表区域，body: 整个浏览器窗口，设置为 `null` 可关闭此功能 | `container` \\| `body`  | `body` |      | \n| adjustPosition | 自定义 tooltip 位置，| (positionInfo: [TooltipPositionInfo](#tooltippositioninfo) ) => {x: number, y: number}                  |  |      | \n| getContainer | 自定义 tooltip 挂载容器，| `() => HTMLElement`   | `document.body` |      | \n| className | 额外的容器类名，| `string`    | - |      | \n| style | 额外的容器样式，| [CSSProperties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference)  | - |      | \n \n### BaseTooltipConfig \n \nobject **可选**,_default：null_ 功能描述： tooltip 基础通用配置 \n \n| 参数             | 说明                    | 类型                                  | 默认值 | 必选 | \n| ---------------- | ----------------------- | ------------------------------------- | ------ | --- | \n| showTooltip      | 是否展示 tooltip        | `boolean`                             | `false` |      | \n| operation        | tooltip 操作配置项      | [TooltipOperation](#tooltipoperation) | -      |      | \n| content | 自定义 tooltip 内容 | `ReactNode \\| Element \\| string \\|` 或者 `(cell, defaultTooltipShowOptions) => ReactNode \\| Element \\| string`                       | -      |      | \n \n### TooltipPositionInfo \n \nobject **可选**,_default：null_ 功能描述： tooltip 坐标信息 \n \n| 参数             | 说明                    | 类型                                  | 默认值 | 必选 | \n| ---------------- | ----------------------- | ------------------------------------- | ------ | --- | \n| position      | 默认经过计算（默认偏移量 + autoAdjustBoundary）后的 Tooltip 位置坐标  |  [TooltipPosition](#tooltipposition)  |  | ✓| \n| event      | 当前点击事件信息 | Event | | ✓| \n \n### TooltipOperation \n \nobject **可选**,_default：null_ 功能描述： tooltip 操作配置项 \n \n| 参数          | 说明                          | 类型      | 默认值  | 必选 | \n| ------------- | ----------------------------- | --------- | ------- | --- | \n| hiddenColumns | 是否开启隐藏列（叶子节点有效）   | `boolean` | `false`  |      | \n| trend         | 是否显示趋势图 icon           | `boolean` | `false` |      | \n| sort          | 是否开启组内排序              | `boolean` | `false` |      | \n| tableSort     | 是否开启明细表列头排序         | `boolean` | `false` |      | \n| menus         | 自定义操作配置项         | [TooltipOperatorMenu[]](#tooltipoperatormenu) | `-` |      | \n| onClick       | 操作项点击回调函数         | `({ item, key, keyPath, domEvent }) => void` | `-` |      | \n \n \n \n## TooltipShowOptions \n \nobject **必选**,_default：null_ 功能描述： tooltip 显示配置 \n \n| 参数      | 类型      | 必选  | 默认值 | 功能描述            | \n| --------- | ------- | ------ | ------ | ------------------- | \n| position  | [TooltipPosition](#tooltipposition)       |   ✓   |        | tooltip 显示位置    | \n| data      | [TooltipData](#tooltipdata)      |       |        | tooltip 数据        | \n| cellInfos | `Record<string, any>`        |       |        | 单元格信息          | \n| options   | [TooltipOptions](#tooltipoptions)    |       |        | tooltip 部分配置    | \n| content   | `ReactNode \\| string` \\| 或者 `(cell, defaultTooltipShowOptions: TooltipShowOptions) => ReactNode \\| string` |       |        | 自定义 tooltip 内容 | \n| event     | `Event`  |       |        | 当前事件 Event      | \n \n### TooltipPosition \n \nobject **必选**,_default：null_ 功能描述： tooltip 坐标 \n \n| 参数 | 类型     | 必选  | 默认值 | 功能描述 | \n| ---- | -------- | ------ | ------ | -------- | \n| x    | `number` |   ✓   |        | 横坐标   | \n| y    | `number` |   ✓   |        | 纵坐标   | \n \n### TooltipData \n \nobject **可选**,_default：null_ 功能描述： tooltip 数据 \n \n| 参数      | 类型                                            | 必选  | 默认值 | 功能描述                             | \n| --------- | ----------------------------------------------- | ------ | ------ | ------------------------------------ | \n| summaries | [TooltipSummaryOptions](#tooltipsummaryoptions) |       |        | 所选项统计（按度量值区分）列表       | \n| details   | [ListItem](#listitem)                           |       |        | 数据点明细信息                       | \n| headInfo  | [TooltipHeadInfo](#tooltipheadinfo)             |       |        | 轴（行/列头）列表                    | \n| name      | `string`                                        |       |        | 当前单元格名称                       | \n| tips      | `string`                                        |       |        | 提示/说明信息                        | \n| infos     | `string`                                        |       |        | 底部提示信息（可用于快捷键操作提示） | \n \n#### TooltipSummaryOptions \n \nobject **可选**,_default：null_ 功能描述： tooltip 所选项统计（按度量值区分）列表 \n \n| 参数         | 类型                  | 必选  | 默认值 | 功能描述           | \n| ------------ | --------------------- | ------ | ------ | ------------------ | \n| name         | `string`              |   ✓   |        | 名称               | \n| value        | `number \\| string`     |   ✓   |        | 值                 | \n| selectedData | `Record<string, any>` |   ✓   |        | 当前选择的数据列表 | \n \n#### TooltipHeadInfo \n \nobject **可选**,_default：null_ 功能描述： tooltip 轴（行/列头）列表 \n \n| 参数 | 类型                  | 必选  | 默认值 | 功能描述 | \n| ---- | --------------------- | ------ | ------ | -------- | \n| rows | [ListItem](#listitem) |   ✓   |        | 行头列表 | \n| cols | [ListItem](#listitem) |   ✓   |        | 列头列表 | \n \n#### ListItem \n \nobject **可选**,_default：null_ 功能描述： tooltip 数据点明细数据 \n \n| 参数  | 类型              | 必选  | 默认值 | 功能描述       | \n| ----- | ----------------- | ------ | ------ | -------------- | \n| name  | `string`          |   ✓   |        | 名称           | \n| value | `string \\| number` |   ✓   |        | 值             | \n| icon  | `ReactNode` |       |        | 自定义图标组件 | \n \n### TooltipOptions \n \nobject **必选**,_default：null_ 功能描述： tooltip 部分配置 \n \n| 参数           | 类型                                              | 必选  | 默认值 | 功能描述                     | \n| -------------- | ------------------------------------------------- | ------ | ------ | ---------------------------- | \n| hideSummary    | `boolean`                                         |       |     `false`    | 是否隐藏所选项统计信息       | \n| operator       | [TooltipOperatorOptions](#tooltipoperatoroptions) |       |        | 操作栏配置                   | \n| onlyMenu       | `boolean`                                         |       |      `false`   | tooltip 是否只展示操作菜单项 | \n| enterable      | `boolean`                                         |       |      `false`   | 是否可进入 tooltip 组件      | \n| isTotals       | `boolean`                                         |       |      `false`   | 是否是 总计/小计 单元格      | \n| showSingleTips | `boolean`                                         |       |     `false`    | 是否显示单元格提示信息       | \n| enableFormat | `boolean`                                         |       |     `false`    | 是否开启格式化       | \n| forceRender | `boolean`                                         |       |    `false`    | 是否强制清空 dom       | \n| data | [TooltipData](#tooltipdata)                                         |       |    `-`    | 自定义 tooltip 数据       | \n \n#### TooltipOperatorOptions \n \nobject **可选**,_default：null_ 功能描述： tooltip 操作栏配置 \n \n| 参数    | 类型                                         | 必选  | 默认值 | 功能描述                                                                                   | \n| ------- | -------------------------------------------- | ------ | ------ | ------------------------------------------------------------------------------------------ | \n| menus   | [TooltipOperatorMenu[]](#tooltipoperatormenu)  |     |        | 操作项列表  | \n| onClick | `({ item, key, keyPath, domEvent }) => void` |      |        | 点击事件，透传 `antd` `Menu` 组件的 [onClick](https://ant.design/components/menu-cn/#Menu) | \n| defaultSelectedKeys   | `string[]`  |     |        | 初始选中的菜单项 key 数组，透传 `antd` `Menu` 组件的 [defaultSelectedKeys](https://ant.design/components/menu-cn/#Menu)  | \n \n##### TooltipOperatorMenu \n \nobject **必选**,_default：null_ 功能描述： tooltip 操作项列表 \n \n| 参数     | 类型                                        | 必选  | 默认值 | 功能描述       | \n| -------- | ------------------------------------------- | ------ | ------ | -------------- | \n| key      | `string`                                    |   ✓   |        | 唯一标识       | \n| text     | `ReactNode \\| string`   |       |        | 名称           | \n| icon     | `ReactNode \\| string`   |       |        | 自定义图标     | \n| visible  | `boolean \\| (cell) => boolean`                           |      |   `true`      | 操作项是否显示，可传入一个函数根据当前单元格信息动态显示     | \n| onClick  | (`cell`: [S2CellType](/docs/api/basic-class/base-cell): ) => void                           |       |        | 点击事件回调  (cell 为当前 tooltip 对应的单元格）   | \n| children | [TooltipOperatorMenu](#tooltipoperatormenu) |       |        | 子菜单列表     | \n \n \n \n## Pagination \n \nboolean ｜ object **必选**,_default: null_ 功能描述： 分页配置 \n \n| 参数      | 说明          | 类型   | 默认值 | 必选  | \n| --------- | ------------------- | ------ | ------ | --  | \n| pageSize  | 每页数量            | `number` | - |  ✓   | \n| current   | 当前页（从 1 开始） | `number` |       1      |  ✓   | \n| total     | 数据总条数          | `number` | - |      | \n \n \n \n## Style \n \nobject **必选**,_default：null_ 功能描述：样式设置 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| layoutWidthType | `adaptive \\| colAdaptive \\| compact` |    |  | 单元格宽度布局类型<br> `adaptive` : 行列等宽，均分整个表格 (`Canvas`) 画布宽度 <br> `colAdaptive`：列等宽，行头紧凑布局，列等分画布宽度减去行头宽度的剩余宽度<br> `compact`：行列紧凑布局，列头宽度为内容实际宽度 （采样列前 50 个数值）, 指标维度少的时候无法布满整个画布 | \n| showTreeLeafNodeAlignDot | `boolean` |  |  false  | 树状模式下叶子节点是否显示层级占位点 | \n| treeRowsWidth | `number` |  |  120  | 树状模式行单元格宽度 （优先级大于 `rowCfg.width` 和 `rowCfg.treeRowsWidth （已废弃）`) | \n| hierarchyCollapse | `boolean` |  |   `false` | 在树状结构模式下行头是否默认展开。 | \n| rowExpandDepth | `number` |  |    | 在树状结构模式下行头默认展开展开的层级（层级从 0 开始）。 | \n| collapsedRows | `Record<string, boolean>` |  |  | 树状模式下行头自定义折叠、收起状态（透视表使用）。<br> key 值的生成需遵守指定的规则：'root[&] 行头维度值'。 [查看 demo](/examples/basic/pivot#tree) | \n| cellCfg | [CellCfg](#cellcfg) |  |  |   单元格配置 | \n| colCfg | [ColCfg](#colcfg) |  |  |   列样式配置 | \n| rowCfg | [RowCfg](#rowcfg) |  |  |   行样式配置 | \n| device | `pc \\| mobile` | |  `pc` | 设备类型 | \n \n## CellCfg \n \nobject **必选**,_default：null_ 功能描述：数值单元格配置 \n \n| 参数    | 说明 | 类型   | 默认值 | 必选  | \n| ------- | ------------ | ------ | ------ | ---- | \n| width   | 单元格宽度   | `number` |    96 | - | \n| height  | 单元格高度   | `number` |    30 | - | \n| valuesCfg  | 单元格配置   | `{ originalValueField?: string, widthPercent?: number[], showOriginalValue?: boolean }` |   | - | \n \n## ColCfg \n \nobject **必选**,_default：null_ 功能描述： 列样式配置 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| width |   单元格宽度，可根据当前列头节点动态设置宽度 （叶子节点有效） | `number \\| (colNode: Node) => number` |  |  | \n| height |  单元格高度 | `number` | 30 |  | \n| widthByFieldValue | 根据度量值设置宽度（拖拽或者预设宽度场景）, `fieldValue` 对应 `s2DataConfig.fields.columns` 中的列头数值 | `Record<string, number>`   | - |  | \n| heightByField | 根据度量值设置高度（拖拽或者预设高度场景）, `field` 对应 列头 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>`   | - |  | \n| hideMeasureColumn | 默认数值挂列头，会同时显示列头和数值，隐藏数值列，使其更美观。（仅在单数值时有效，多数值时推荐使用 [隐藏列头](https://s2.antv.vision/manual/advanced/interaction/hide-columns#2-%E9%80%8F%E8%A7%86%E8%A1%A8)) | `boolean` | false |  | \n \n## RowCfg \n \nobject **必选**,_default：null_ 功能描述： 行样式配置 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| width | 行单元格宽度，可根据当前行头节点动态设置宽度，如果是树状结构，请使用 `styles.treeRowsWidth` | `number \\| (rowNode: Node) => number` | 96 |  | \n| treeRowsWidth | 树状结构下，行单元格宽度 (**已废弃，请使用 `style.treeRowsWidth` 代替**) | `number` | 120 |  | \n| widthByField | 根据 `field` 设置每行的宽度。`field` 是行的 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | - |  | \n| heightByField | 根据 `field` 设置每行的高度。`field` 是行的 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | - |  | \n \n \n## DataCellCallback \n \n```js \nDataCellCallback = (viewMeta: ViewMeta, s2: Spreadsheet) => G.Group; \n``` \n \nFunction description: custom value cell, [ViewMeta](#viewmeta) \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n## Cell Callback \n \n```js \nCellCallback = (node: Node, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => G.Group; \n``` \n \nFunction description: custom cell \n \n| parameter   | illustrate                                                           | type                                                | Defaults | required | \n| ----------- | -------------------------------------------------------------------- | --------------------------------------------------- | -------- | :------: | \n| node        | The currently rendered node node                                     | [node](/docs/api/basic-class/node)               | -        |     ✓    | \n| spreadsheet | Table class instance, which can access any configuration information | [SpreadSheet](/docs/api/basic-class/spreadsheet) | -        |     ✓    | \n| restOptions | Indeterminate parameters, pass additional information                | `unknown[]`                                         | -        |          | \n \n## CornerHeaderCallback \n \n```js \nCornerHeaderCallback = (parent: S2CellType, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => void; \n``` \n \nFunction description: custom corner head \n \n| parameter   | illustrate                                                           | type                                                | Defaults | required | \n| ----------- | -------------------------------------------------------------------- | --------------------------------------------------- | -------- | :------: | \n| parents     | parent cell                                                          | [S2CellType](#s2celltype)                           | -        |     ✓    | \n| spreadsheet | Table class instance, which can access any configuration information | [SpreadSheet](/docs/api/basic-class/spreadsheet) | -        |     ✓    | \n| restOptions | Indeterminate parameters, pass additional information                | `unknown[]`                                         | -        |          | \n \n \n## LayoutHierarchy \n \n```js \nLayoutHierarchy = (spreadsheet: SpreadSheet, node: Node) => LayoutHierarchyReturnType; \n``` \n \n功能描述：自定义层级结构 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| node | [Node](/docs/api/basic-class/node) | ✓ |  |   当前渲染的 node 节点 | \n \n```ts \ninterface LayoutHierarchyReturnType { \n  push?: Node[]; \n  unshift?: Node[]; \n  delete?: boolean; \n} \n``` \n \n \n \n## LayoutArrange \n \n```js \nLayoutArrange = (spreadsheet: SpreadSheet, parent: Node, field: string, fieldValues: string[]) => string[]; \n``` \n \n功能描述：自定义顺序 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| node | [Node](/docs/api/basic-class/node) | ✓ |  |   当前渲染的 node 节点 | \n| field | `string` | ✓ |  |   当前的字段名 | \n| fieldValues | `string[]` | ✓ |  |   当前字段值 | \n \n \n## LayoutCoordinate \n \n```js \nLayoutCoordinate = (spreadsheet: SpreadSheet, rowNode: Node, colNode: Node) => void \n``` \n \n功能描述：自定义坐标 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| rowNode | [Node](/docs/api/basic-class/node) | ✓ |    | 行节点 | \n| colNode | [Node](/docs/api/basic-class/node) | ✓ |    | 列节点 | \n \n \n \n## LayoutDataPosition \n \n```js \nLayoutDataPosition = (spreadsheet: SpreadSheet, getCellData: GetCellMeta) => GetCellMeta \n``` \n \n功能描述：自定义数据 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | --- | ---  | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| getCellData | [GetCellMeta](#viewmeta) | ✓ |    | 获取单元格数据和位置等信息| \n \n```ts \ntype GetCellMeta = (rowIndex?: number, colIndex?: number) => ViewMeta; \n``` \n \n \n \n## HeaderActionIcon \n \n功能描述：为表格行列头角头注册自定义操作 `icon`。如果该配置位空，则展示透视表默认操作icon。 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | 版本 | \n| --- | --- | ---  | --- | --- | --- | \n| iconNames | string[] | ✓ |    | 已经注册的 icon 名称，或用户通过 customSVGIcons 注册的 icon 名称 | | \n| belongsCell | string[] | ✓ | |   需要增加操作图标的单元格名称 cornerCell、colCell、rowCell | | \n| defaultHide | boolean \\| (mete: Node, iconName: string)=> boolean  |  |  |   是否默认隐藏, 如果为 true 则为 hover 后再显示；false 则始终显示  | `1.26.0` 支持配置为一个函数 | \n| displayCondition | (mete: Node, iconName: string)=> boolean |  |  | 展示的过滤条件，可以通过该回调函数用户自定义行列头哪些层级或单元格需要展示 icon。 所有返回值为 true 的 icon 会展示给用户。 | `1.26.0` 回传 `iconName` 并按单个 icon 控制显隐 | \n| action | (headerActionIconProps: HeaderActionIconProps) => void; | ✓ |  | icon 点击之后的执行函数 | 已废弃，请使用 `onClick` | \n| onClick    | `(headerIconClickParams: HeaderIconClickParams) => void;` |   ✓      |     |    | `1.26.0` | \n| onHover   | `(headerIconHoverParams: HeaderIconHoverParams) => void;` |        |     |    | `1.26.0` | \n \n \n## HeaderActionIconProps \n \nFunction description: After clicking the custom operation icon, the current icon returned by the pivot table is related \n \n| parameter | illustrate                               | type   | Defaults | required | \n| --------- | ---------------------------------------- | ------ | -------- | :------: | \n| iconName  | The name of the currently clicked icon   | string | -        |     ✓    | \n| meta      | The meta information of the current cell | node   | -        |     ✓    | \n| event     | Current click event information          | event  | false    |     ✓    | \n \n## CustomSVGIcon \n \n功能描述：用于用户注册自己的 `icon` 图标， 目前只支持 `svg` 格式 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| name | string | ✓ |    | icon 名称 | \n| svg | string | ✓ |    | 目前支持三种格式的svg字符串：base64、svg本地文件、线上图片地址 | \n \n \n## FilterDataItemCallback \n \n```js \nFilterDataItemCallback = (valueField: string, data: DataItem) => DataItem \n``` \n \nFunction description: convert, filter data \n \n| parameter  | illustrate                                                           | type                  | Defaults | required | \n| ---------- | -------------------------------------------------------------------- | --------------------- | -------- | :------: | \n| valueField | Table class instance, which can access any configuration information | `string`              | -        |     ✓    | \n| data       | Data Format                                                          | [DataItem](#dataitem) | -        |     ✓    | \n \n## MappingDataItemCallback \n \n```js \nMappingDataItemCallback = (valueField: string, data: DataItem) => Record<string, string | number> | DataItem; \n``` \n \nFunction description: data implicit, used to display in tooltip \n \n| parameter  | illustrate                                                           | type                  | Defaults | required | \n| ---------- | -------------------------------------------------------------------- | --------------------- | -------- | :------: | \n| valueField | Table class instance, which can access any configuration information | `string`              | -        |     ✓    | \n| data       | Data Format                                                          | [DataItem](#dataitem) | -        |     ✓    | \n \n## DataItem \n \nFunction description: basic data format \n \n```ts \nexport interface MultiData { \n  label?: string; \n  values: (string | number)[][]; \n} \n \nexport type SimpleDataItem = string | number; \n \nexport type DataItem = SimpleDataItem | MultiData; \n``` \n \n## LayoutResult \n \n| parameter      | illustrate                                                                    | type                                                | Defaults | required | \n| -------------- | ----------------------------------------------------------------------------- | --------------------------------------------------- | -------- | :------: | \n| colNodes       | all nodes in the column                                                       | [Node\\[\\]](/docs/api/basic-class/node)           |          |          | \n| cols Hierarchy | column structure information                                                  | [Hierarchy](#hierarchy)                             |          |          | \n| rowNodes       | all nodes of the row                                                          | [Node\\[\\]](#node)                                   |          |          | \n| rowsHierarchy  | row structure information                                                     | [Hierarchy](#hierarchy)                             |          |     ✓    | \n| rowLeafNodes   | All leaf nodes of the row, for Cartesian intersection                         | [Node\\[\\]](/docs/api/basic-class/node)           |          |          | \n| colLeafNodes   | All leaf nodes of the column, for Cartesian intersection                      | [Node\\[\\]](/docs/api/basic-class/node)           |          |          | \n| getViewMeta    | Obtain the information corresponding to the coordinates of \\[x,y] crossed out | `(rowIndex: number, colIndex: number) => ViewMeta`  |          |          | \n| spreadsheet    | Table class instance, which can access any configuration information          | [SpreadSheet](/docs/api/basic-class/spreadsheet) |          |          | \n \n## DataSet \n \n```js \nDataSet = (spreadsheet: SpreadSheet) => BaseDataSet; \n``` \n \n## MergedCellInfo \n \n \n<description> **optional**  _MergedCellInfo[][]_   default: `undefined` </description> \n \n设置默认合并的单元格信息 \n \n| 参数            | 说明     | 类型        | 默认值 | 必选 | \n| --------------- |------| ---------------------- | ------ | ---- | \n| colIndex        | 单元格的列索引      | `number`   | -      |      | \n| rowIndex        | 单元格的行索引  | `number`   | -      |      | \n| showText        | 设置 `showText: true` 时，则展示当前格子的 `meta` 信息为合并后单元格的 `meta`。<br/> 默认使用第一个选中点击的单元格。 | `booelan`      | -      |      | \n \n \n \n",en:"# S2DataConfig \n \n \nDemo of the DataConfig \n \n```ts \nconst s2DataConfig = { \n  data: [], \n  meta: [], \n  sortParams: [], \n  fields: { \n    rows: [], \n    columns: [], \n    values: [] \n  } \n} \n``` \n \nTabular data configuration \n \n| parameter  | illustrate                                                      | type                        | Defaults | required | \n| :--------- | :-------------------------------------------------------------- | :-------------------------- | :------- | :------- | \n| data       | Raw data                                                        | [Data\\[\\]](#data)           |          | ✓        | \n| fields     | dimension index                                                 | [Fields](#fields)           |          | ✓        | \n| totalData  | Total/Subtotal Data                                             | [Data\\[\\]](#data)           |          |          | \n| meta       | Field metadata, configurable field aliases and value formatting | [Meta\\[\\]](#meta)           |          |          | \n| sortParams | Sorting parameter configuration                                 | [SortParam\\[\\]](#sortparam) |          |          | \n \n### Data \n \nstring | number | [MiniChartData](#minichartdata) | [MultiData](#multidata) **required** , *default: null* \n \nFunction description: Set the data source data source of the table, for example: \n \n```ts \nconst data = [ \n  { \n    area: '东北', \n    province: '吉林', \n    city: '白山', \n    type: '办公用品', \n    subType: '纸张', \n    cost: '2', \n  }, \n  { \n    area: '东北', \n    province: '吉林', \n    city: '白山', \n    type: '办公用品', \n    subType: '笔', \n    cost: '3', \n  } \n]; \n``` \n \n### Fields \n \nobject is **required** , *default: null* \n \nFunction description: Configure the dimension field of the table, that is, the corresponding row and column dimensions \n \n| Configuration item name | illustrate                                                           | type                                  | Defaults | required | \n| :---------------------- | :------------------------------------------------------------------- | :------------------------------------ | :------- | :------- | \n| rows                    | list of row dimensions                                               | `string[]`                            | `[]`     |          | \n| customTreeItems         | Customize the header directory tree                                  | [CustomTreeItem[]](#customtreeitem) |          |          | \n| columns                 | list of column dimensions                                            | [Columns[]](#columns) | `[]`     |          | \n| values                  | List of Metric Dimensions                                            | `string[]`                            | `[]`     |          | \n| valueInCols             | Whether the indicator dimension is at the column header              | `boolean`                             | `true`   |          | \n| customValueOrder        | Position order of custom metric dimensions in row and column headers  [example](/en/examples/custom/custom-layout/#custom-value-order) | `number`                              | -        |          | \n \n### Meta \n \narray object **required** , *default: null* \n \nFunction description: Field metadata, configurable field alias and value formatting. \n \n| parameter   | illustrate | type                           | Defaults             | required              | \n| :---------- | :---- | :----------------------------- | :------------------- | :-------------------- | \n| field       | field id | `string`  |  |                       | \n| name   | Field Name  | `string`  |  |   | \n| description | Field description, which will be displayed in the tooltip corresponding to the row header, column header, and cell   | `string` |   |   | \n| formatter   | Formatting cells, row headers and column headers support formatting, but corner headers do not support formatting. The second parameter exists only for cells. Numerical fields: generally used to format numeric units Text fields: generally used as aliases for field enumeration values The second parameter will be passed in in the following situations: data cell formatting, copy/export, tooltip display ( **and only when selected When there are multiple cells, the data type is an array** ) | \\`(value: unknown, data?: Data | Data\\[], meta?: Node | ViewMeta) => string\\` | \n \n### MiniChartData \n \n \n#### renderMiniChart \n \nDraw mini charts in cells (support line charts, bullet charts, histograms) \n \n```ts \n renderMiniChart = (cell: S2CellType, data?: BaseChartData | BulletValue) => void; \n``` \n \n#### BaseChartData \n \nLine chart, histogram data configuration items, data format refer to `g2` \n \n| parameter      | illustrate                                                                                                   | type                     | required | Defaults | \n| -------------- | ------------------------------------------------------------------------------------------------------------ | ------------------------ | -------- | -------- | \n| type           | mini-chart type                                                                                              | `string` (line/bar)      | ✓        |          | \n| encode         | Encoding method, declare the corresponding column data bound to the x position channel or y position channel | `{x: string; y: string}` | ✓        |          | \n| data           | Raw data                                                                                                     | [Data\\[\\]](#data)        |          | ✓        | \n| \\[key: string] | Other transparent fields for customized display of custom cells                                              | `unknown`                |          |          | \n \n#### BulletValue \n \nBullet chart data configuration items \n \n| parameter      | illustrate                                                      | type              | required | Defaults | \n| -------------- | --------------------------------------------------------------- | ----------------- | -------- | -------- | \n| type           | mini-chart type                                                 | `string` (bullet) | ✓        | bullet   | \n| measure        | current indicator                                               | `number/string`   | ✓        |          | \n| target         | target value                                                    | `number/string`   | ✓        |          | \n| \\[key: string] | Other transparent fields for customized display of custom cells | `unknown`         |          |          | \n \n \n### MultiData \n \nobject is **required** , *default: null* \n \nFunction description: used to support custom data cell rendering of multiple indicator types. Example: [Trend Analysis Table](/examples/react-component/sheet#strategy) \n \n| Configuration item name | illustrate                                                      | type      | Defaults        | required | \n| :---------------------- | :-------------------------------------------------------------- | :-------- | :-------------- | :------- | \n| values                  | The formatted data is directly displayed in dataCfg             | \\`(string | number)\\[]\\[]\\` | ✓        | \n| originalValues          | raw data, for raw data export                                   | \\`(string | number)\\[]\\[]\\` |          | \n| label                   | Used as a subtitle of a cell, displayed on a separate line      | `string`  |                 |          | \n| \\[key: string]          | Other transparent fields for customized display of custom cells | `unknown` | \\`\\`            |          | \n \n \n### SortParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`     | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）         | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`                              | -      |      | \n| type          | 组内排序用来显示 icon （透视表适用）          | `string`                              | -      |      | \n| sortFunc      | 自定义排序的 function                        | (params: [SortFuncParam](#sortfuncparam)) => `string[]` | -      |      | \n \n#### SortFuncParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`    | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）      | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`    | -      |      | \n| type          | 组内排序用来显示 icon（透视表适用）             | `string`                              | -      |      | \n| data          | 当前排序数据列表                            | `Array<string \\| Record<string, any>>` | -      |      | \n \n \n \n### CustomTreeItem \n \n[详细说明](/docs/manual/advanced/custom/category-tree) [例子](/examples/custom/custom-tree#custom-tree) \n \n功能描述：自定义树状结构的配置，兼容 [antd Tree](https://ant.design/components/tree-cn/) 数据配置项； \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| key | 当前节点唯一标识 | `string` |    | ✓ | \n| title | 当前节点展示名 | `string` |    | ✓ | \n| collapsed | 节点是否收起（只会在自身代表非叶子节点生效） | `boolean` |  `false`  |  | \n| description | 节点的额外描述信息，在对应行头的 tooltip 中展示 | `string` |    |  | \n| children | 子节点 | [CustomTreeItem[]](#custom-tree-item) |    |  | \n \n \n### Columns \n \n`Array<ColumnNode | string>` \n \n列配置数组，在明细表模式下支持使用 [ColumnNode](#columnnode) 结构来描述列分组关系 \n \n### ColumnNode \n \n| 属性名称 | 说明     | 类型   | 默认值 | 必选 | \n| ------- | ---------| -------| ------|------| \n| name | 列字段 id 或分组 id   | string |       | ✓ | \n| children | 分组下面的子级  | Array\\<ColumnNode \\| string\\> |       |  | \n \n \n# S2Options \n \n \nForm parameter configuration \n \n\\| parameter | type | required | default value | function description| | :-- | :-- | :-: | :-- | :-- | --- | `number` | width| | height | `number` | | 480 | table height| | debug | `boolean` | | `false` | whether to enable debug mode| `grid` | hierarchyType | `grid` | `tree` | `customTree` | grid structure, tree: tree structure. [customTree](#tooltip) : custom tree structure | | conditions | [Conditions](#conditions) | | | condition pattern configuration | [](#interaction)| totals | [Totals](#totals) | | | | | Table Interaction Configuration| | pagination | [Pagination](#pagination) | | | `false` Configuration| `boolean` | `true` | `boolean` | | `false` | `boolean` | | `true` | `false` to display the default row header action icon | `showDefaultHeaderActionIcon` | [headerActionIcons](#headeractionicon) [|](#customsvgicon) `false` | custom svg icon| | style | [Style](#style) | | | cell style settings, such as layout type, width and height, margin, whether to hide the value column header, etc. | | frozenRowCount | `number` | | | the number of frozen rows, from counting from top (valid for schedules) | | frozenColCount | `number` | | | number of frozen columns, counting from left (valid for schedules) | | frozenTrailingRowCount | `number` | | | number of frozen rows, counting from bottom ( list is valid) | | frozenTrailingColCount | `number` | | | the number of frozen columns, counting from the right side (schedule is valid) | | `true` | `boolean` | | Blurred font rendering on high-definition retina screens| | mergedCellsInfo | [MergedCellInfo\\[\\]\\[\\]](#mergedcellinfo) | | | merged cell information| | placeholder | `(meta: Record<string, any>) => string | string` | | | fill content of empty cells | | cornerText | string | | | custom corner header text (valid when custom tree `hierarchyType: customTree` ) | | The text of the virtual value field of the corner head (valid when the value is the row header, replace the two words \"value\") | | dataCell | [DataCellCallback](#datacellcallback) | | | custom cell | | cornerCell | [CellCallback](#cellcallback) | | | custom cornerCell | | rowCell | [CellCallback](#cellcallback) | | | custom row header cell | | colCell | [CellCallback](#cellcallback) | | | custom column header cell | | cornerHeader | [CornerHeaderCallback](#cornerheadercallback) | | | custom corner header | | [layoutHierarchy](#layouthierarchy) | struct | | [layoutArrange](#layoutdataposition) | [LayoutArrange](#layoutarrange) | | | custom sort order | | layoutCoordinate | [layoutCoordinate](#layoutcoordinate) | [|](#filterdataitemcallback) | | `false` | [MappingDataItemCallback](#mappingdataitemcallback) | | | Convert data for tooltip display| | dataSet | [DataSet](#dataset) | | | custom data set| `transform` | supportCSSTransform | `boolean` | , mouse coordinates respond incorrectly| | devicePixelRatio | `number` | | `window.devicePixelRatio` | custom device pixel ratio| \n \n \n## Interaction \n \n| 参数    | 说明   | 类型                                        | 默认值   |        必选        | \n| -------- | ----------- |-------------------------------------------| -------- | ---------------- | \n| linkFields  | 标记字段为链接样式，用于外链跳转  | `string[]` \\| (meta: [Node](/docs/api/basic-class/node) \\| ViewMeta) => boolean    |    |    | \n| selectedCellsSpotlight               | 是否开启选中高亮聚光灯效果    | `boolean`                                 | `false`      |                  | \n| hoverHighlight                       | 鼠标悬停时高亮当前单元格，以及所对应的行头，列头<br/>rowHeader：是否高亮悬停格子所在行头<br/>colHeader：是否高亮悬停格子所在列头<br/>rowCells：是否高亮悬停格子所在行<br/>colCells：是否高亮悬停格子所在列<br/>true：同 `{rowHeader: true, colHeader: true, currentRow: true, currentCol: true}`                                                                                                                 | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, rowCells?: boolean, colCells?: boolean}`                                 | `true`                                                |                  | \n| hoverFocus                           | 鼠标悬停在当前单元格超过默认 800ms 后，保持当前高亮，显示 tooltip，悬停时间通过设置 `duration` 来控制   | `boolean  \\| {duration: number}`                                   |      `true`      |       | \n| hiddenColumnFields                   | 用于配置默认隐藏的列，透视表需要配置列头唯一 id, 明细表配置列头 field 字段即可                                                                                          | `string[]`                                |                                                       |                  | \n| enableCopy                           | 是否允许复制                                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| copyWithHeader                       | 复制数据是否带表头信息                                                                                                                            | `boolean`                                 | `false`                                               |                  | \n| copyWithFormat                       | 是否使用 field format 格式复制                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| customInteractions                   | 自定义交互 [详情](/docs/manual/advanced/interaction/custom)                                                                                | [CustomInteraction[]](#custominteraction) |                                                       |                  | \n| scrollSpeedRatio                     | 用于控制滚动速率，分水平和垂直两个方向，默认为 1                                                                                                              | [ScrollSpeedRatio](#scrollspeedratio)     |                                                       |                  | \n| autoResetSheetStyle                  | 用于控制点击表格外区域和按下 esc 键时是否重置交互状态                                                                                                          | `boolean`                                 | `true`                                                |                  | \n| resize                               | 用于控制 resize 热区是否显示     | `boolean`  \\| [ResizeInteractionOptions](#resizeinteractionoptions) |      `true`      |       | \n| brushSelection         | 是否允许单元格（包含行头，列头，数值单元格）刷选。    | `boolean` \\|  [BrushSelection](#brushSelection)  | `true`                         |     |  1.29.0 后支持 [BrushSelection](#brushSelection)   | \n| multiSelection                       | 是否允许多选 （包含行头，列头，数值单元格）                                                                                                                 | `boolean`                                 | `true`                                                |                  | \n| rangeSelection                       | 是否允许区间快捷多选                                                                                                                             | `boolean`                                 | `true`                                                |                  | \n| scrollbarPosition                    | 用于控制滚动条展示在内容区边缘还是画布边缘                                                                                                                  | `content \\| canvas`                                              |    `content`     |   | \n| eventListenerOptions                 | 事件监听函数 `addEventListener` 的 [可选项配置](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener), 可控制事件从冒泡阶段还是捕获阶段触发 | `false`                                   |                                                       | \n| selectedCellHighlight                | 选中格子后的高亮行为<br/>rowHeader：是否高亮选中格子所在行头<br/>colHeader：是否高亮选中格子所在列头<br/>currentRow：是否高亮选中格子所在行<br/>currentCol：是否高亮选中格子所在列<br/>true：同{rowHeader: true, colHeader: true}     | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, currentRow?: boolean, currentCol?: boolean }` | `false`                                               |                  | \n| overscrollBehavior                   | 控制滚动至边界的行为，可禁用浏览器的默认滚动行为。[详情](/docs/manual/advanced/interaction/basic/#修改滚动至边界行为)  | `auto \\| contain \\| none \\| null`  |  `auto` | \n| hoverAfterScroll                   | 滚动结束后是否在当前鼠标所处单元格自动触发悬停表现  | `boolean`  |  `false` | \n \n### CustomInteraction \n \n功能描述：自定义交互，继承 baseEvent:  [具体例子](/docs/manual/advanced/interaction/custom) \n \n| 参数        | 说明           | 类型                                              | 默认值 | 必选  | \n| ----------- | -------------- | ------------------------------------------------- | ------ | --- | \n| key         | 交互的唯一标识 | `string`                                          |        |   ✓   | \n| interaction |                | [InteractionConstructor](/docs/api/basic-class/interaction#interactionconstructor) |        |   ✓   | \n \n### ScrollSpeedRatio \n \n```js \ninterface ScrollSpeedRatio { \n  horizontal?: number; // 水平滚动速率，默认为 1 \n  vertical?: number; // 垂直滚动速率，默认为 1 \n} \n``` \n \n### ResizeInteractionOptions \n \n| 参数                 | 说明     | 类型    | 默认值 | 必选  | \n| -------------------- | ------- | ----------------- | ------ | --- | \n| rowCellVertical      | 是否开启行头垂直方向 resize 热区                                                   | `boolean`         | true   |       | \n| cornerCellHorizontal | 是否开启角头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellHorizontal    | 是否开启列头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellVertical      | 是否开启列头垂直方向 resize 热区 （列头隐藏时该配置无效）                                                   | `boolean`         | true   |       | \n| rowResizeType        | 用于控制行高 resize 时是同时对所有 Cell 生效，还是只对当前行生效。默认对所有行生效 | `all`\\| `current` | `all`  |       | \n| disable        | 用于控制行高 resize 是否生效 查看例子 | (resizeInfo: [S2CellType](/docs/api/components/sheet-component#resizeinfo)) => boolean |   |       | \n| visible        | 自定义当前单元格是否显示 resize 热区 | (cell: [S2CellType](/docs/api/basic-class/base-cell)) => boolean |   |       | \n \n### brushSelection \n \n| 参数              | 说明                  | 类型              | 默认值   | 必选  | \n| ----------------- | --------------------- | ----------------- | ------- | --- | \n| data            | 是否允许数值单元格刷选         | `boolean`         | true  |       | \n| row             | 是否允许行头单元格刷选（仅支持透视表） | `boolean`         | false |       | \n| col             | 是否允许列头单元格刷选 | `boolean`         | false |       | \n \n \n \n## Conditions \n \n类型：`object`，**必选**，默认值：`{}` \n \n<description>功能描述： 配置字段标记。分为文本 (text)，背景 (background)，柱状图 (interval)，图标 (icon)。</description> \n \n| 参数       | 说明 | 类型            | 默认值 | 必选  | \n| ---------- | ---------- | ---------------  | ------ | ---- | \n| text       | 文本字段标记   | `Condition[]`     | - |            | \n| background | 背景字段标记   | `Condition[]`    | -      |            | \n| interval   | 柱状图字段标记 | `Condition[]`     | -      |            | \n| icon       | 图标字段标记   | `IconCondition[]` | -  |            | \n \n### Condition \n \n类型：`object`，**必选**，默认值：`undefined` \n \n<description>功能描述： 配置条件格式。包括文本 (text)，背景 (background)，柱状图 (interval)。</description> \n \n| 参数      | 说明                                | 类型         | 默认值      | 必选  | \n|---------|-----------------------------------|------------|----------|-----| \n| field   | 1. 字段 ID <br /> 2. 使用正则表达式匹配字段 ID | `string \\| RegExp` |     | ✓          | \n| mapping | 作用映射函数​                           | `function` |          | ✓   | \n \n#### mapping \n \n```typescript \ntype MappingFunction = ( \n  fieldValue: number | string | null, \n  data: Record<string, any> \n) => { \n  // 仅用于图标字段标记，可选 \n  icon?: string; \n \n  // 背景 ｜ 文本 ｜ 柱状图 | 图标 字段标记颜色填充，必选 \n  fill: string; \n \n  // 仅用于柱状图字段标记，可选 \n  isCompare?: boolean; \n  minValue?: number; \n  maxValue?: number; \n \n  // 仅用于背景字段标记，可选。（当背景颜色较暗，将文本颜色设置为白色。优先级低于 文本字段标记） \n  intelligentReverseTextColor?: boolean; \n} | null | undefined // 返回值为空时，表示当前字段不显示字段标记样式 \n \n``` \n \n**condition 用法示例：** \n \n```javascript \nconst options = { \n  conditions: { \n    text: [ \n      { \n        field: \"province\", \n        mapping: () => ({ \n          fill: \"rgba(0, 0, 0, .65)\", \n        }), \n      }, \n    ], \n    interval: [ \n      { \n        field: \"sub_type\", \n        mapping: () => { \n          return { \n            fill: \"green\", \n          }; \n        }, \n      }, \n    ], \n    background: [ \n      { \n        field: \"count\", \n        mapping: () => ({ \n          fill: \"#ff00ff\", \n        }), \n      }, \n    ], \n  }, \n}; \n \n``` \n \n### IconCondition \n \n类型：`object`，**必选**，默认值：`null` \n \n<description>功能描述： 配置图标 (icon) 条件格式。</description> \n \n| 参数     | 说明 | 类型     | 默认值  | 必选    | \n| -------- | ------------ | -------- | ------- | ----  | \n| field    | 字段 ID       | `string`   |                | ✓    | \n| position | icon 相较于文字的位置 | `left \\| right`   | `right` |         | \n| mapping  | 作用映射函数​ | `function` |                 | ✓    | \n \n**icon condition 用法示例：** \n \n```javascript \n const options = { \n  conditions: { \n    icon: [ \n      { \n        field: \"profit\", \n        position: \"left\", \n        mapping: () => { \n          return { \n            icon: \"InfoCircle\", \n            fill: \"red\", \n          }; \n        }, \n      }, \n    ], \n  }, \n}; \n \n``` \n \n \n \n## Totals \n \nobject **必选**,_default：null_ 功能描述： 小计总计配置 \n \n| 参数 | 说明   | 类型                                          | 必选  | 默认值 | \n| ---- | ------ | --------------------------------------------- | ---- | ------ | \n| row  | 行总计 | [Total](/docs/api/general/S2Options#total) |       |    | \n| col  | 列总计 | [Total](/docs/api/general/S2Options#total) |       |    | \n \n## Total \n \nobject **必选**,_default：null_ 功能描述： 小计总计配置 \n \n| 参数                | 说明                     | 类型         | 默认值  | 必选  | \n| ------------------- | ------------------------ | ------------ | ------- | ---- | \n| showGrandTotals     | 是否显示总计             | `boolean`    | `false` |      | \n| showSubTotals       | 是否显示小计。当配置为对象时，always 控制是否在子维度不足 2 个时始终展示小计，默认不展示             | `boolean \\| { always: boolean }`    | `false` |      | \n| subTotalsDimensions | 小计的汇总维度           | `string[]`   | `[]`    |      | \n| reverseLayout       | 总计布局位置，默认下或右 | `boolean`    | `false` |      | \n| reverseSubLayout    | 小计布局位置，默认下或右 | `boolean`    | `false` |      | \n| label               | 总计别名                 | `string`     |         |       | \n| subLabel            | 小计别名                 | `string`     |         |       | \n| calcTotals          | 自定义计算总计                 | [CalcTotals](#calctotals) |         |       | \n| calcSubTotals       | 自定义计算小计                 | [CalcTotals](#calctotals) |         |       | \n| totalsGroupDimensions                  | 总计的分组维度                                            |`string[]`    |                    |      | \n| subTotalsGroupDimensions               | 小计的分组维度                                            |  `string[]`            |                    |      | \n \n## CalcTotals \n \nobject **可选**,_default：null_ 功能描述： 计算小计总计配置 \n \n| 参数        | 说明       | 类型                                                                 | 必选  | 默认值 | \n| ----------- | ---------- | -------------------------------------------------------------------- | --- | ------ | \n| aggregation | 聚合方式   | `Aggregation.SUM` \\| `Aggregation.MIN` \\| `Aggregation.MAX` \\| `Aggregation.AVG`                                                                |       |        | \n| calcFunc    | 自定义方法 | `(query: Record<string, any>, arr: Record<string, any>[]) => number` |       |        | \n \n \n \n## Tooltip \n \nobject **可选**,_default：null_ 功能描述： tooltip 配置 \n \n| 参数               | 说明   | 类型      | 默认值 | 必选 | \n| ------------------ | ----------- | ----------- | ------ | --- | \n| showTooltip        | 是否展示 tooltip                                             | `boolean`                               | `true` |      | \n| operation          | tooltip 操作配置项    | [TooltipOperation](#tooltipoperation)   | -      |      | \n| row                | 行头配置    | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| col                | 列头配置     | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| data               | 数值配置  | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| corner             | 角头配置    | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| renderTooltip      | 自定义整个 tooltip, 可以继承 BaseTooltip 自己重写一些方法    | [RenderTooltip](#rendertooltip)         | -      |      | \n| content   | 自定义 tooltip 内容  | `ReactNode \\| Element \\| string` 或者 `(cell, defaultTooltipShowOptions) => ReactNode \\| Element \\| string`   | -      |      | \n| autoAdjustBoundary | 当 tooltip 超过边界时自动调整显示位置，container: 图表区域，body: 整个浏览器窗口，设置为 `null` 可关闭此功能 | `container` \\| `body`  | `body` |      | \n| adjustPosition | 自定义 tooltip 位置，| (positionInfo: [TooltipPositionInfo](#tooltippositioninfo) ) => {x: number, y: number}                  |  |      | \n| getContainer | 自定义 tooltip 挂载容器，| `() => HTMLElement`   | `document.body` |      | \n| className | 额外的容器类名，| `string`    | - |      | \n| style | 额外的容器样式，| [CSSProperties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference)  | - |      | \n \n### BaseTooltipConfig \n \nobject **可选**,_default：null_ 功能描述： tooltip 基础通用配置 \n \n| 参数             | 说明                    | 类型                                  | 默认值 | 必选 | \n| ---------------- | ----------------------- | ------------------------------------- | ------ | --- | \n| showTooltip      | 是否展示 tooltip        | `boolean`                             | `false` |      | \n| operation        | tooltip 操作配置项      | [TooltipOperation](#tooltipoperation) | -      |      | \n| content | 自定义 tooltip 内容 | `ReactNode \\| Element \\| string \\|` 或者 `(cell, defaultTooltipShowOptions) => ReactNode \\| Element \\| string`                       | -      |      | \n \n### TooltipPositionInfo \n \nobject **可选**,_default：null_ 功能描述： tooltip 坐标信息 \n \n| 参数             | 说明                    | 类型                                  | 默认值 | 必选 | \n| ---------------- | ----------------------- | ------------------------------------- | ------ | --- | \n| position      | 默认经过计算（默认偏移量 + autoAdjustBoundary）后的 Tooltip 位置坐标  |  [TooltipPosition](#tooltipposition)  |  | ✓| \n| event      | 当前点击事件信息 | Event | | ✓| \n \n### TooltipOperation \n \nobject **可选**,_default：null_ 功能描述： tooltip 操作配置项 \n \n| 参数          | 说明                          | 类型      | 默认值  | 必选 | \n| ------------- | ----------------------------- | --------- | ------- | --- | \n| hiddenColumns | 是否开启隐藏列（叶子节点有效）   | `boolean` | `false`  |      | \n| trend         | 是否显示趋势图 icon           | `boolean` | `false` |      | \n| sort          | 是否开启组内排序              | `boolean` | `false` |      | \n| tableSort     | 是否开启明细表列头排序         | `boolean` | `false` |      | \n| menus         | 自定义操作配置项         | [TooltipOperatorMenu[]](#tooltipoperatormenu) | `-` |      | \n| onClick       | 操作项点击回调函数         | `({ item, key, keyPath, domEvent }) => void` | `-` |      | \n \n \n \n## TooltipShowOptions \n \nobject **必选**,_default：null_ 功能描述： tooltip 显示配置 \n \n| 参数      | 类型      | 必选  | 默认值 | 功能描述            | \n| --------- | ------- | ------ | ------ | ------------------- | \n| position  | [TooltipPosition](#tooltipposition)       |   ✓   |        | tooltip 显示位置    | \n| data      | [TooltipData](#tooltipdata)      |       |        | tooltip 数据        | \n| cellInfos | `Record<string, any>`        |       |        | 单元格信息          | \n| options   | [TooltipOptions](#tooltipoptions)    |       |        | tooltip 部分配置    | \n| content   | `ReactNode \\| string` \\| 或者 `(cell, defaultTooltipShowOptions: TooltipShowOptions) => ReactNode \\| string` |       |        | 自定义 tooltip 内容 | \n| event     | `Event`  |       |        | 当前事件 Event      | \n \n### TooltipPosition \n \nobject **必选**,_default：null_ 功能描述： tooltip 坐标 \n \n| 参数 | 类型     | 必选  | 默认值 | 功能描述 | \n| ---- | -------- | ------ | ------ | -------- | \n| x    | `number` |   ✓   |        | 横坐标   | \n| y    | `number` |   ✓   |        | 纵坐标   | \n \n### TooltipData \n \nobject **可选**,_default：null_ 功能描述： tooltip 数据 \n \n| 参数      | 类型                                            | 必选  | 默认值 | 功能描述                             | \n| --------- | ----------------------------------------------- | ------ | ------ | ------------------------------------ | \n| summaries | [TooltipSummaryOptions](#tooltipsummaryoptions) |       |        | 所选项统计（按度量值区分）列表       | \n| details   | [ListItem](#listitem)                           |       |        | 数据点明细信息                       | \n| headInfo  | [TooltipHeadInfo](#tooltipheadinfo)             |       |        | 轴（行/列头）列表                    | \n| name      | `string`                                        |       |        | 当前单元格名称                       | \n| tips      | `string`                                        |       |        | 提示/说明信息                        | \n| infos     | `string`                                        |       |        | 底部提示信息（可用于快捷键操作提示） | \n \n#### TooltipSummaryOptions \n \nobject **可选**,_default：null_ 功能描述： tooltip 所选项统计（按度量值区分）列表 \n \n| 参数         | 类型                  | 必选  | 默认值 | 功能描述           | \n| ------------ | --------------------- | ------ | ------ | ------------------ | \n| name         | `string`              |   ✓   |        | 名称               | \n| value        | `number \\| string`     |   ✓   |        | 值                 | \n| selectedData | `Record<string, any>` |   ✓   |        | 当前选择的数据列表 | \n \n#### TooltipHeadInfo \n \nobject **可选**,_default：null_ 功能描述： tooltip 轴（行/列头）列表 \n \n| 参数 | 类型                  | 必选  | 默认值 | 功能描述 | \n| ---- | --------------------- | ------ | ------ | -------- | \n| rows | [ListItem](#listitem) |   ✓   |        | 行头列表 | \n| cols | [ListItem](#listitem) |   ✓   |        | 列头列表 | \n \n#### ListItem \n \nobject **可选**,_default：null_ 功能描述： tooltip 数据点明细数据 \n \n| 参数  | 类型              | 必选  | 默认值 | 功能描述       | \n| ----- | ----------------- | ------ | ------ | -------------- | \n| name  | `string`          |   ✓   |        | 名称           | \n| value | `string \\| number` |   ✓   |        | 值             | \n| icon  | `ReactNode` |       |        | 自定义图标组件 | \n \n### TooltipOptions \n \nobject **必选**,_default：null_ 功能描述： tooltip 部分配置 \n \n| 参数           | 类型                                              | 必选  | 默认值 | 功能描述                     | \n| -------------- | ------------------------------------------------- | ------ | ------ | ---------------------------- | \n| hideSummary    | `boolean`                                         |       |     `false`    | 是否隐藏所选项统计信息       | \n| operator       | [TooltipOperatorOptions](#tooltipoperatoroptions) |       |        | 操作栏配置                   | \n| onlyMenu       | `boolean`                                         |       |      `false`   | tooltip 是否只展示操作菜单项 | \n| enterable      | `boolean`                                         |       |      `false`   | 是否可进入 tooltip 组件      | \n| isTotals       | `boolean`                                         |       |      `false`   | 是否是 总计/小计 单元格      | \n| showSingleTips | `boolean`                                         |       |     `false`    | 是否显示单元格提示信息       | \n| enableFormat | `boolean`                                         |       |     `false`    | 是否开启格式化       | \n| forceRender | `boolean`                                         |       |    `false`    | 是否强制清空 dom       | \n| data | [TooltipData](#tooltipdata)                                         |       |    `-`    | 自定义 tooltip 数据       | \n \n#### TooltipOperatorOptions \n \nobject **可选**,_default：null_ 功能描述： tooltip 操作栏配置 \n \n| 参数    | 类型                                         | 必选  | 默认值 | 功能描述                                                                                   | \n| ------- | -------------------------------------------- | ------ | ------ | ------------------------------------------------------------------------------------------ | \n| menus   | [TooltipOperatorMenu[]](#tooltipoperatormenu)  |     |        | 操作项列表  | \n| onClick | `({ item, key, keyPath, domEvent }) => void` |      |        | 点击事件，透传 `antd` `Menu` 组件的 [onClick](https://ant.design/components/menu-cn/#Menu) | \n| defaultSelectedKeys   | `string[]`  |     |        | 初始选中的菜单项 key 数组，透传 `antd` `Menu` 组件的 [defaultSelectedKeys](https://ant.design/components/menu-cn/#Menu)  | \n \n##### TooltipOperatorMenu \n \nobject **必选**,_default：null_ 功能描述： tooltip 操作项列表 \n \n| 参数     | 类型                                        | 必选  | 默认值 | 功能描述       | \n| -------- | ------------------------------------------- | ------ | ------ | -------------- | \n| key      | `string`                                    |   ✓   |        | 唯一标识       | \n| text     | `ReactNode \\| string`   |       |        | 名称           | \n| icon     | `ReactNode \\| string`   |       |        | 自定义图标     | \n| visible  | `boolean \\| (cell) => boolean`                           |      |   `true`      | 操作项是否显示，可传入一个函数根据当前单元格信息动态显示     | \n| onClick  | (`cell`: [S2CellType](/docs/api/basic-class/base-cell): ) => void                           |       |        | 点击事件回调  (cell 为当前 tooltip 对应的单元格）   | \n| children | [TooltipOperatorMenu](#tooltipoperatormenu) |       |        | 子菜单列表     | \n \n \n \n## Pagination \n \nboolean ｜ object **必选**,_default: null_ 功能描述： 分页配置 \n \n| 参数      | 说明          | 类型   | 默认值 | 必选  | \n| --------- | ------------------- | ------ | ------ | --  | \n| pageSize  | 每页数量            | `number` | - |  ✓   | \n| current   | 当前页（从 1 开始） | `number` |       1      |  ✓   | \n| total     | 数据总条数          | `number` | - |      | \n \n \n \n## Style \n \nobject **必选**,_default：null_ 功能描述：样式设置 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| layoutWidthType | `adaptive \\| colAdaptive \\| compact` |    |  | 单元格宽度布局类型<br> `adaptive` : 行列等宽，均分整个表格 (`Canvas`) 画布宽度 <br> `colAdaptive`：列等宽，行头紧凑布局，列等分画布宽度减去行头宽度的剩余宽度<br> `compact`：行列紧凑布局，列头宽度为内容实际宽度 （采样列前 50 个数值）, 指标维度少的时候无法布满整个画布 | \n| showTreeLeafNodeAlignDot | `boolean` |  |  false  | 树状模式下叶子节点是否显示层级占位点 | \n| treeRowsWidth | `number` |  |  120  | 树状模式行单元格宽度 （优先级大于 `rowCfg.width` 和 `rowCfg.treeRowsWidth （已废弃）`) | \n| hierarchyCollapse | `boolean` |  |   `false` | 在树状结构模式下行头是否默认展开。 | \n| rowExpandDepth | `number` |  |    | 在树状结构模式下行头默认展开展开的层级（层级从 0 开始）。 | \n| collapsedRows | `Record<string, boolean>` |  |  | 树状模式下行头自定义折叠、收起状态（透视表使用）。<br> key 值的生成需遵守指定的规则：'root[&] 行头维度值'。 [查看 demo](/examples/basic/pivot#tree) | \n| cellCfg | [CellCfg](#cellcfg) |  |  |   单元格配置 | \n| colCfg | [ColCfg](#colcfg) |  |  |   列样式配置 | \n| rowCfg | [RowCfg](#rowcfg) |  |  |   行样式配置 | \n| device | `pc \\| mobile` | |  `pc` | 设备类型 | \n \n## CellCfg \n \nobject **必选**,_default：null_ 功能描述：数值单元格配置 \n \n| 参数    | 说明 | 类型   | 默认值 | 必选  | \n| ------- | ------------ | ------ | ------ | ---- | \n| width   | 单元格宽度   | `number` |    96 | - | \n| height  | 单元格高度   | `number` |    30 | - | \n| valuesCfg  | 单元格配置   | `{ originalValueField?: string, widthPercent?: number[], showOriginalValue?: boolean }` |   | - | \n \n## ColCfg \n \nobject **必选**,_default：null_ 功能描述： 列样式配置 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| width |   单元格宽度，可根据当前列头节点动态设置宽度 （叶子节点有效） | `number \\| (colNode: Node) => number` |  |  | \n| height |  单元格高度 | `number` | 30 |  | \n| widthByFieldValue | 根据度量值设置宽度（拖拽或者预设宽度场景）, `fieldValue` 对应 `s2DataConfig.fields.columns` 中的列头数值 | `Record<string, number>`   | - |  | \n| heightByField | 根据度量值设置高度（拖拽或者预设高度场景）, `field` 对应 列头 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>`   | - |  | \n| hideMeasureColumn | 默认数值挂列头，会同时显示列头和数值，隐藏数值列，使其更美观。（仅在单数值时有效，多数值时推荐使用 [隐藏列头](https://s2.antv.vision/manual/advanced/interaction/hide-columns#2-%E9%80%8F%E8%A7%86%E8%A1%A8)) | `boolean` | false |  | \n \n## RowCfg \n \nobject **必选**,_default：null_ 功能描述： 行样式配置 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| width | 行单元格宽度，可根据当前行头节点动态设置宽度，如果是树状结构，请使用 `styles.treeRowsWidth` | `number \\| (rowNode: Node) => number` | 96 |  | \n| treeRowsWidth | 树状结构下，行单元格宽度 (**已废弃，请使用 `style.treeRowsWidth` 代替**) | `number` | 120 |  | \n| widthByField | 根据 `field` 设置每行的宽度。`field` 是行的 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | - |  | \n| heightByField | 根据 `field` 设置每行的高度。`field` 是行的 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | - |  | \n \n \n## DataCellCallback \n \n```js \nDataCellCallback = (viewMeta: ViewMeta, s2: Spreadsheet) => G.Group; \n``` \n \nFunction description: custom value cell, [ViewMeta](#viewmeta) \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n## Cell Callback \n \n```js \nCellCallback = (node: Node, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => G.Group; \n``` \n \nFunction description: custom cell \n \n| parameter   | illustrate                                                           | type                                                | Defaults | required | \n| ----------- | -------------------------------------------------------------------- | --------------------------------------------------- | -------- | :------: | \n| node        | The currently rendered node node                                     | [node](/docs/api/basic-class/node)               | -        |     ✓    | \n| spreadsheet | Table class instance, which can access any configuration information | [SpreadSheet](/docs/api/basic-class/spreadsheet) | -        |     ✓    | \n| restOptions | Indeterminate parameters, pass additional information                | `unknown[]`                                         | -        |          | \n \n## CornerHeaderCallback \n \n```js \nCornerHeaderCallback = (parent: S2CellType, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => void; \n``` \n \nFunction description: custom corner head \n \n| parameter   | illustrate                                                           | type                                                | Defaults | required | \n| ----------- | -------------------------------------------------------------------- | --------------------------------------------------- | -------- | :------: | \n| parents     | parent cell                                                          | [S2CellType](#s2celltype)                           | -        |     ✓    | \n| spreadsheet | Table class instance, which can access any configuration information | [SpreadSheet](/docs/api/basic-class/spreadsheet) | -        |     ✓    | \n| restOptions | Indeterminate parameters, pass additional information                | `unknown[]`                                         | -        |          | \n \n \n## LayoutHierarchy \n \n```js \nLayoutHierarchy = (spreadsheet: SpreadSheet, node: Node) => LayoutHierarchyReturnType; \n``` \n \n功能描述：自定义层级结构 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| node | [Node](/docs/api/basic-class/node) | ✓ |  |   当前渲染的 node 节点 | \n \n```ts \ninterface LayoutHierarchyReturnType { \n  push?: Node[]; \n  unshift?: Node[]; \n  delete?: boolean; \n} \n``` \n \n \n \n## LayoutArrange \n \n```js \nLayoutArrange = (spreadsheet: SpreadSheet, parent: Node, field: string, fieldValues: string[]) => string[]; \n``` \n \n功能描述：自定义顺序 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| node | [Node](/docs/api/basic-class/node) | ✓ |  |   当前渲染的 node 节点 | \n| field | `string` | ✓ |  |   当前的字段名 | \n| fieldValues | `string[]` | ✓ |  |   当前字段值 | \n \n \n## LayoutCoordinate \n \n```js \nLayoutCoordinate = (spreadsheet: SpreadSheet, rowNode: Node, colNode: Node) => void \n``` \n \n功能描述：自定义坐标 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| rowNode | [Node](/docs/api/basic-class/node) | ✓ |    | 行节点 | \n| colNode | [Node](/docs/api/basic-class/node) | ✓ |    | 列节点 | \n \n \n \n## LayoutDataPosition \n \n```js \nLayoutDataPosition = (spreadsheet: SpreadSheet, getCellData: GetCellMeta) => GetCellMeta \n``` \n \n功能描述：自定义数据 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | --- | ---  | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| getCellData | [GetCellMeta](#viewmeta) | ✓ |    | 获取单元格数据和位置等信息| \n \n```ts \ntype GetCellMeta = (rowIndex?: number, colIndex?: number) => ViewMeta; \n``` \n \n \n \n## HeaderActionIcon \n \n功能描述：为表格行列头角头注册自定义操作 `icon`。如果该配置位空，则展示透视表默认操作icon。 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | 版本 | \n| --- | --- | ---  | --- | --- | --- | \n| iconNames | string[] | ✓ |    | 已经注册的 icon 名称，或用户通过 customSVGIcons 注册的 icon 名称 | | \n| belongsCell | string[] | ✓ | |   需要增加操作图标的单元格名称 cornerCell、colCell、rowCell | | \n| defaultHide | boolean \\| (mete: Node, iconName: string)=> boolean  |  |  |   是否默认隐藏, 如果为 true 则为 hover 后再显示；false 则始终显示  | `1.26.0` 支持配置为一个函数 | \n| displayCondition | (mete: Node, iconName: string)=> boolean |  |  | 展示的过滤条件，可以通过该回调函数用户自定义行列头哪些层级或单元格需要展示 icon。 所有返回值为 true 的 icon 会展示给用户。 | `1.26.0` 回传 `iconName` 并按单个 icon 控制显隐 | \n| action | (headerActionIconProps: HeaderActionIconProps) => void; | ✓ |  | icon 点击之后的执行函数 | 已废弃，请使用 `onClick` | \n| onClick    | `(headerIconClickParams: HeaderIconClickParams) => void;` |   ✓      |     |    | `1.26.0` | \n| onHover   | `(headerIconHoverParams: HeaderIconHoverParams) => void;` |        |     |    | `1.26.0` | \n \n \n## HeaderActionIconProps \n \nFunction description: After clicking the custom operation icon, the current icon returned by the pivot table is related \n \n| parameter | illustrate                               | type   | Defaults | required | \n| --------- | ---------------------------------------- | ------ | -------- | :------: | \n| iconName  | The name of the currently clicked icon   | string | -        |     ✓    | \n| meta      | The meta information of the current cell | node   | -        |     ✓    | \n| event     | Current click event information          | event  | false    |     ✓    | \n \n## CustomSVGIcon \n \n功能描述：用于用户注册自己的 `icon` 图标， 目前只支持 `svg` 格式 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| name | string | ✓ |    | icon 名称 | \n| svg | string | ✓ |    | 目前支持三种格式的svg字符串：base64、svg本地文件、线上图片地址 | \n \n \n## FilterDataItemCallback \n \n```js \nFilterDataItemCallback = (valueField: string, data: DataItem) => DataItem \n``` \n \nFunction description: convert, filter data \n \n| parameter  | illustrate                                                           | type                  | Defaults | required | \n| ---------- | -------------------------------------------------------------------- | --------------------- | -------- | :------: | \n| valueField | Table class instance, which can access any configuration information | `string`              | -        |     ✓    | \n| data       | Data Format                                                          | [DataItem](#dataitem) | -        |     ✓    | \n \n## MappingDataItemCallback \n \n```js \nMappingDataItemCallback = (valueField: string, data: DataItem) => Record<string, string | number> | DataItem; \n``` \n \nFunction description: data implicit, used to display in tooltip \n \n| parameter  | illustrate                                                           | type                  | Defaults | required | \n| ---------- | -------------------------------------------------------------------- | --------------------- | -------- | :------: | \n| valueField | Table class instance, which can access any configuration information | `string`              | -        |     ✓    | \n| data       | Data Format                                                          | [DataItem](#dataitem) | -        |     ✓    | \n \n## DataItem \n \nFunction description: basic data format \n \n```ts \nexport interface MultiData { \n  label?: string; \n  values: (string | number)[][]; \n} \n \nexport type SimpleDataItem = string | number; \n \nexport type DataItem = SimpleDataItem | MultiData; \n``` \n \n## LayoutResult \n \n| parameter      | illustrate                                                                    | type                                                | Defaults | required | \n| -------------- | ----------------------------------------------------------------------------- | --------------------------------------------------- | -------- | :------: | \n| colNodes       | all nodes in the column                                                       | [Node\\[\\]](/docs/api/basic-class/node)           |          |          | \n| cols Hierarchy | column structure information                                                  | [Hierarchy](#hierarchy)                             |          |          | \n| rowNodes       | all nodes of the row                                                          | [Node\\[\\]](#node)                                   |          |          | \n| rowsHierarchy  | row structure information                                                     | [Hierarchy](#hierarchy)                             |          |     ✓    | \n| rowLeafNodes   | All leaf nodes of the row, for Cartesian intersection                         | [Node\\[\\]](/docs/api/basic-class/node)           |          |          | \n| colLeafNodes   | All leaf nodes of the column, for Cartesian intersection                      | [Node\\[\\]](/docs/api/basic-class/node)           |          |          | \n| getViewMeta    | Obtain the information corresponding to the coordinates of \\[x,y] crossed out | `(rowIndex: number, colIndex: number) => ViewMeta`  |          |          | \n| spreadsheet    | Table class instance, which can access any configuration information          | [SpreadSheet](/docs/api/basic-class/spreadsheet) |          |          | \n \n## DataSet \n \n```js \nDataSet = (spreadsheet: SpreadSheet) => BaseDataSet; \n``` \n \n## MergedCellInfo \n \n \n<description> **optional**  _MergedCellInfo[][]_   default: `undefined` </description> \n \n设置默认合并的单元格信息 \n \n| 参数            | 说明     | 类型        | 默认值 | 必选 | \n| --------------- |------| ---------------------- | ------ | ---- | \n| colIndex        | 单元格的列索引      | `number`   | -      |      | \n| rowIndex        | 单元格的行索引  | `number`   | -      |      | \n| showText        | 设置 `showText: true` 时，则展示当前格子的 `meta` 信息为合并后单元格的 `meta`。<br/> 默认使用第一个选中点击的单元格。 | `booelan`      | -      |      | \n \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"table",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/jWifHNLOsB/08db1064-bb09-4d44-b42b-26aed1766545.png",source:"import { TableSheet } from '@antv/s2';\n\nfetch('https://assets.antv.antgroup.com/s2/basic-table-mode.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        columns: ['province', 'city', 'type', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      showSeriesNumber: true,\n    };\n\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"明细表模式",en:"Table mode"},filename:"table.ts",isNew:!1},{id:"table-column-group",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*DgnhTYveL1AAAAAAAAAAAAAADmJ7AQ/original",source:"import { TableSheet } from '@antv/s2';\n\nfetch('https://assets.antv.antgroup.com/s2/basic-table-mode.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        columns: [\n          {\n            key: 'area',\n            children: ['province', 'city'],\n          },\n          'type',\n          {\n            key: 'money',\n            children: [{ key: 'price' }],\n          },\n        ],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n        {\n          field: 'area',\n          name: '位置',\n        },\n        {\n          field: 'money',\n          name: '金额',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      showSeriesNumber: true,\n    };\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"列分组",en:"Column Group"},filename:"table-column-group.ts",isNew:!1}],icon:"",id:"table",title:{en:"Basic table",zh:"基础明细表"},api:{zh:"# S2DataConfig \n \n \nDemo of the DataConfig \n \n```ts \nconst s2DataConfig = { \n  data: [], \n  meta: [], \n  sortParams: [], \n  fields: { \n    rows: [], \n    columns: [], \n    values: [] \n  } \n} \n``` \n \nTabular data configuration \n \n| parameter  | illustrate                                                      | type                        | Defaults | required | \n| :--------- | :-------------------------------------------------------------- | :-------------------------- | :------- | :------- | \n| data       | Raw data                                                        | [Data\\[\\]](#data)           |          | ✓        | \n| fields     | dimension index                                                 | [Fields](#fields)           |          | ✓        | \n| totalData  | Total/Subtotal Data                                             | [Data\\[\\]](#data)           |          |          | \n| meta       | Field metadata, configurable field aliases and value formatting | [Meta\\[\\]](#meta)           |          |          | \n| sortParams | Sorting parameter configuration                                 | [SortParam\\[\\]](#sortparam) |          |          | \n \n### Data \n \nstring | number | [MiniChartData](#minichartdata) | [MultiData](#multidata) **required** , *default: null* \n \nFunction description: Set the data source data source of the table, for example: \n \n```ts \nconst data = [ \n  { \n    area: '东北', \n    province: '吉林', \n    city: '白山', \n    type: '办公用品', \n    subType: '纸张', \n    cost: '2', \n  }, \n  { \n    area: '东北', \n    province: '吉林', \n    city: '白山', \n    type: '办公用品', \n    subType: '笔', \n    cost: '3', \n  } \n]; \n``` \n \n### Fields \n \nobject is **required** , *default: null* \n \nFunction description: Configure the dimension field of the table, that is, the corresponding row and column dimensions \n \n| Configuration item name | illustrate                                                           | type                                  | Defaults | required | \n| :---------------------- | :------------------------------------------------------------------- | :------------------------------------ | :------- | :------- | \n| rows                    | list of row dimensions                                               | `string[]`                            | `[]`     |          | \n| customTreeItems         | Customize the header directory tree                                  | [CustomTreeItem[]](#customtreeitem) |          |          | \n| columns                 | list of column dimensions                                            | [Columns[]](#columns) | `[]`     |          | \n| values                  | List of Metric Dimensions                                            | `string[]`                            | `[]`     |          | \n| valueInCols             | Whether the indicator dimension is at the column header              | `boolean`                             | `true`   |          | \n| customValueOrder        | Position order of custom metric dimensions in row and column headers  [example](/en/examples/custom/custom-layout/#custom-value-order) | `number`                              | -        |          | \n \n### Meta \n \narray object **required** , *default: null* \n \nFunction description: Field metadata, configurable field alias and value formatting. \n \n| parameter   | illustrate | type                           | Defaults             | required              | \n| :---------- | :---- | :----------------------------- | :------------------- | :-------------------- | \n| field       | field id | `string`  |  |                       | \n| name   | Field Name  | `string`  |  |   | \n| description | Field description, which will be displayed in the tooltip corresponding to the row header, column header, and cell   | `string` |   |   | \n| formatter   | Formatting cells, row headers and column headers support formatting, but corner headers do not support formatting. The second parameter exists only for cells. Numerical fields: generally used to format numeric units Text fields: generally used as aliases for field enumeration values The second parameter will be passed in in the following situations: data cell formatting, copy/export, tooltip display ( **and only when selected When there are multiple cells, the data type is an array** ) | \\`(value: unknown, data?: Data | Data\\[], meta?: Node | ViewMeta) => string\\` | \n \n### MiniChartData \n \n \n#### renderMiniChart \n \nDraw mini charts in cells (support line charts, bullet charts, histograms) \n \n```ts \n renderMiniChart = (cell: S2CellType, data?: BaseChartData | BulletValue) => void; \n``` \n \n#### BaseChartData \n \nLine chart, histogram data configuration items, data format refer to `g2` \n \n| parameter      | illustrate                                                                                                   | type                     | required | Defaults | \n| -------------- | ------------------------------------------------------------------------------------------------------------ | ------------------------ | -------- | -------- | \n| type           | mini-chart type                                                                                              | `string` (line/bar)      | ✓        |          | \n| encode         | Encoding method, declare the corresponding column data bound to the x position channel or y position channel | `{x: string; y: string}` | ✓        |          | \n| data           | Raw data                                                                                                     | [Data\\[\\]](#data)        |          | ✓        | \n| \\[key: string] | Other transparent fields for customized display of custom cells                                              | `unknown`                |          |          | \n \n#### BulletValue \n \nBullet chart data configuration items \n \n| parameter      | illustrate                                                      | type              | required | Defaults | \n| -------------- | --------------------------------------------------------------- | ----------------- | -------- | -------- | \n| type           | mini-chart type                                                 | `string` (bullet) | ✓        | bullet   | \n| measure        | current indicator                                               | `number/string`   | ✓        |          | \n| target         | target value                                                    | `number/string`   | ✓        |          | \n| \\[key: string] | Other transparent fields for customized display of custom cells | `unknown`         |          |          | \n \n \n### MultiData \n \nobject is **required** , *default: null* \n \nFunction description: used to support custom data cell rendering of multiple indicator types. Example: [Trend Analysis Table](/examples/react-component/sheet#strategy) \n \n| Configuration item name | illustrate                                                      | type      | Defaults        | required | \n| :---------------------- | :-------------------------------------------------------------- | :-------- | :-------------- | :------- | \n| values                  | The formatted data is directly displayed in dataCfg             | \\`(string | number)\\[]\\[]\\` | ✓        | \n| originalValues          | raw data, for raw data export                                   | \\`(string | number)\\[]\\[]\\` |          | \n| label                   | Used as a subtitle of a cell, displayed on a separate line      | `string`  |                 |          | \n| \\[key: string]          | Other transparent fields for customized display of custom cells | `unknown` | \\`\\`            |          | \n \n \n### SortParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`     | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）         | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`                              | -      |      | \n| type          | 组内排序用来显示 icon （透视表适用）          | `string`                              | -      |      | \n| sortFunc      | 自定义排序的 function                        | (params: [SortFuncParam](#sortfuncparam)) => `string[]` | -      |      | \n \n#### SortFuncParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`    | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）      | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`    | -      |      | \n| type          | 组内排序用来显示 icon（透视表适用）             | `string`                              | -      |      | \n| data          | 当前排序数据列表                            | `Array<string \\| Record<string, any>>` | -      |      | \n \n \n \n### CustomTreeItem \n \n[详细说明](/docs/manual/advanced/custom/category-tree) [例子](/examples/custom/custom-tree#custom-tree) \n \n功能描述：自定义树状结构的配置，兼容 [antd Tree](https://ant.design/components/tree-cn/) 数据配置项； \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| key | 当前节点唯一标识 | `string` |    | ✓ | \n| title | 当前节点展示名 | `string` |    | ✓ | \n| collapsed | 节点是否收起（只会在自身代表非叶子节点生效） | `boolean` |  `false`  |  | \n| description | 节点的额外描述信息，在对应行头的 tooltip 中展示 | `string` |    |  | \n| children | 子节点 | [CustomTreeItem[]](#custom-tree-item) |    |  | \n \n \n### Columns \n \n`Array<ColumnNode | string>` \n \n列配置数组，在明细表模式下支持使用 [ColumnNode](#columnnode) 结构来描述列分组关系 \n \n### ColumnNode \n \n| 属性名称 | 说明     | 类型   | 默认值 | 必选 | \n| ------- | ---------| -------| ------|------| \n| name | 列字段 id 或分组 id   | string |       | ✓ | \n| children | 分组下面的子级  | Array\\<ColumnNode \\| string\\> |       |  | \n \n \n# S2Options \n \n \nForm parameter configuration \n \n\\| parameter | type | required | default value | function description| | :-- | :-- | :-: | :-- | :-- | --- | `number` | width| | height | `number` | | 480 | table height| | debug | `boolean` | | `false` | whether to enable debug mode| `grid` | hierarchyType | `grid` | `tree` | `customTree` | grid structure, tree: tree structure. [customTree](#tooltip) : custom tree structure | | conditions | [Conditions](#conditions) | | | condition pattern configuration | [](#interaction)| totals | [Totals](#totals) | | | | | Table Interaction Configuration| | pagination | [Pagination](#pagination) | | | `false` Configuration| `boolean` | `true` | `boolean` | | `false` | `boolean` | | `true` | `false` to display the default row header action icon | `showDefaultHeaderActionIcon` | [headerActionIcons](#headeractionicon) [|](#customsvgicon) `false` | custom svg icon| | style | [Style](#style) | | | cell style settings, such as layout type, width and height, margin, whether to hide the value column header, etc. | | frozenRowCount | `number` | | | the number of frozen rows, from counting from top (valid for schedules) | | frozenColCount | `number` | | | number of frozen columns, counting from left (valid for schedules) | | frozenTrailingRowCount | `number` | | | number of frozen rows, counting from bottom ( list is valid) | | frozenTrailingColCount | `number` | | | the number of frozen columns, counting from the right side (schedule is valid) | | `true` | `boolean` | | Blurred font rendering on high-definition retina screens| | mergedCellsInfo | [MergedCellInfo\\[\\]\\[\\]](#mergedcellinfo) | | | merged cell information| | placeholder | `(meta: Record<string, any>) => string | string` | | | fill content of empty cells | | cornerText | string | | | custom corner header text (valid when custom tree `hierarchyType: customTree` ) | | The text of the virtual value field of the corner head (valid when the value is the row header, replace the two words \"value\") | | dataCell | [DataCellCallback](#datacellcallback) | | | custom cell | | cornerCell | [CellCallback](#cellcallback) | | | custom cornerCell | | rowCell | [CellCallback](#cellcallback) | | | custom row header cell | | colCell | [CellCallback](#cellcallback) | | | custom column header cell | | cornerHeader | [CornerHeaderCallback](#cornerheadercallback) | | | custom corner header | | [layoutHierarchy](#layouthierarchy) | struct | | [layoutArrange](#layoutdataposition) | [LayoutArrange](#layoutarrange) | | | custom sort order | | layoutCoordinate | [layoutCoordinate](#layoutcoordinate) | [|](#filterdataitemcallback) | | `false` | [MappingDataItemCallback](#mappingdataitemcallback) | | | Convert data for tooltip display| | dataSet | [DataSet](#dataset) | | | custom data set| `transform` | supportCSSTransform | `boolean` | , mouse coordinates respond incorrectly| | devicePixelRatio | `number` | | `window.devicePixelRatio` | custom device pixel ratio| \n \n \n## Interaction \n \n| 参数    | 说明   | 类型                                        | 默认值   |        必选        | \n| -------- | ----------- |-------------------------------------------| -------- | ---------------- | \n| linkFields  | 标记字段为链接样式，用于外链跳转  | `string[]` \\| (meta: [Node](/docs/api/basic-class/node) \\| ViewMeta) => boolean    |    |    | \n| selectedCellsSpotlight               | 是否开启选中高亮聚光灯效果    | `boolean`                                 | `false`      |                  | \n| hoverHighlight                       | 鼠标悬停时高亮当前单元格，以及所对应的行头，列头<br/>rowHeader：是否高亮悬停格子所在行头<br/>colHeader：是否高亮悬停格子所在列头<br/>rowCells：是否高亮悬停格子所在行<br/>colCells：是否高亮悬停格子所在列<br/>true：同 `{rowHeader: true, colHeader: true, currentRow: true, currentCol: true}`                                                                                                                 | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, rowCells?: boolean, colCells?: boolean}`                                 | `true`                                                |                  | \n| hoverFocus                           | 鼠标悬停在当前单元格超过默认 800ms 后，保持当前高亮，显示 tooltip，悬停时间通过设置 `duration` 来控制   | `boolean  \\| {duration: number}`                                   |      `true`      |       | \n| hiddenColumnFields                   | 用于配置默认隐藏的列，透视表需要配置列头唯一 id, 明细表配置列头 field 字段即可                                                                                          | `string[]`                                |                                                       |                  | \n| enableCopy                           | 是否允许复制                                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| copyWithHeader                       | 复制数据是否带表头信息                                                                                                                            | `boolean`                                 | `false`                                               |                  | \n| copyWithFormat                       | 是否使用 field format 格式复制                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| customInteractions                   | 自定义交互 [详情](/docs/manual/advanced/interaction/custom)                                                                                | [CustomInteraction[]](#custominteraction) |                                                       |                  | \n| scrollSpeedRatio                     | 用于控制滚动速率，分水平和垂直两个方向，默认为 1                                                                                                              | [ScrollSpeedRatio](#scrollspeedratio)     |                                                       |                  | \n| autoResetSheetStyle                  | 用于控制点击表格外区域和按下 esc 键时是否重置交互状态                                                                                                          | `boolean`                                 | `true`                                                |                  | \n| resize                               | 用于控制 resize 热区是否显示     | `boolean`  \\| [ResizeInteractionOptions](#resizeinteractionoptions) |      `true`      |       | \n| brushSelection         | 是否允许单元格（包含行头，列头，数值单元格）刷选。    | `boolean` \\|  [BrushSelection](#brushSelection)  | `true`                         |     |  1.29.0 后支持 [BrushSelection](#brushSelection)   | \n| multiSelection                       | 是否允许多选 （包含行头，列头，数值单元格）                                                                                                                 | `boolean`                                 | `true`                                                |                  | \n| rangeSelection                       | 是否允许区间快捷多选                                                                                                                             | `boolean`                                 | `true`                                                |                  | \n| scrollbarPosition                    | 用于控制滚动条展示在内容区边缘还是画布边缘                                                                                                                  | `content \\| canvas`                                              |    `content`     |   | \n| eventListenerOptions                 | 事件监听函数 `addEventListener` 的 [可选项配置](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener), 可控制事件从冒泡阶段还是捕获阶段触发 | `false`                                   |                                                       | \n| selectedCellHighlight                | 选中格子后的高亮行为<br/>rowHeader：是否高亮选中格子所在行头<br/>colHeader：是否高亮选中格子所在列头<br/>currentRow：是否高亮选中格子所在行<br/>currentCol：是否高亮选中格子所在列<br/>true：同{rowHeader: true, colHeader: true}     | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, currentRow?: boolean, currentCol?: boolean }` | `false`                                               |                  | \n| overscrollBehavior                   | 控制滚动至边界的行为，可禁用浏览器的默认滚动行为。[详情](/docs/manual/advanced/interaction/basic/#修改滚动至边界行为)  | `auto \\| contain \\| none \\| null`  |  `auto` | \n| hoverAfterScroll                   | 滚动结束后是否在当前鼠标所处单元格自动触发悬停表现  | `boolean`  |  `false` | \n \n### CustomInteraction \n \n功能描述：自定义交互，继承 baseEvent:  [具体例子](/docs/manual/advanced/interaction/custom) \n \n| 参数        | 说明           | 类型                                              | 默认值 | 必选  | \n| ----------- | -------------- | ------------------------------------------------- | ------ | --- | \n| key         | 交互的唯一标识 | `string`                                          |        |   ✓   | \n| interaction |                | [InteractionConstructor](/docs/api/basic-class/interaction#interactionconstructor) |        |   ✓   | \n \n### ScrollSpeedRatio \n \n```js \ninterface ScrollSpeedRatio { \n  horizontal?: number; // 水平滚动速率，默认为 1 \n  vertical?: number; // 垂直滚动速率，默认为 1 \n} \n``` \n \n### ResizeInteractionOptions \n \n| 参数                 | 说明     | 类型    | 默认值 | 必选  | \n| -------------------- | ------- | ----------------- | ------ | --- | \n| rowCellVertical      | 是否开启行头垂直方向 resize 热区                                                   | `boolean`         | true   |       | \n| cornerCellHorizontal | 是否开启角头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellHorizontal    | 是否开启列头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellVertical      | 是否开启列头垂直方向 resize 热区 （列头隐藏时该配置无效）                                                   | `boolean`         | true   |       | \n| rowResizeType        | 用于控制行高 resize 时是同时对所有 Cell 生效，还是只对当前行生效。默认对所有行生效 | `all`\\| `current` | `all`  |       | \n| disable        | 用于控制行高 resize 是否生效 查看例子 | (resizeInfo: [S2CellType](/docs/api/components/sheet-component#resizeinfo)) => boolean |   |       | \n| visible        | 自定义当前单元格是否显示 resize 热区 | (cell: [S2CellType](/docs/api/basic-class/base-cell)) => boolean |   |       | \n \n### brushSelection \n \n| 参数              | 说明                  | 类型              | 默认值   | 必选  | \n| ----------------- | --------------------- | ----------------- | ------- | --- | \n| data            | 是否允许数值单元格刷选         | `boolean`         | true  |       | \n| row             | 是否允许行头单元格刷选（仅支持透视表） | `boolean`         | false |       | \n| col             | 是否允许列头单元格刷选 | `boolean`         | false |       | \n \n \n \n## Conditions \n \n类型：`object`，**必选**，默认值：`{}` \n \n<description>功能描述： 配置字段标记。分为文本 (text)，背景 (background)，柱状图 (interval)，图标 (icon)。</description> \n \n| 参数       | 说明 | 类型            | 默认值 | 必选  | \n| ---------- | ---------- | ---------------  | ------ | ---- | \n| text       | 文本字段标记   | `Condition[]`     | - |            | \n| background | 背景字段标记   | `Condition[]`    | -      |            | \n| interval   | 柱状图字段标记 | `Condition[]`     | -      |            | \n| icon       | 图标字段标记   | `IconCondition[]` | -  |            | \n \n### Condition \n \n类型：`object`，**必选**，默认值：`undefined` \n \n<description>功能描述： 配置条件格式。包括文本 (text)，背景 (background)，柱状图 (interval)。</description> \n \n| 参数      | 说明                                | 类型         | 默认值      | 必选  | \n|---------|-----------------------------------|------------|----------|-----| \n| field   | 1. 字段 ID <br /> 2. 使用正则表达式匹配字段 ID | `string \\| RegExp` |     | ✓          | \n| mapping | 作用映射函数​                           | `function` |          | ✓   | \n \n#### mapping \n \n```typescript \ntype MappingFunction = ( \n  fieldValue: number | string | null, \n  data: Record<string, any> \n) => { \n  // 仅用于图标字段标记，可选 \n  icon?: string; \n \n  // 背景 ｜ 文本 ｜ 柱状图 | 图标 字段标记颜色填充，必选 \n  fill: string; \n \n  // 仅用于柱状图字段标记，可选 \n  isCompare?: boolean; \n  minValue?: number; \n  maxValue?: number; \n \n  // 仅用于背景字段标记，可选。（当背景颜色较暗，将文本颜色设置为白色。优先级低于 文本字段标记） \n  intelligentReverseTextColor?: boolean; \n} | null | undefined // 返回值为空时，表示当前字段不显示字段标记样式 \n \n``` \n \n**condition 用法示例：** \n \n```javascript \nconst options = { \n  conditions: { \n    text: [ \n      { \n        field: \"province\", \n        mapping: () => ({ \n          fill: \"rgba(0, 0, 0, .65)\", \n        }), \n      }, \n    ], \n    interval: [ \n      { \n        field: \"sub_type\", \n        mapping: () => { \n          return { \n            fill: \"green\", \n          }; \n        }, \n      }, \n    ], \n    background: [ \n      { \n        field: \"count\", \n        mapping: () => ({ \n          fill: \"#ff00ff\", \n        }), \n      }, \n    ], \n  }, \n}; \n \n``` \n \n### IconCondition \n \n类型：`object`，**必选**，默认值：`null` \n \n<description>功能描述： 配置图标 (icon) 条件格式。</description> \n \n| 参数     | 说明 | 类型     | 默认值  | 必选    | \n| -------- | ------------ | -------- | ------- | ----  | \n| field    | 字段 ID       | `string`   |                | ✓    | \n| position | icon 相较于文字的位置 | `left \\| right`   | `right` |         | \n| mapping  | 作用映射函数​ | `function` |                 | ✓    | \n \n**icon condition 用法示例：** \n \n```javascript \n const options = { \n  conditions: { \n    icon: [ \n      { \n        field: \"profit\", \n        position: \"left\", \n        mapping: () => { \n          return { \n            icon: \"InfoCircle\", \n            fill: \"red\", \n          }; \n        }, \n      }, \n    ], \n  }, \n}; \n \n``` \n \n \n \n## Totals \n \nobject **必选**,_default：null_ 功能描述： 小计总计配置 \n \n| 参数 | 说明   | 类型                                          | 必选  | 默认值 | \n| ---- | ------ | --------------------------------------------- | ---- | ------ | \n| row  | 行总计 | [Total](/docs/api/general/S2Options#total) |       |    | \n| col  | 列总计 | [Total](/docs/api/general/S2Options#total) |       |    | \n \n## Total \n \nobject **必选**,_default：null_ 功能描述： 小计总计配置 \n \n| 参数                | 说明                     | 类型         | 默认值  | 必选  | \n| ------------------- | ------------------------ | ------------ | ------- | ---- | \n| showGrandTotals     | 是否显示总计             | `boolean`    | `false` |      | \n| showSubTotals       | 是否显示小计。当配置为对象时，always 控制是否在子维度不足 2 个时始终展示小计，默认不展示             | `boolean \\| { always: boolean }`    | `false` |      | \n| subTotalsDimensions | 小计的汇总维度           | `string[]`   | `[]`    |      | \n| reverseLayout       | 总计布局位置，默认下或右 | `boolean`    | `false` |      | \n| reverseSubLayout    | 小计布局位置，默认下或右 | `boolean`    | `false` |      | \n| label               | 总计别名                 | `string`     |         |       | \n| subLabel            | 小计别名                 | `string`     |         |       | \n| calcTotals          | 自定义计算总计                 | [CalcTotals](#calctotals) |         |       | \n| calcSubTotals       | 自定义计算小计                 | [CalcTotals](#calctotals) |         |       | \n| totalsGroupDimensions                  | 总计的分组维度                                            |`string[]`    |                    |      | \n| subTotalsGroupDimensions               | 小计的分组维度                                            |  `string[]`            |                    |      | \n \n## CalcTotals \n \nobject **可选**,_default：null_ 功能描述： 计算小计总计配置 \n \n| 参数        | 说明       | 类型                                                                 | 必选  | 默认值 | \n| ----------- | ---------- | -------------------------------------------------------------------- | --- | ------ | \n| aggregation | 聚合方式   | `Aggregation.SUM` \\| `Aggregation.MIN` \\| `Aggregation.MAX` \\| `Aggregation.AVG`                                                                |       |        | \n| calcFunc    | 自定义方法 | `(query: Record<string, any>, arr: Record<string, any>[]) => number` |       |        | \n \n \n \n## Tooltip \n \nobject **可选**,_default：null_ 功能描述： tooltip 配置 \n \n| 参数               | 说明   | 类型      | 默认值 | 必选 | \n| ------------------ | ----------- | ----------- | ------ | --- | \n| showTooltip        | 是否展示 tooltip                                             | `boolean`                               | `true` |      | \n| operation          | tooltip 操作配置项    | [TooltipOperation](#tooltipoperation)   | -      |      | \n| row                | 行头配置    | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| col                | 列头配置     | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| data               | 数值配置  | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| corner             | 角头配置    | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| renderTooltip      | 自定义整个 tooltip, 可以继承 BaseTooltip 自己重写一些方法    | [RenderTooltip](#rendertooltip)         | -      |      | \n| content   | 自定义 tooltip 内容  | `ReactNode \\| Element \\| string` 或者 `(cell, defaultTooltipShowOptions) => ReactNode \\| Element \\| string`   | -      |      | \n| autoAdjustBoundary | 当 tooltip 超过边界时自动调整显示位置，container: 图表区域，body: 整个浏览器窗口，设置为 `null` 可关闭此功能 | `container` \\| `body`  | `body` |      | \n| adjustPosition | 自定义 tooltip 位置，| (positionInfo: [TooltipPositionInfo](#tooltippositioninfo) ) => {x: number, y: number}                  |  |      | \n| getContainer | 自定义 tooltip 挂载容器，| `() => HTMLElement`   | `document.body` |      | \n| className | 额外的容器类名，| `string`    | - |      | \n| style | 额外的容器样式，| [CSSProperties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference)  | - |      | \n \n### BaseTooltipConfig \n \nobject **可选**,_default：null_ 功能描述： tooltip 基础通用配置 \n \n| 参数             | 说明                    | 类型                                  | 默认值 | 必选 | \n| ---------------- | ----------------------- | ------------------------------------- | ------ | --- | \n| showTooltip      | 是否展示 tooltip        | `boolean`                             | `false` |      | \n| operation        | tooltip 操作配置项      | [TooltipOperation](#tooltipoperation) | -      |      | \n| content | 自定义 tooltip 内容 | `ReactNode \\| Element \\| string \\|` 或者 `(cell, defaultTooltipShowOptions) => ReactNode \\| Element \\| string`                       | -      |      | \n \n### TooltipPositionInfo \n \nobject **可选**,_default：null_ 功能描述： tooltip 坐标信息 \n \n| 参数             | 说明                    | 类型                                  | 默认值 | 必选 | \n| ---------------- | ----------------------- | ------------------------------------- | ------ | --- | \n| position      | 默认经过计算（默认偏移量 + autoAdjustBoundary）后的 Tooltip 位置坐标  |  [TooltipPosition](#tooltipposition)  |  | ✓| \n| event      | 当前点击事件信息 | Event | | ✓| \n \n### TooltipOperation \n \nobject **可选**,_default：null_ 功能描述： tooltip 操作配置项 \n \n| 参数          | 说明                          | 类型      | 默认值  | 必选 | \n| ------------- | ----------------------------- | --------- | ------- | --- | \n| hiddenColumns | 是否开启隐藏列（叶子节点有效）   | `boolean` | `false`  |      | \n| trend         | 是否显示趋势图 icon           | `boolean` | `false` |      | \n| sort          | 是否开启组内排序              | `boolean` | `false` |      | \n| tableSort     | 是否开启明细表列头排序         | `boolean` | `false` |      | \n| menus         | 自定义操作配置项         | [TooltipOperatorMenu[]](#tooltipoperatormenu) | `-` |      | \n| onClick       | 操作项点击回调函数         | `({ item, key, keyPath, domEvent }) => void` | `-` |      | \n \n \n \n## TooltipShowOptions \n \nobject **必选**,_default：null_ 功能描述： tooltip 显示配置 \n \n| 参数      | 类型      | 必选  | 默认值 | 功能描述            | \n| --------- | ------- | ------ | ------ | ------------------- | \n| position  | [TooltipPosition](#tooltipposition)       |   ✓   |        | tooltip 显示位置    | \n| data      | [TooltipData](#tooltipdata)      |       |        | tooltip 数据        | \n| cellInfos | `Record<string, any>`        |       |        | 单元格信息          | \n| options   | [TooltipOptions](#tooltipoptions)    |       |        | tooltip 部分配置    | \n| content   | `ReactNode \\| string` \\| 或者 `(cell, defaultTooltipShowOptions: TooltipShowOptions) => ReactNode \\| string` |       |        | 自定义 tooltip 内容 | \n| event     | `Event`  |       |        | 当前事件 Event      | \n \n### TooltipPosition \n \nobject **必选**,_default：null_ 功能描述： tooltip 坐标 \n \n| 参数 | 类型     | 必选  | 默认值 | 功能描述 | \n| ---- | -------- | ------ | ------ | -------- | \n| x    | `number` |   ✓   |        | 横坐标   | \n| y    | `number` |   ✓   |        | 纵坐标   | \n \n### TooltipData \n \nobject **可选**,_default：null_ 功能描述： tooltip 数据 \n \n| 参数      | 类型                                            | 必选  | 默认值 | 功能描述                             | \n| --------- | ----------------------------------------------- | ------ | ------ | ------------------------------------ | \n| summaries | [TooltipSummaryOptions](#tooltipsummaryoptions) |       |        | 所选项统计（按度量值区分）列表       | \n| details   | [ListItem](#listitem)                           |       |        | 数据点明细信息                       | \n| headInfo  | [TooltipHeadInfo](#tooltipheadinfo)             |       |        | 轴（行/列头）列表                    | \n| name      | `string`                                        |       |        | 当前单元格名称                       | \n| tips      | `string`                                        |       |        | 提示/说明信息                        | \n| infos     | `string`                                        |       |        | 底部提示信息（可用于快捷键操作提示） | \n \n#### TooltipSummaryOptions \n \nobject **可选**,_default：null_ 功能描述： tooltip 所选项统计（按度量值区分）列表 \n \n| 参数         | 类型                  | 必选  | 默认值 | 功能描述           | \n| ------------ | --------------------- | ------ | ------ | ------------------ | \n| name         | `string`              |   ✓   |        | 名称               | \n| value        | `number \\| string`     |   ✓   |        | 值                 | \n| selectedData | `Record<string, any>` |   ✓   |        | 当前选择的数据列表 | \n \n#### TooltipHeadInfo \n \nobject **可选**,_default：null_ 功能描述： tooltip 轴（行/列头）列表 \n \n| 参数 | 类型                  | 必选  | 默认值 | 功能描述 | \n| ---- | --------------------- | ------ | ------ | -------- | \n| rows | [ListItem](#listitem) |   ✓   |        | 行头列表 | \n| cols | [ListItem](#listitem) |   ✓   |        | 列头列表 | \n \n#### ListItem \n \nobject **可选**,_default：null_ 功能描述： tooltip 数据点明细数据 \n \n| 参数  | 类型              | 必选  | 默认值 | 功能描述       | \n| ----- | ----------------- | ------ | ------ | -------------- | \n| name  | `string`          |   ✓   |        | 名称           | \n| value | `string \\| number` |   ✓   |        | 值             | \n| icon  | `ReactNode` |       |        | 自定义图标组件 | \n \n### TooltipOptions \n \nobject **必选**,_default：null_ 功能描述： tooltip 部分配置 \n \n| 参数           | 类型                                              | 必选  | 默认值 | 功能描述                     | \n| -------------- | ------------------------------------------------- | ------ | ------ | ---------------------------- | \n| hideSummary    | `boolean`                                         |       |     `false`    | 是否隐藏所选项统计信息       | \n| operator       | [TooltipOperatorOptions](#tooltipoperatoroptions) |       |        | 操作栏配置                   | \n| onlyMenu       | `boolean`                                         |       |      `false`   | tooltip 是否只展示操作菜单项 | \n| enterable      | `boolean`                                         |       |      `false`   | 是否可进入 tooltip 组件      | \n| isTotals       | `boolean`                                         |       |      `false`   | 是否是 总计/小计 单元格      | \n| showSingleTips | `boolean`                                         |       |     `false`    | 是否显示单元格提示信息       | \n| enableFormat | `boolean`                                         |       |     `false`    | 是否开启格式化       | \n| forceRender | `boolean`                                         |       |    `false`    | 是否强制清空 dom       | \n| data | [TooltipData](#tooltipdata)                                         |       |    `-`    | 自定义 tooltip 数据       | \n \n#### TooltipOperatorOptions \n \nobject **可选**,_default：null_ 功能描述： tooltip 操作栏配置 \n \n| 参数    | 类型                                         | 必选  | 默认值 | 功能描述                                                                                   | \n| ------- | -------------------------------------------- | ------ | ------ | ------------------------------------------------------------------------------------------ | \n| menus   | [TooltipOperatorMenu[]](#tooltipoperatormenu)  |     |        | 操作项列表  | \n| onClick | `({ item, key, keyPath, domEvent }) => void` |      |        | 点击事件，透传 `antd` `Menu` 组件的 [onClick](https://ant.design/components/menu-cn/#Menu) | \n| defaultSelectedKeys   | `string[]`  |     |        | 初始选中的菜单项 key 数组，透传 `antd` `Menu` 组件的 [defaultSelectedKeys](https://ant.design/components/menu-cn/#Menu)  | \n \n##### TooltipOperatorMenu \n \nobject **必选**,_default：null_ 功能描述： tooltip 操作项列表 \n \n| 参数     | 类型                                        | 必选  | 默认值 | 功能描述       | \n| -------- | ------------------------------------------- | ------ | ------ | -------------- | \n| key      | `string`                                    |   ✓   |        | 唯一标识       | \n| text     | `ReactNode \\| string`   |       |        | 名称           | \n| icon     | `ReactNode \\| string`   |       |        | 自定义图标     | \n| visible  | `boolean \\| (cell) => boolean`                           |      |   `true`      | 操作项是否显示，可传入一个函数根据当前单元格信息动态显示     | \n| onClick  | (`cell`: [S2CellType](/docs/api/basic-class/base-cell): ) => void                           |       |        | 点击事件回调  (cell 为当前 tooltip 对应的单元格）   | \n| children | [TooltipOperatorMenu](#tooltipoperatormenu) |       |        | 子菜单列表     | \n \n \n \n## Pagination \n \nboolean ｜ object **必选**,_default: null_ 功能描述： 分页配置 \n \n| 参数      | 说明          | 类型   | 默认值 | 必选  | \n| --------- | ------------------- | ------ | ------ | --  | \n| pageSize  | 每页数量            | `number` | - |  ✓   | \n| current   | 当前页（从 1 开始） | `number` |       1      |  ✓   | \n| total     | 数据总条数          | `number` | - |      | \n \n \n \n## Style \n \nobject **必选**,_default：null_ 功能描述：样式设置 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| layoutWidthType | `adaptive \\| colAdaptive \\| compact` |    |  | 单元格宽度布局类型<br> `adaptive` : 行列等宽，均分整个表格 (`Canvas`) 画布宽度 <br> `colAdaptive`：列等宽，行头紧凑布局，列等分画布宽度减去行头宽度的剩余宽度<br> `compact`：行列紧凑布局，列头宽度为内容实际宽度 （采样列前 50 个数值）, 指标维度少的时候无法布满整个画布 | \n| showTreeLeafNodeAlignDot | `boolean` |  |  false  | 树状模式下叶子节点是否显示层级占位点 | \n| treeRowsWidth | `number` |  |  120  | 树状模式行单元格宽度 （优先级大于 `rowCfg.width` 和 `rowCfg.treeRowsWidth （已废弃）`) | \n| hierarchyCollapse | `boolean` |  |   `false` | 在树状结构模式下行头是否默认展开。 | \n| rowExpandDepth | `number` |  |    | 在树状结构模式下行头默认展开展开的层级（层级从 0 开始）。 | \n| collapsedRows | `Record<string, boolean>` |  |  | 树状模式下行头自定义折叠、收起状态（透视表使用）。<br> key 值的生成需遵守指定的规则：'root[&] 行头维度值'。 [查看 demo](/examples/basic/pivot#tree) | \n| cellCfg | [CellCfg](#cellcfg) |  |  |   单元格配置 | \n| colCfg | [ColCfg](#colcfg) |  |  |   列样式配置 | \n| rowCfg | [RowCfg](#rowcfg) |  |  |   行样式配置 | \n| device | `pc \\| mobile` | |  `pc` | 设备类型 | \n \n## CellCfg \n \nobject **必选**,_default：null_ 功能描述：数值单元格配置 \n \n| 参数    | 说明 | 类型   | 默认值 | 必选  | \n| ------- | ------------ | ------ | ------ | ---- | \n| width   | 单元格宽度   | `number` |    96 | - | \n| height  | 单元格高度   | `number` |    30 | - | \n| valuesCfg  | 单元格配置   | `{ originalValueField?: string, widthPercent?: number[], showOriginalValue?: boolean }` |   | - | \n \n## ColCfg \n \nobject **必选**,_default：null_ 功能描述： 列样式配置 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| width |   单元格宽度，可根据当前列头节点动态设置宽度 （叶子节点有效） | `number \\| (colNode: Node) => number` |  |  | \n| height |  单元格高度 | `number` | 30 |  | \n| widthByFieldValue | 根据度量值设置宽度（拖拽或者预设宽度场景）, `fieldValue` 对应 `s2DataConfig.fields.columns` 中的列头数值 | `Record<string, number>`   | - |  | \n| heightByField | 根据度量值设置高度（拖拽或者预设高度场景）, `field` 对应 列头 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>`   | - |  | \n| hideMeasureColumn | 默认数值挂列头，会同时显示列头和数值，隐藏数值列，使其更美观。（仅在单数值时有效，多数值时推荐使用 [隐藏列头](https://s2.antv.vision/manual/advanced/interaction/hide-columns#2-%E9%80%8F%E8%A7%86%E8%A1%A8)) | `boolean` | false |  | \n \n## RowCfg \n \nobject **必选**,_default：null_ 功能描述： 行样式配置 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| width | 行单元格宽度，可根据当前行头节点动态设置宽度，如果是树状结构，请使用 `styles.treeRowsWidth` | `number \\| (rowNode: Node) => number` | 96 |  | \n| treeRowsWidth | 树状结构下，行单元格宽度 (**已废弃，请使用 `style.treeRowsWidth` 代替**) | `number` | 120 |  | \n| widthByField | 根据 `field` 设置每行的宽度。`field` 是行的 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | - |  | \n| heightByField | 根据 `field` 设置每行的高度。`field` 是行的 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | - |  | \n \n \n## DataCellCallback \n \n```js \nDataCellCallback = (viewMeta: ViewMeta, s2: Spreadsheet) => G.Group; \n``` \n \nFunction description: custom value cell, [ViewMeta](#viewmeta) \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n## Cell Callback \n \n```js \nCellCallback = (node: Node, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => G.Group; \n``` \n \nFunction description: custom cell \n \n| parameter   | illustrate                                                           | type                                                | Defaults | required | \n| ----------- | -------------------------------------------------------------------- | --------------------------------------------------- | -------- | :------: | \n| node        | The currently rendered node node                                     | [node](/docs/api/basic-class/node)               | -        |     ✓    | \n| spreadsheet | Table class instance, which can access any configuration information | [SpreadSheet](/docs/api/basic-class/spreadsheet) | -        |     ✓    | \n| restOptions | Indeterminate parameters, pass additional information                | `unknown[]`                                         | -        |          | \n \n## CornerHeaderCallback \n \n```js \nCornerHeaderCallback = (parent: S2CellType, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => void; \n``` \n \nFunction description: custom corner head \n \n| parameter   | illustrate                                                           | type                                                | Defaults | required | \n| ----------- | -------------------------------------------------------------------- | --------------------------------------------------- | -------- | :------: | \n| parents     | parent cell                                                          | [S2CellType](#s2celltype)                           | -        |     ✓    | \n| spreadsheet | Table class instance, which can access any configuration information | [SpreadSheet](/docs/api/basic-class/spreadsheet) | -        |     ✓    | \n| restOptions | Indeterminate parameters, pass additional information                | `unknown[]`                                         | -        |          | \n \n \n## LayoutHierarchy \n \n```js \nLayoutHierarchy = (spreadsheet: SpreadSheet, node: Node) => LayoutHierarchyReturnType; \n``` \n \n功能描述：自定义层级结构 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| node | [Node](/docs/api/basic-class/node) | ✓ |  |   当前渲染的 node 节点 | \n \n```ts \ninterface LayoutHierarchyReturnType { \n  push?: Node[]; \n  unshift?: Node[]; \n  delete?: boolean; \n} \n``` \n \n \n \n## LayoutArrange \n \n```js \nLayoutArrange = (spreadsheet: SpreadSheet, parent: Node, field: string, fieldValues: string[]) => string[]; \n``` \n \n功能描述：自定义顺序 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| node | [Node](/docs/api/basic-class/node) | ✓ |  |   当前渲染的 node 节点 | \n| field | `string` | ✓ |  |   当前的字段名 | \n| fieldValues | `string[]` | ✓ |  |   当前字段值 | \n \n \n## LayoutCoordinate \n \n```js \nLayoutCoordinate = (spreadsheet: SpreadSheet, rowNode: Node, colNode: Node) => void \n``` \n \n功能描述：自定义坐标 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| rowNode | [Node](/docs/api/basic-class/node) | ✓ |    | 行节点 | \n| colNode | [Node](/docs/api/basic-class/node) | ✓ |    | 列节点 | \n \n \n \n## LayoutDataPosition \n \n```js \nLayoutDataPosition = (spreadsheet: SpreadSheet, getCellData: GetCellMeta) => GetCellMeta \n``` \n \n功能描述：自定义数据 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | --- | ---  | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| getCellData | [GetCellMeta](#viewmeta) | ✓ |    | 获取单元格数据和位置等信息| \n \n```ts \ntype GetCellMeta = (rowIndex?: number, colIndex?: number) => ViewMeta; \n``` \n \n \n \n## HeaderActionIcon \n \n功能描述：为表格行列头角头注册自定义操作 `icon`。如果该配置位空，则展示透视表默认操作icon。 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | 版本 | \n| --- | --- | ---  | --- | --- | --- | \n| iconNames | string[] | ✓ |    | 已经注册的 icon 名称，或用户通过 customSVGIcons 注册的 icon 名称 | | \n| belongsCell | string[] | ✓ | |   需要增加操作图标的单元格名称 cornerCell、colCell、rowCell | | \n| defaultHide | boolean \\| (mete: Node, iconName: string)=> boolean  |  |  |   是否默认隐藏, 如果为 true 则为 hover 后再显示；false 则始终显示  | `1.26.0` 支持配置为一个函数 | \n| displayCondition | (mete: Node, iconName: string)=> boolean |  |  | 展示的过滤条件，可以通过该回调函数用户自定义行列头哪些层级或单元格需要展示 icon。 所有返回值为 true 的 icon 会展示给用户。 | `1.26.0` 回传 `iconName` 并按单个 icon 控制显隐 | \n| action | (headerActionIconProps: HeaderActionIconProps) => void; | ✓ |  | icon 点击之后的执行函数 | 已废弃，请使用 `onClick` | \n| onClick    | `(headerIconClickParams: HeaderIconClickParams) => void;` |   ✓      |     |    | `1.26.0` | \n| onHover   | `(headerIconHoverParams: HeaderIconHoverParams) => void;` |        |     |    | `1.26.0` | \n \n \n## HeaderActionIconProps \n \nFunction description: After clicking the custom operation icon, the current icon returned by the pivot table is related \n \n| parameter | illustrate                               | type   | Defaults | required | \n| --------- | ---------------------------------------- | ------ | -------- | :------: | \n| iconName  | The name of the currently clicked icon   | string | -        |     ✓    | \n| meta      | The meta information of the current cell | node   | -        |     ✓    | \n| event     | Current click event information          | event  | false    |     ✓    | \n \n## CustomSVGIcon \n \n功能描述：用于用户注册自己的 `icon` 图标， 目前只支持 `svg` 格式 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| name | string | ✓ |    | icon 名称 | \n| svg | string | ✓ |    | 目前支持三种格式的svg字符串：base64、svg本地文件、线上图片地址 | \n \n \n## FilterDataItemCallback \n \n```js \nFilterDataItemCallback = (valueField: string, data: DataItem) => DataItem \n``` \n \nFunction description: convert, filter data \n \n| parameter  | illustrate                                                           | type                  | Defaults | required | \n| ---------- | -------------------------------------------------------------------- | --------------------- | -------- | :------: | \n| valueField | Table class instance, which can access any configuration information | `string`              | -        |     ✓    | \n| data       | Data Format                                                          | [DataItem](#dataitem) | -        |     ✓    | \n \n## MappingDataItemCallback \n \n```js \nMappingDataItemCallback = (valueField: string, data: DataItem) => Record<string, string | number> | DataItem; \n``` \n \nFunction description: data implicit, used to display in tooltip \n \n| parameter  | illustrate                                                           | type                  | Defaults | required | \n| ---------- | -------------------------------------------------------------------- | --------------------- | -------- | :------: | \n| valueField | Table class instance, which can access any configuration information | `string`              | -        |     ✓    | \n| data       | Data Format                                                          | [DataItem](#dataitem) | -        |     ✓    | \n \n## DataItem \n \nFunction description: basic data format \n \n```ts \nexport interface MultiData { \n  label?: string; \n  values: (string | number)[][]; \n} \n \nexport type SimpleDataItem = string | number; \n \nexport type DataItem = SimpleDataItem | MultiData; \n``` \n \n## LayoutResult \n \n| parameter      | illustrate                                                                    | type                                                | Defaults | required | \n| -------------- | ----------------------------------------------------------------------------- | --------------------------------------------------- | -------- | :------: | \n| colNodes       | all nodes in the column                                                       | [Node\\[\\]](/docs/api/basic-class/node)           |          |          | \n| cols Hierarchy | column structure information                                                  | [Hierarchy](#hierarchy)                             |          |          | \n| rowNodes       | all nodes of the row                                                          | [Node\\[\\]](#node)                                   |          |          | \n| rowsHierarchy  | row structure information                                                     | [Hierarchy](#hierarchy)                             |          |     ✓    | \n| rowLeafNodes   | All leaf nodes of the row, for Cartesian intersection                         | [Node\\[\\]](/docs/api/basic-class/node)           |          |          | \n| colLeafNodes   | All leaf nodes of the column, for Cartesian intersection                      | [Node\\[\\]](/docs/api/basic-class/node)           |          |          | \n| getViewMeta    | Obtain the information corresponding to the coordinates of \\[x,y] crossed out | `(rowIndex: number, colIndex: number) => ViewMeta`  |          |          | \n| spreadsheet    | Table class instance, which can access any configuration information          | [SpreadSheet](/docs/api/basic-class/spreadsheet) |          |          | \n \n## DataSet \n \n```js \nDataSet = (spreadsheet: SpreadSheet) => BaseDataSet; \n``` \n \n## MergedCellInfo \n \n \n<description> **optional**  _MergedCellInfo[][]_   default: `undefined` </description> \n \n设置默认合并的单元格信息 \n \n| 参数            | 说明     | 类型        | 默认值 | 必选 | \n| --------------- |------| ---------------------- | ------ | ---- | \n| colIndex        | 单元格的列索引      | `number`   | -      |      | \n| rowIndex        | 单元格的行索引  | `number`   | -      |      | \n| showText        | 设置 `showText: true` 时，则展示当前格子的 `meta` 信息为合并后单元格的 `meta`。<br/> 默认使用第一个选中点击的单元格。 | `booelan`      | -      |      | \n \n \n \n",en:"# S2DataConfig \n \n \nDemo of the DataConfig \n \n```ts \nconst s2DataConfig = { \n  data: [], \n  meta: [], \n  sortParams: [], \n  fields: { \n    rows: [], \n    columns: [], \n    values: [] \n  } \n} \n``` \n \nTabular data configuration \n \n| parameter  | illustrate                                                      | type                        | Defaults | required | \n| :--------- | :-------------------------------------------------------------- | :-------------------------- | :------- | :------- | \n| data       | Raw data                                                        | [Data\\[\\]](#data)           |          | ✓        | \n| fields     | dimension index                                                 | [Fields](#fields)           |          | ✓        | \n| totalData  | Total/Subtotal Data                                             | [Data\\[\\]](#data)           |          |          | \n| meta       | Field metadata, configurable field aliases and value formatting | [Meta\\[\\]](#meta)           |          |          | \n| sortParams | Sorting parameter configuration                                 | [SortParam\\[\\]](#sortparam) |          |          | \n \n### Data \n \nstring | number | [MiniChartData](#minichartdata) | [MultiData](#multidata) **required** , *default: null* \n \nFunction description: Set the data source data source of the table, for example: \n \n```ts \nconst data = [ \n  { \n    area: '东北', \n    province: '吉林', \n    city: '白山', \n    type: '办公用品', \n    subType: '纸张', \n    cost: '2', \n  }, \n  { \n    area: '东北', \n    province: '吉林', \n    city: '白山', \n    type: '办公用品', \n    subType: '笔', \n    cost: '3', \n  } \n]; \n``` \n \n### Fields \n \nobject is **required** , *default: null* \n \nFunction description: Configure the dimension field of the table, that is, the corresponding row and column dimensions \n \n| Configuration item name | illustrate                                                           | type                                  | Defaults | required | \n| :---------------------- | :------------------------------------------------------------------- | :------------------------------------ | :------- | :------- | \n| rows                    | list of row dimensions                                               | `string[]`                            | `[]`     |          | \n| customTreeItems         | Customize the header directory tree                                  | [CustomTreeItem[]](#customtreeitem) |          |          | \n| columns                 | list of column dimensions                                            | [Columns[]](#columns) | `[]`     |          | \n| values                  | List of Metric Dimensions                                            | `string[]`                            | `[]`     |          | \n| valueInCols             | Whether the indicator dimension is at the column header              | `boolean`                             | `true`   |          | \n| customValueOrder        | Position order of custom metric dimensions in row and column headers  [example](/en/examples/custom/custom-layout/#custom-value-order) | `number`                              | -        |          | \n \n### Meta \n \narray object **required** , *default: null* \n \nFunction description: Field metadata, configurable field alias and value formatting. \n \n| parameter   | illustrate | type                           | Defaults             | required              | \n| :---------- | :---- | :----------------------------- | :------------------- | :-------------------- | \n| field       | field id | `string`  |  |                       | \n| name   | Field Name  | `string`  |  |   | \n| description | Field description, which will be displayed in the tooltip corresponding to the row header, column header, and cell   | `string` |   |   | \n| formatter   | Formatting cells, row headers and column headers support formatting, but corner headers do not support formatting. The second parameter exists only for cells. Numerical fields: generally used to format numeric units Text fields: generally used as aliases for field enumeration values The second parameter will be passed in in the following situations: data cell formatting, copy/export, tooltip display ( **and only when selected When there are multiple cells, the data type is an array** ) | \\`(value: unknown, data?: Data | Data\\[], meta?: Node | ViewMeta) => string\\` | \n \n### MiniChartData \n \n \n#### renderMiniChart \n \nDraw mini charts in cells (support line charts, bullet charts, histograms) \n \n```ts \n renderMiniChart = (cell: S2CellType, data?: BaseChartData | BulletValue) => void; \n``` \n \n#### BaseChartData \n \nLine chart, histogram data configuration items, data format refer to `g2` \n \n| parameter      | illustrate                                                                                                   | type                     | required | Defaults | \n| -------------- | ------------------------------------------------------------------------------------------------------------ | ------------------------ | -------- | -------- | \n| type           | mini-chart type                                                                                              | `string` (line/bar)      | ✓        |          | \n| encode         | Encoding method, declare the corresponding column data bound to the x position channel or y position channel | `{x: string; y: string}` | ✓        |          | \n| data           | Raw data                                                                                                     | [Data\\[\\]](#data)        |          | ✓        | \n| \\[key: string] | Other transparent fields for customized display of custom cells                                              | `unknown`                |          |          | \n \n#### BulletValue \n \nBullet chart data configuration items \n \n| parameter      | illustrate                                                      | type              | required | Defaults | \n| -------------- | --------------------------------------------------------------- | ----------------- | -------- | -------- | \n| type           | mini-chart type                                                 | `string` (bullet) | ✓        | bullet   | \n| measure        | current indicator                                               | `number/string`   | ✓        |          | \n| target         | target value                                                    | `number/string`   | ✓        |          | \n| \\[key: string] | Other transparent fields for customized display of custom cells | `unknown`         |          |          | \n \n \n### MultiData \n \nobject is **required** , *default: null* \n \nFunction description: used to support custom data cell rendering of multiple indicator types. Example: [Trend Analysis Table](/examples/react-component/sheet#strategy) \n \n| Configuration item name | illustrate                                                      | type      | Defaults        | required | \n| :---------------------- | :-------------------------------------------------------------- | :-------- | :-------------- | :------- | \n| values                  | The formatted data is directly displayed in dataCfg             | \\`(string | number)\\[]\\[]\\` | ✓        | \n| originalValues          | raw data, for raw data export                                   | \\`(string | number)\\[]\\[]\\` |          | \n| label                   | Used as a subtitle of a cell, displayed on a separate line      | `string`  |                 |          | \n| \\[key: string]          | Other transparent fields for customized display of custom cells | `unknown` | \\`\\`            |          | \n \n \n### SortParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`     | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）         | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`                              | -      |      | \n| type          | 组内排序用来显示 icon （透视表适用）          | `string`                              | -      |      | \n| sortFunc      | 自定义排序的 function                        | (params: [SortFuncParam](#sortfuncparam)) => `string[]` | -      |      | \n \n#### SortFuncParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`    | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）      | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`    | -      |      | \n| type          | 组内排序用来显示 icon（透视表适用）             | `string`                              | -      |      | \n| data          | 当前排序数据列表                            | `Array<string \\| Record<string, any>>` | -      |      | \n \n \n \n### CustomTreeItem \n \n[详细说明](/docs/manual/advanced/custom/category-tree) [例子](/examples/custom/custom-tree#custom-tree) \n \n功能描述：自定义树状结构的配置，兼容 [antd Tree](https://ant.design/components/tree-cn/) 数据配置项； \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| key | 当前节点唯一标识 | `string` |    | ✓ | \n| title | 当前节点展示名 | `string` |    | ✓ | \n| collapsed | 节点是否收起（只会在自身代表非叶子节点生效） | `boolean` |  `false`  |  | \n| description | 节点的额外描述信息，在对应行头的 tooltip 中展示 | `string` |    |  | \n| children | 子节点 | [CustomTreeItem[]](#custom-tree-item) |    |  | \n \n \n### Columns \n \n`Array<ColumnNode | string>` \n \n列配置数组，在明细表模式下支持使用 [ColumnNode](#columnnode) 结构来描述列分组关系 \n \n### ColumnNode \n \n| 属性名称 | 说明     | 类型   | 默认值 | 必选 | \n| ------- | ---------| -------| ------|------| \n| name | 列字段 id 或分组 id   | string |       | ✓ | \n| children | 分组下面的子级  | Array\\<ColumnNode \\| string\\> |       |  | \n \n \n# S2Options \n \n \nForm parameter configuration \n \n\\| parameter | type | required | default value | function description| | :-- | :-- | :-: | :-- | :-- | --- | `number` | width| | height | `number` | | 480 | table height| | debug | `boolean` | | `false` | whether to enable debug mode| `grid` | hierarchyType | `grid` | `tree` | `customTree` | grid structure, tree: tree structure. [customTree](#tooltip) : custom tree structure | | conditions | [Conditions](#conditions) | | | condition pattern configuration | [](#interaction)| totals | [Totals](#totals) | | | | | Table Interaction Configuration| | pagination | [Pagination](#pagination) | | | `false` Configuration| `boolean` | `true` | `boolean` | | `false` | `boolean` | | `true` | `false` to display the default row header action icon | `showDefaultHeaderActionIcon` | [headerActionIcons](#headeractionicon) [|](#customsvgicon) `false` | custom svg icon| | style | [Style](#style) | | | cell style settings, such as layout type, width and height, margin, whether to hide the value column header, etc. | | frozenRowCount | `number` | | | the number of frozen rows, from counting from top (valid for schedules) | | frozenColCount | `number` | | | number of frozen columns, counting from left (valid for schedules) | | frozenTrailingRowCount | `number` | | | number of frozen rows, counting from bottom ( list is valid) | | frozenTrailingColCount | `number` | | | the number of frozen columns, counting from the right side (schedule is valid) | | `true` | `boolean` | | Blurred font rendering on high-definition retina screens| | mergedCellsInfo | [MergedCellInfo\\[\\]\\[\\]](#mergedcellinfo) | | | merged cell information| | placeholder | `(meta: Record<string, any>) => string | string` | | | fill content of empty cells | | cornerText | string | | | custom corner header text (valid when custom tree `hierarchyType: customTree` ) | | The text of the virtual value field of the corner head (valid when the value is the row header, replace the two words \"value\") | | dataCell | [DataCellCallback](#datacellcallback) | | | custom cell | | cornerCell | [CellCallback](#cellcallback) | | | custom cornerCell | | rowCell | [CellCallback](#cellcallback) | | | custom row header cell | | colCell | [CellCallback](#cellcallback) | | | custom column header cell | | cornerHeader | [CornerHeaderCallback](#cornerheadercallback) | | | custom corner header | | [layoutHierarchy](#layouthierarchy) | struct | | [layoutArrange](#layoutdataposition) | [LayoutArrange](#layoutarrange) | | | custom sort order | | layoutCoordinate | [layoutCoordinate](#layoutcoordinate) | [|](#filterdataitemcallback) | | `false` | [MappingDataItemCallback](#mappingdataitemcallback) | | | Convert data for tooltip display| | dataSet | [DataSet](#dataset) | | | custom data set| `transform` | supportCSSTransform | `boolean` | , mouse coordinates respond incorrectly| | devicePixelRatio | `number` | | `window.devicePixelRatio` | custom device pixel ratio| \n \n \n## Interaction \n \n| 参数    | 说明   | 类型                                        | 默认值   |        必选        | \n| -------- | ----------- |-------------------------------------------| -------- | ---------------- | \n| linkFields  | 标记字段为链接样式，用于外链跳转  | `string[]` \\| (meta: [Node](/docs/api/basic-class/node) \\| ViewMeta) => boolean    |    |    | \n| selectedCellsSpotlight               | 是否开启选中高亮聚光灯效果    | `boolean`                                 | `false`      |                  | \n| hoverHighlight                       | 鼠标悬停时高亮当前单元格，以及所对应的行头，列头<br/>rowHeader：是否高亮悬停格子所在行头<br/>colHeader：是否高亮悬停格子所在列头<br/>rowCells：是否高亮悬停格子所在行<br/>colCells：是否高亮悬停格子所在列<br/>true：同 `{rowHeader: true, colHeader: true, currentRow: true, currentCol: true}`                                                                                                                 | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, rowCells?: boolean, colCells?: boolean}`                                 | `true`                                                |                  | \n| hoverFocus                           | 鼠标悬停在当前单元格超过默认 800ms 后，保持当前高亮，显示 tooltip，悬停时间通过设置 `duration` 来控制   | `boolean  \\| {duration: number}`                                   |      `true`      |       | \n| hiddenColumnFields                   | 用于配置默认隐藏的列，透视表需要配置列头唯一 id, 明细表配置列头 field 字段即可                                                                                          | `string[]`                                |                                                       |                  | \n| enableCopy                           | 是否允许复制                                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| copyWithHeader                       | 复制数据是否带表头信息                                                                                                                            | `boolean`                                 | `false`                                               |                  | \n| copyWithFormat                       | 是否使用 field format 格式复制                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| customInteractions                   | 自定义交互 [详情](/docs/manual/advanced/interaction/custom)                                                                                | [CustomInteraction[]](#custominteraction) |                                                       |                  | \n| scrollSpeedRatio                     | 用于控制滚动速率，分水平和垂直两个方向，默认为 1                                                                                                              | [ScrollSpeedRatio](#scrollspeedratio)     |                                                       |                  | \n| autoResetSheetStyle                  | 用于控制点击表格外区域和按下 esc 键时是否重置交互状态                                                                                                          | `boolean`                                 | `true`                                                |                  | \n| resize                               | 用于控制 resize 热区是否显示     | `boolean`  \\| [ResizeInteractionOptions](#resizeinteractionoptions) |      `true`      |       | \n| brushSelection         | 是否允许单元格（包含行头，列头，数值单元格）刷选。    | `boolean` \\|  [BrushSelection](#brushSelection)  | `true`                         |     |  1.29.0 后支持 [BrushSelection](#brushSelection)   | \n| multiSelection                       | 是否允许多选 （包含行头，列头，数值单元格）                                                                                                                 | `boolean`                                 | `true`                                                |                  | \n| rangeSelection                       | 是否允许区间快捷多选                                                                                                                             | `boolean`                                 | `true`                                                |                  | \n| scrollbarPosition                    | 用于控制滚动条展示在内容区边缘还是画布边缘                                                                                                                  | `content \\| canvas`                                              |    `content`     |   | \n| eventListenerOptions                 | 事件监听函数 `addEventListener` 的 [可选项配置](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener), 可控制事件从冒泡阶段还是捕获阶段触发 | `false`                                   |                                                       | \n| selectedCellHighlight                | 选中格子后的高亮行为<br/>rowHeader：是否高亮选中格子所在行头<br/>colHeader：是否高亮选中格子所在列头<br/>currentRow：是否高亮选中格子所在行<br/>currentCol：是否高亮选中格子所在列<br/>true：同{rowHeader: true, colHeader: true}     | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, currentRow?: boolean, currentCol?: boolean }` | `false`                                               |                  | \n| overscrollBehavior                   | 控制滚动至边界的行为，可禁用浏览器的默认滚动行为。[详情](/docs/manual/advanced/interaction/basic/#修改滚动至边界行为)  | `auto \\| contain \\| none \\| null`  |  `auto` | \n| hoverAfterScroll                   | 滚动结束后是否在当前鼠标所处单元格自动触发悬停表现  | `boolean`  |  `false` | \n \n### CustomInteraction \n \n功能描述：自定义交互，继承 baseEvent:  [具体例子](/docs/manual/advanced/interaction/custom) \n \n| 参数        | 说明           | 类型                                              | 默认值 | 必选  | \n| ----------- | -------------- | ------------------------------------------------- | ------ | --- | \n| key         | 交互的唯一标识 | `string`                                          |        |   ✓   | \n| interaction |                | [InteractionConstructor](/docs/api/basic-class/interaction#interactionconstructor) |        |   ✓   | \n \n### ScrollSpeedRatio \n \n```js \ninterface ScrollSpeedRatio { \n  horizontal?: number; // 水平滚动速率，默认为 1 \n  vertical?: number; // 垂直滚动速率，默认为 1 \n} \n``` \n \n### ResizeInteractionOptions \n \n| 参数                 | 说明     | 类型    | 默认值 | 必选  | \n| -------------------- | ------- | ----------------- | ------ | --- | \n| rowCellVertical      | 是否开启行头垂直方向 resize 热区                                                   | `boolean`         | true   |       | \n| cornerCellHorizontal | 是否开启角头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellHorizontal    | 是否开启列头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellVertical      | 是否开启列头垂直方向 resize 热区 （列头隐藏时该配置无效）                                                   | `boolean`         | true   |       | \n| rowResizeType        | 用于控制行高 resize 时是同时对所有 Cell 生效，还是只对当前行生效。默认对所有行生效 | `all`\\| `current` | `all`  |       | \n| disable        | 用于控制行高 resize 是否生效 查看例子 | (resizeInfo: [S2CellType](/docs/api/components/sheet-component#resizeinfo)) => boolean |   |       | \n| visible        | 自定义当前单元格是否显示 resize 热区 | (cell: [S2CellType](/docs/api/basic-class/base-cell)) => boolean |   |       | \n \n### brushSelection \n \n| 参数              | 说明                  | 类型              | 默认值   | 必选  | \n| ----------------- | --------------------- | ----------------- | ------- | --- | \n| data            | 是否允许数值单元格刷选         | `boolean`         | true  |       | \n| row             | 是否允许行头单元格刷选（仅支持透视表） | `boolean`         | false |       | \n| col             | 是否允许列头单元格刷选 | `boolean`         | false |       | \n \n \n \n## Conditions \n \n类型：`object`，**必选**，默认值：`{}` \n \n<description>功能描述： 配置字段标记。分为文本 (text)，背景 (background)，柱状图 (interval)，图标 (icon)。</description> \n \n| 参数       | 说明 | 类型            | 默认值 | 必选  | \n| ---------- | ---------- | ---------------  | ------ | ---- | \n| text       | 文本字段标记   | `Condition[]`     | - |            | \n| background | 背景字段标记   | `Condition[]`    | -      |            | \n| interval   | 柱状图字段标记 | `Condition[]`     | -      |            | \n| icon       | 图标字段标记   | `IconCondition[]` | -  |            | \n \n### Condition \n \n类型：`object`，**必选**，默认值：`undefined` \n \n<description>功能描述： 配置条件格式。包括文本 (text)，背景 (background)，柱状图 (interval)。</description> \n \n| 参数      | 说明                                | 类型         | 默认值      | 必选  | \n|---------|-----------------------------------|------------|----------|-----| \n| field   | 1. 字段 ID <br /> 2. 使用正则表达式匹配字段 ID | `string \\| RegExp` |     | ✓          | \n| mapping | 作用映射函数​                           | `function` |          | ✓   | \n \n#### mapping \n \n```typescript \ntype MappingFunction = ( \n  fieldValue: number | string | null, \n  data: Record<string, any> \n) => { \n  // 仅用于图标字段标记，可选 \n  icon?: string; \n \n  // 背景 ｜ 文本 ｜ 柱状图 | 图标 字段标记颜色填充，必选 \n  fill: string; \n \n  // 仅用于柱状图字段标记，可选 \n  isCompare?: boolean; \n  minValue?: number; \n  maxValue?: number; \n \n  // 仅用于背景字段标记，可选。（当背景颜色较暗，将文本颜色设置为白色。优先级低于 文本字段标记） \n  intelligentReverseTextColor?: boolean; \n} | null | undefined // 返回值为空时，表示当前字段不显示字段标记样式 \n \n``` \n \n**condition 用法示例：** \n \n```javascript \nconst options = { \n  conditions: { \n    text: [ \n      { \n        field: \"province\", \n        mapping: () => ({ \n          fill: \"rgba(0, 0, 0, .65)\", \n        }), \n      }, \n    ], \n    interval: [ \n      { \n        field: \"sub_type\", \n        mapping: () => { \n          return { \n            fill: \"green\", \n          }; \n        }, \n      }, \n    ], \n    background: [ \n      { \n        field: \"count\", \n        mapping: () => ({ \n          fill: \"#ff00ff\", \n        }), \n      }, \n    ], \n  }, \n}; \n \n``` \n \n### IconCondition \n \n类型：`object`，**必选**，默认值：`null` \n \n<description>功能描述： 配置图标 (icon) 条件格式。</description> \n \n| 参数     | 说明 | 类型     | 默认值  | 必选    | \n| -------- | ------------ | -------- | ------- | ----  | \n| field    | 字段 ID       | `string`   |                | ✓    | \n| position | icon 相较于文字的位置 | `left \\| right`   | `right` |         | \n| mapping  | 作用映射函数​ | `function` |                 | ✓    | \n \n**icon condition 用法示例：** \n \n```javascript \n const options = { \n  conditions: { \n    icon: [ \n      { \n        field: \"profit\", \n        position: \"left\", \n        mapping: () => { \n          return { \n            icon: \"InfoCircle\", \n            fill: \"red\", \n          }; \n        }, \n      }, \n    ], \n  }, \n}; \n \n``` \n \n \n \n## Totals \n \nobject **必选**,_default：null_ 功能描述： 小计总计配置 \n \n| 参数 | 说明   | 类型                                          | 必选  | 默认值 | \n| ---- | ------ | --------------------------------------------- | ---- | ------ | \n| row  | 行总计 | [Total](/docs/api/general/S2Options#total) |       |    | \n| col  | 列总计 | [Total](/docs/api/general/S2Options#total) |       |    | \n \n## Total \n \nobject **必选**,_default：null_ 功能描述： 小计总计配置 \n \n| 参数                | 说明                     | 类型         | 默认值  | 必选  | \n| ------------------- | ------------------------ | ------------ | ------- | ---- | \n| showGrandTotals     | 是否显示总计             | `boolean`    | `false` |      | \n| showSubTotals       | 是否显示小计。当配置为对象时，always 控制是否在子维度不足 2 个时始终展示小计，默认不展示             | `boolean \\| { always: boolean }`    | `false` |      | \n| subTotalsDimensions | 小计的汇总维度           | `string[]`   | `[]`    |      | \n| reverseLayout       | 总计布局位置，默认下或右 | `boolean`    | `false` |      | \n| reverseSubLayout    | 小计布局位置，默认下或右 | `boolean`    | `false` |      | \n| label               | 总计别名                 | `string`     |         |       | \n| subLabel            | 小计别名                 | `string`     |         |       | \n| calcTotals          | 自定义计算总计                 | [CalcTotals](#calctotals) |         |       | \n| calcSubTotals       | 自定义计算小计                 | [CalcTotals](#calctotals) |         |       | \n| totalsGroupDimensions                  | 总计的分组维度                                            |`string[]`    |                    |      | \n| subTotalsGroupDimensions               | 小计的分组维度                                            |  `string[]`            |                    |      | \n \n## CalcTotals \n \nobject **可选**,_default：null_ 功能描述： 计算小计总计配置 \n \n| 参数        | 说明       | 类型                                                                 | 必选  | 默认值 | \n| ----------- | ---------- | -------------------------------------------------------------------- | --- | ------ | \n| aggregation | 聚合方式   | `Aggregation.SUM` \\| `Aggregation.MIN` \\| `Aggregation.MAX` \\| `Aggregation.AVG`                                                                |       |        | \n| calcFunc    | 自定义方法 | `(query: Record<string, any>, arr: Record<string, any>[]) => number` |       |        | \n \n \n \n## Tooltip \n \nobject **可选**,_default：null_ 功能描述： tooltip 配置 \n \n| 参数               | 说明   | 类型      | 默认值 | 必选 | \n| ------------------ | ----------- | ----------- | ------ | --- | \n| showTooltip        | 是否展示 tooltip                                             | `boolean`                               | `true` |      | \n| operation          | tooltip 操作配置项    | [TooltipOperation](#tooltipoperation)   | -      |      | \n| row                | 行头配置    | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| col                | 列头配置     | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| data               | 数值配置  | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| corner             | 角头配置    | [BaseTooltipConfig](#basetooltipconfig) | -      |      | \n| renderTooltip      | 自定义整个 tooltip, 可以继承 BaseTooltip 自己重写一些方法    | [RenderTooltip](#rendertooltip)         | -      |      | \n| content   | 自定义 tooltip 内容  | `ReactNode \\| Element \\| string` 或者 `(cell, defaultTooltipShowOptions) => ReactNode \\| Element \\| string`   | -      |      | \n| autoAdjustBoundary | 当 tooltip 超过边界时自动调整显示位置，container: 图表区域，body: 整个浏览器窗口，设置为 `null` 可关闭此功能 | `container` \\| `body`  | `body` |      | \n| adjustPosition | 自定义 tooltip 位置，| (positionInfo: [TooltipPositionInfo](#tooltippositioninfo) ) => {x: number, y: number}                  |  |      | \n| getContainer | 自定义 tooltip 挂载容器，| `() => HTMLElement`   | `document.body` |      | \n| className | 额外的容器类名，| `string`    | - |      | \n| style | 额外的容器样式，| [CSSProperties](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference)  | - |      | \n \n### BaseTooltipConfig \n \nobject **可选**,_default：null_ 功能描述： tooltip 基础通用配置 \n \n| 参数             | 说明                    | 类型                                  | 默认值 | 必选 | \n| ---------------- | ----------------------- | ------------------------------------- | ------ | --- | \n| showTooltip      | 是否展示 tooltip        | `boolean`                             | `false` |      | \n| operation        | tooltip 操作配置项      | [TooltipOperation](#tooltipoperation) | -      |      | \n| content | 自定义 tooltip 内容 | `ReactNode \\| Element \\| string \\|` 或者 `(cell, defaultTooltipShowOptions) => ReactNode \\| Element \\| string`                       | -      |      | \n \n### TooltipPositionInfo \n \nobject **可选**,_default：null_ 功能描述： tooltip 坐标信息 \n \n| 参数             | 说明                    | 类型                                  | 默认值 | 必选 | \n| ---------------- | ----------------------- | ------------------------------------- | ------ | --- | \n| position      | 默认经过计算（默认偏移量 + autoAdjustBoundary）后的 Tooltip 位置坐标  |  [TooltipPosition](#tooltipposition)  |  | ✓| \n| event      | 当前点击事件信息 | Event | | ✓| \n \n### TooltipOperation \n \nobject **可选**,_default：null_ 功能描述： tooltip 操作配置项 \n \n| 参数          | 说明                          | 类型      | 默认值  | 必选 | \n| ------------- | ----------------------------- | --------- | ------- | --- | \n| hiddenColumns | 是否开启隐藏列（叶子节点有效）   | `boolean` | `false`  |      | \n| trend         | 是否显示趋势图 icon           | `boolean` | `false` |      | \n| sort          | 是否开启组内排序              | `boolean` | `false` |      | \n| tableSort     | 是否开启明细表列头排序         | `boolean` | `false` |      | \n| menus         | 自定义操作配置项         | [TooltipOperatorMenu[]](#tooltipoperatormenu) | `-` |      | \n| onClick       | 操作项点击回调函数         | `({ item, key, keyPath, domEvent }) => void` | `-` |      | \n \n \n \n## TooltipShowOptions \n \nobject **必选**,_default：null_ 功能描述： tooltip 显示配置 \n \n| 参数      | 类型      | 必选  | 默认值 | 功能描述            | \n| --------- | ------- | ------ | ------ | ------------------- | \n| position  | [TooltipPosition](#tooltipposition)       |   ✓   |        | tooltip 显示位置    | \n| data      | [TooltipData](#tooltipdata)      |       |        | tooltip 数据        | \n| cellInfos | `Record<string, any>`        |       |        | 单元格信息          | \n| options   | [TooltipOptions](#tooltipoptions)    |       |        | tooltip 部分配置    | \n| content   | `ReactNode \\| string` \\| 或者 `(cell, defaultTooltipShowOptions: TooltipShowOptions) => ReactNode \\| string` |       |        | 自定义 tooltip 内容 | \n| event     | `Event`  |       |        | 当前事件 Event      | \n \n### TooltipPosition \n \nobject **必选**,_default：null_ 功能描述： tooltip 坐标 \n \n| 参数 | 类型     | 必选  | 默认值 | 功能描述 | \n| ---- | -------- | ------ | ------ | -------- | \n| x    | `number` |   ✓   |        | 横坐标   | \n| y    | `number` |   ✓   |        | 纵坐标   | \n \n### TooltipData \n \nobject **可选**,_default：null_ 功能描述： tooltip 数据 \n \n| 参数      | 类型                                            | 必选  | 默认值 | 功能描述                             | \n| --------- | ----------------------------------------------- | ------ | ------ | ------------------------------------ | \n| summaries | [TooltipSummaryOptions](#tooltipsummaryoptions) |       |        | 所选项统计（按度量值区分）列表       | \n| details   | [ListItem](#listitem)                           |       |        | 数据点明细信息                       | \n| headInfo  | [TooltipHeadInfo](#tooltipheadinfo)             |       |        | 轴（行/列头）列表                    | \n| name      | `string`                                        |       |        | 当前单元格名称                       | \n| tips      | `string`                                        |       |        | 提示/说明信息                        | \n| infos     | `string`                                        |       |        | 底部提示信息（可用于快捷键操作提示） | \n \n#### TooltipSummaryOptions \n \nobject **可选**,_default：null_ 功能描述： tooltip 所选项统计（按度量值区分）列表 \n \n| 参数         | 类型                  | 必选  | 默认值 | 功能描述           | \n| ------------ | --------------------- | ------ | ------ | ------------------ | \n| name         | `string`              |   ✓   |        | 名称               | \n| value        | `number \\| string`     |   ✓   |        | 值                 | \n| selectedData | `Record<string, any>` |   ✓   |        | 当前选择的数据列表 | \n \n#### TooltipHeadInfo \n \nobject **可选**,_default：null_ 功能描述： tooltip 轴（行/列头）列表 \n \n| 参数 | 类型                  | 必选  | 默认值 | 功能描述 | \n| ---- | --------------------- | ------ | ------ | -------- | \n| rows | [ListItem](#listitem) |   ✓   |        | 行头列表 | \n| cols | [ListItem](#listitem) |   ✓   |        | 列头列表 | \n \n#### ListItem \n \nobject **可选**,_default：null_ 功能描述： tooltip 数据点明细数据 \n \n| 参数  | 类型              | 必选  | 默认值 | 功能描述       | \n| ----- | ----------------- | ------ | ------ | -------------- | \n| name  | `string`          |   ✓   |        | 名称           | \n| value | `string \\| number` |   ✓   |        | 值             | \n| icon  | `ReactNode` |       |        | 自定义图标组件 | \n \n### TooltipOptions \n \nobject **必选**,_default：null_ 功能描述： tooltip 部分配置 \n \n| 参数           | 类型                                              | 必选  | 默认值 | 功能描述                     | \n| -------------- | ------------------------------------------------- | ------ | ------ | ---------------------------- | \n| hideSummary    | `boolean`                                         |       |     `false`    | 是否隐藏所选项统计信息       | \n| operator       | [TooltipOperatorOptions](#tooltipoperatoroptions) |       |        | 操作栏配置                   | \n| onlyMenu       | `boolean`                                         |       |      `false`   | tooltip 是否只展示操作菜单项 | \n| enterable      | `boolean`                                         |       |      `false`   | 是否可进入 tooltip 组件      | \n| isTotals       | `boolean`                                         |       |      `false`   | 是否是 总计/小计 单元格      | \n| showSingleTips | `boolean`                                         |       |     `false`    | 是否显示单元格提示信息       | \n| enableFormat | `boolean`                                         |       |     `false`    | 是否开启格式化       | \n| forceRender | `boolean`                                         |       |    `false`    | 是否强制清空 dom       | \n| data | [TooltipData](#tooltipdata)                                         |       |    `-`    | 自定义 tooltip 数据       | \n \n#### TooltipOperatorOptions \n \nobject **可选**,_default：null_ 功能描述： tooltip 操作栏配置 \n \n| 参数    | 类型                                         | 必选  | 默认值 | 功能描述                                                                                   | \n| ------- | -------------------------------------------- | ------ | ------ | ------------------------------------------------------------------------------------------ | \n| menus   | [TooltipOperatorMenu[]](#tooltipoperatormenu)  |     |        | 操作项列表  | \n| onClick | `({ item, key, keyPath, domEvent }) => void` |      |        | 点击事件，透传 `antd` `Menu` 组件的 [onClick](https://ant.design/components/menu-cn/#Menu) | \n| defaultSelectedKeys   | `string[]`  |     |        | 初始选中的菜单项 key 数组，透传 `antd` `Menu` 组件的 [defaultSelectedKeys](https://ant.design/components/menu-cn/#Menu)  | \n \n##### TooltipOperatorMenu \n \nobject **必选**,_default：null_ 功能描述： tooltip 操作项列表 \n \n| 参数     | 类型                                        | 必选  | 默认值 | 功能描述       | \n| -------- | ------------------------------------------- | ------ | ------ | -------------- | \n| key      | `string`                                    |   ✓   |        | 唯一标识       | \n| text     | `ReactNode \\| string`   |       |        | 名称           | \n| icon     | `ReactNode \\| string`   |       |        | 自定义图标     | \n| visible  | `boolean \\| (cell) => boolean`                           |      |   `true`      | 操作项是否显示，可传入一个函数根据当前单元格信息动态显示     | \n| onClick  | (`cell`: [S2CellType](/docs/api/basic-class/base-cell): ) => void                           |       |        | 点击事件回调  (cell 为当前 tooltip 对应的单元格）   | \n| children | [TooltipOperatorMenu](#tooltipoperatormenu) |       |        | 子菜单列表     | \n \n \n \n## Pagination \n \nboolean ｜ object **必选**,_default: null_ 功能描述： 分页配置 \n \n| 参数      | 说明          | 类型   | 默认值 | 必选  | \n| --------- | ------------------- | ------ | ------ | --  | \n| pageSize  | 每页数量            | `number` | - |  ✓   | \n| current   | 当前页（从 1 开始） | `number` |       1      |  ✓   | \n| total     | 数据总条数          | `number` | - |      | \n \n \n \n## Style \n \nobject **必选**,_default：null_ 功能描述：样式设置 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| layoutWidthType | `adaptive \\| colAdaptive \\| compact` |    |  | 单元格宽度布局类型<br> `adaptive` : 行列等宽，均分整个表格 (`Canvas`) 画布宽度 <br> `colAdaptive`：列等宽，行头紧凑布局，列等分画布宽度减去行头宽度的剩余宽度<br> `compact`：行列紧凑布局，列头宽度为内容实际宽度 （采样列前 50 个数值）, 指标维度少的时候无法布满整个画布 | \n| showTreeLeafNodeAlignDot | `boolean` |  |  false  | 树状模式下叶子节点是否显示层级占位点 | \n| treeRowsWidth | `number` |  |  120  | 树状模式行单元格宽度 （优先级大于 `rowCfg.width` 和 `rowCfg.treeRowsWidth （已废弃）`) | \n| hierarchyCollapse | `boolean` |  |   `false` | 在树状结构模式下行头是否默认展开。 | \n| rowExpandDepth | `number` |  |    | 在树状结构模式下行头默认展开展开的层级（层级从 0 开始）。 | \n| collapsedRows | `Record<string, boolean>` |  |  | 树状模式下行头自定义折叠、收起状态（透视表使用）。<br> key 值的生成需遵守指定的规则：'root[&] 行头维度值'。 [查看 demo](/examples/basic/pivot#tree) | \n| cellCfg | [CellCfg](#cellcfg) |  |  |   单元格配置 | \n| colCfg | [ColCfg](#colcfg) |  |  |   列样式配置 | \n| rowCfg | [RowCfg](#rowcfg) |  |  |   行样式配置 | \n| device | `pc \\| mobile` | |  `pc` | 设备类型 | \n \n## CellCfg \n \nobject **必选**,_default：null_ 功能描述：数值单元格配置 \n \n| 参数    | 说明 | 类型   | 默认值 | 必选  | \n| ------- | ------------ | ------ | ------ | ---- | \n| width   | 单元格宽度   | `number` |    96 | - | \n| height  | 单元格高度   | `number` |    30 | - | \n| valuesCfg  | 单元格配置   | `{ originalValueField?: string, widthPercent?: number[], showOriginalValue?: boolean }` |   | - | \n \n## ColCfg \n \nobject **必选**,_default：null_ 功能描述： 列样式配置 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| width |   单元格宽度，可根据当前列头节点动态设置宽度 （叶子节点有效） | `number \\| (colNode: Node) => number` |  |  | \n| height |  单元格高度 | `number` | 30 |  | \n| widthByFieldValue | 根据度量值设置宽度（拖拽或者预设宽度场景）, `fieldValue` 对应 `s2DataConfig.fields.columns` 中的列头数值 | `Record<string, number>`   | - |  | \n| heightByField | 根据度量值设置高度（拖拽或者预设高度场景）, `field` 对应 列头 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>`   | - |  | \n| hideMeasureColumn | 默认数值挂列头，会同时显示列头和数值，隐藏数值列，使其更美观。（仅在单数值时有效，多数值时推荐使用 [隐藏列头](https://s2.antv.vision/manual/advanced/interaction/hide-columns#2-%E9%80%8F%E8%A7%86%E8%A1%A8)) | `boolean` | false |  | \n \n## RowCfg \n \nobject **必选**,_default：null_ 功能描述： 行样式配置 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| width | 行单元格宽度，可根据当前行头节点动态设置宽度，如果是树状结构，请使用 `styles.treeRowsWidth` | `number \\| (rowNode: Node) => number` | 96 |  | \n| treeRowsWidth | 树状结构下，行单元格宽度 (**已废弃，请使用 `style.treeRowsWidth` 代替**) | `number` | 120 |  | \n| widthByField | 根据 `field` 设置每行的宽度。`field` 是行的 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | - |  | \n| heightByField | 根据 `field` 设置每行的高度。`field` 是行的 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | - |  | \n \n \n## DataCellCallback \n \n```js \nDataCellCallback = (viewMeta: ViewMeta, s2: Spreadsheet) => G.Group; \n``` \n \nFunction description: custom value cell, [ViewMeta](#viewmeta) \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n## Cell Callback \n \n```js \nCellCallback = (node: Node, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => G.Group; \n``` \n \nFunction description: custom cell \n \n| parameter   | illustrate                                                           | type                                                | Defaults | required | \n| ----------- | -------------------------------------------------------------------- | --------------------------------------------------- | -------- | :------: | \n| node        | The currently rendered node node                                     | [node](/docs/api/basic-class/node)               | -        |     ✓    | \n| spreadsheet | Table class instance, which can access any configuration information | [SpreadSheet](/docs/api/basic-class/spreadsheet) | -        |     ✓    | \n| restOptions | Indeterminate parameters, pass additional information                | `unknown[]`                                         | -        |          | \n \n## CornerHeaderCallback \n \n```js \nCornerHeaderCallback = (parent: S2CellType, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => void; \n``` \n \nFunction description: custom corner head \n \n| parameter   | illustrate                                                           | type                                                | Defaults | required | \n| ----------- | -------------------------------------------------------------------- | --------------------------------------------------- | -------- | :------: | \n| parents     | parent cell                                                          | [S2CellType](#s2celltype)                           | -        |     ✓    | \n| spreadsheet | Table class instance, which can access any configuration information | [SpreadSheet](/docs/api/basic-class/spreadsheet) | -        |     ✓    | \n| restOptions | Indeterminate parameters, pass additional information                | `unknown[]`                                         | -        |          | \n \n \n## LayoutHierarchy \n \n```js \nLayoutHierarchy = (spreadsheet: SpreadSheet, node: Node) => LayoutHierarchyReturnType; \n``` \n \n功能描述：自定义层级结构 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| node | [Node](/docs/api/basic-class/node) | ✓ |  |   当前渲染的 node 节点 | \n \n```ts \ninterface LayoutHierarchyReturnType { \n  push?: Node[]; \n  unshift?: Node[]; \n  delete?: boolean; \n} \n``` \n \n \n \n## LayoutArrange \n \n```js \nLayoutArrange = (spreadsheet: SpreadSheet, parent: Node, field: string, fieldValues: string[]) => string[]; \n``` \n \n功能描述：自定义顺序 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| node | [Node](/docs/api/basic-class/node) | ✓ |  |   当前渲染的 node 节点 | \n| field | `string` | ✓ |  |   当前的字段名 | \n| fieldValues | `string[]` | ✓ |  |   当前字段值 | \n \n \n## LayoutCoordinate \n \n```js \nLayoutCoordinate = (spreadsheet: SpreadSheet, rowNode: Node, colNode: Node) => void \n``` \n \n功能描述：自定义坐标 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| rowNode | [Node](/docs/api/basic-class/node) | ✓ |    | 行节点 | \n| colNode | [Node](/docs/api/basic-class/node) | ✓ |    | 列节点 | \n \n \n \n## LayoutDataPosition \n \n```js \nLayoutDataPosition = (spreadsheet: SpreadSheet, getCellData: GetCellMeta) => GetCellMeta \n``` \n \n功能描述：自定义数据 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | --- | ---  | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| getCellData | [GetCellMeta](#viewmeta) | ✓ |    | 获取单元格数据和位置等信息| \n \n```ts \ntype GetCellMeta = (rowIndex?: number, colIndex?: number) => ViewMeta; \n``` \n \n \n \n## HeaderActionIcon \n \n功能描述：为表格行列头角头注册自定义操作 `icon`。如果该配置位空，则展示透视表默认操作icon。 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | 版本 | \n| --- | --- | ---  | --- | --- | --- | \n| iconNames | string[] | ✓ |    | 已经注册的 icon 名称，或用户通过 customSVGIcons 注册的 icon 名称 | | \n| belongsCell | string[] | ✓ | |   需要增加操作图标的单元格名称 cornerCell、colCell、rowCell | | \n| defaultHide | boolean \\| (mete: Node, iconName: string)=> boolean  |  |  |   是否默认隐藏, 如果为 true 则为 hover 后再显示；false 则始终显示  | `1.26.0` 支持配置为一个函数 | \n| displayCondition | (mete: Node, iconName: string)=> boolean |  |  | 展示的过滤条件，可以通过该回调函数用户自定义行列头哪些层级或单元格需要展示 icon。 所有返回值为 true 的 icon 会展示给用户。 | `1.26.0` 回传 `iconName` 并按单个 icon 控制显隐 | \n| action | (headerActionIconProps: HeaderActionIconProps) => void; | ✓ |  | icon 点击之后的执行函数 | 已废弃，请使用 `onClick` | \n| onClick    | `(headerIconClickParams: HeaderIconClickParams) => void;` |   ✓      |     |    | `1.26.0` | \n| onHover   | `(headerIconHoverParams: HeaderIconHoverParams) => void;` |        |     |    | `1.26.0` | \n \n \n## HeaderActionIconProps \n \nFunction description: After clicking the custom operation icon, the current icon returned by the pivot table is related \n \n| parameter | illustrate                               | type   | Defaults | required | \n| --------- | ---------------------------------------- | ------ | -------- | :------: | \n| iconName  | The name of the currently clicked icon   | string | -        |     ✓    | \n| meta      | The meta information of the current cell | node   | -        |     ✓    | \n| event     | Current click event information          | event  | false    |     ✓    | \n \n## CustomSVGIcon \n \n功能描述：用于用户注册自己的 `icon` 图标， 目前只支持 `svg` 格式 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| name | string | ✓ |    | icon 名称 | \n| svg | string | ✓ |    | 目前支持三种格式的svg字符串：base64、svg本地文件、线上图片地址 | \n \n \n## FilterDataItemCallback \n \n```js \nFilterDataItemCallback = (valueField: string, data: DataItem) => DataItem \n``` \n \nFunction description: convert, filter data \n \n| parameter  | illustrate                                                           | type                  | Defaults | required | \n| ---------- | -------------------------------------------------------------------- | --------------------- | -------- | :------: | \n| valueField | Table class instance, which can access any configuration information | `string`              | -        |     ✓    | \n| data       | Data Format                                                          | [DataItem](#dataitem) | -        |     ✓    | \n \n## MappingDataItemCallback \n \n```js \nMappingDataItemCallback = (valueField: string, data: DataItem) => Record<string, string | number> | DataItem; \n``` \n \nFunction description: data implicit, used to display in tooltip \n \n| parameter  | illustrate                                                           | type                  | Defaults | required | \n| ---------- | -------------------------------------------------------------------- | --------------------- | -------- | :------: | \n| valueField | Table class instance, which can access any configuration information | `string`              | -        |     ✓    | \n| data       | Data Format                                                          | [DataItem](#dataitem) | -        |     ✓    | \n \n## DataItem \n \nFunction description: basic data format \n \n```ts \nexport interface MultiData { \n  label?: string; \n  values: (string | number)[][]; \n} \n \nexport type SimpleDataItem = string | number; \n \nexport type DataItem = SimpleDataItem | MultiData; \n``` \n \n## LayoutResult \n \n| parameter      | illustrate                                                                    | type                                                | Defaults | required | \n| -------------- | ----------------------------------------------------------------------------- | --------------------------------------------------- | -------- | :------: | \n| colNodes       | all nodes in the column                                                       | [Node\\[\\]](/docs/api/basic-class/node)           |          |          | \n| cols Hierarchy | column structure information                                                  | [Hierarchy](#hierarchy)                             |          |          | \n| rowNodes       | all nodes of the row                                                          | [Node\\[\\]](#node)                                   |          |          | \n| rowsHierarchy  | row structure information                                                     | [Hierarchy](#hierarchy)                             |          |     ✓    | \n| rowLeafNodes   | All leaf nodes of the row, for Cartesian intersection                         | [Node\\[\\]](/docs/api/basic-class/node)           |          |          | \n| colLeafNodes   | All leaf nodes of the column, for Cartesian intersection                      | [Node\\[\\]](/docs/api/basic-class/node)           |          |          | \n| getViewMeta    | Obtain the information corresponding to the coordinates of \\[x,y] crossed out | `(rowIndex: number, colIndex: number) => ViewMeta`  |          |          | \n| spreadsheet    | Table class instance, which can access any configuration information          | [SpreadSheet](/docs/api/basic-class/spreadsheet) |          |          | \n \n## DataSet \n \n```js \nDataSet = (spreadsheet: SpreadSheet) => BaseDataSet; \n``` \n \n## MergedCellInfo \n \n \n<description> **optional**  _MergedCellInfo[][]_   default: `undefined` </description> \n \n设置默认合并的单元格信息 \n \n| 参数            | 说明     | 类型        | 默认值 | 必选 | \n| --------------- |------| ---------------------- | ------ | ---- | \n| colIndex        | 单元格的列索引      | `number`   | -      |      | \n| rowIndex        | 单元格的行索引  | `number`   | -      |      | \n| showText        | 设置 `showText: true` 时，则展示当前格子的 `meta` 信息为合并后单元格的 `meta`。<br/> 默认使用第一个选中点击的单元格。 | `booelan`      | -      |      | \n \n \n \n"},childrenKey:"demos",order:2}],childrenKey:"examples"},{id:"layout",title:{zh:"布局",en:"Layout"},icon:"other",examples:[{demos:[{id:"adaptive",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/cEkDC%26g%24xj/df31b66d-4a76-4e69-be5a-f467af2d337d.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      style: {\n        // 了解更多: https://s2.antv.antgroup.com/api/general/s2-options#style\n        layoutWidthType: 'adaptive',\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"行列等宽布局 (默认)",en:"Adaptive (Default)"},filename:"adaptive.ts",isNew:!1},{id:"compact",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NN_lTpAqhQkAAAAAAAAAAAAADmJ7AQ/original",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    // 增加几条长度不一致的 mock 数据\n    dataCfg.data.at(0).number = 11111111;\n    dataCfg.data.at(6).number = 7777;\n    dataCfg.data.at(-1).number = 666666;\n\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      style: {\n        // 了解更多: https://s2.antv.antgroup.com/api/general/s2-options#style\n        layoutWidthType: 'compact',\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    // 紧凑模式下, 列头宽度为实际内容宽度 (取当前列最大值, 采样每一列前 50 条数据)\n    s2.setTheme({\n      dataCell: {\n        text: {\n          fontSize: 16,\n        },\n      },\n    });\n\n    s2.render();\n  });\n",title:{zh:"紧凑布局",en:"Compact"},filename:"compact.ts",isNew:!1},{id:"colAdaptive",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/cEkDC%26g%24xj/df31b66d-4a76-4e69-be5a-f467af2d337d.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      style: {\n        // 了解更多: https://s2.antv.antgroup.com/api/general/s2-options#style\n        layoutWidthType: 'colAdaptive',\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"列等宽布局",en:"ColAdaptive"},filename:"colAdaptive.ts",isNew:!1}],icon:"",id:"basic",title:{en:"Basic Layout",zh:"默认布局"},api:{zh:" \n# Style \n \n \n## Style \n \nobject **必选**,_default：null_ 功能描述：样式设置 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| layoutWidthType | `adaptive \\| colAdaptive \\| compact` |    |  | 单元格宽度布局类型<br> `adaptive` : 行列等宽，均分整个表格 (`Canvas`) 画布宽度 <br> `colAdaptive`：列等宽，行头紧凑布局，列等分画布宽度减去行头宽度的剩余宽度<br> `compact`：行列紧凑布局，列头宽度为内容实际宽度 （采样列前 50 个数值）, 指标维度少的时候无法布满整个画布 | \n| showTreeLeafNodeAlignDot | `boolean` |  |  false  | 树状模式下叶子节点是否显示层级占位点 | \n| treeRowsWidth | `number` |  |  120  | 树状模式行单元格宽度 （优先级大于 `rowCfg.width` 和 `rowCfg.treeRowsWidth （已废弃）`) | \n| hierarchyCollapse | `boolean` |  |   `false` | 在树状结构模式下行头是否默认展开。 | \n| rowExpandDepth | `number` |  |    | 在树状结构模式下行头默认展开展开的层级（层级从 0 开始）。 | \n| collapsedRows | `Record<string, boolean>` |  |  | 树状模式下行头自定义折叠、收起状态（透视表使用）。<br> key 值的生成需遵守指定的规则：'root[&] 行头维度值'。 [查看 demo](/examples/basic/pivot#tree) | \n| cellCfg | [CellCfg](#cellcfg) |  |  |   单元格配置 | \n| colCfg | [ColCfg](#colcfg) |  |  |   列样式配置 | \n| rowCfg | [RowCfg](#rowcfg) |  |  |   行样式配置 | \n| device | `pc \\| mobile` | |  `pc` | 设备类型 | \n \n## CellCfg \n \nobject **必选**,_default：null_ 功能描述：数值单元格配置 \n \n| 参数    | 说明 | 类型   | 默认值 | 必选  | \n| ------- | ------------ | ------ | ------ | ---- | \n| width   | 单元格宽度   | `number` |    96 | - | \n| height  | 单元格高度   | `number` |    30 | - | \n| valuesCfg  | 单元格配置   | `{ originalValueField?: string, widthPercent?: number[], showOriginalValue?: boolean }` |   | - | \n \n## ColCfg \n \nobject **必选**,_default：null_ 功能描述： 列样式配置 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| width |   单元格宽度，可根据当前列头节点动态设置宽度 （叶子节点有效） | `number \\| (colNode: Node) => number` |  |  | \n| height |  单元格高度 | `number` | 30 |  | \n| widthByFieldValue | 根据度量值设置宽度（拖拽或者预设宽度场景）, `fieldValue` 对应 `s2DataConfig.fields.columns` 中的列头数值 | `Record<string, number>`   | - |  | \n| heightByField | 根据度量值设置高度（拖拽或者预设高度场景）, `field` 对应 列头 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>`   | - |  | \n| hideMeasureColumn | 默认数值挂列头，会同时显示列头和数值，隐藏数值列，使其更美观。（仅在单数值时有效，多数值时推荐使用 [隐藏列头](https://s2.antv.vision/manual/advanced/interaction/hide-columns#2-%E9%80%8F%E8%A7%86%E8%A1%A8)) | `boolean` | false |  | \n \n## RowCfg \n \nobject **必选**,_default：null_ 功能描述： 行样式配置 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| width | 行单元格宽度，可根据当前行头节点动态设置宽度，如果是树状结构，请使用 `styles.treeRowsWidth` | `number \\| (rowNode: Node) => number` | 96 |  | \n| treeRowsWidth | 树状结构下，行单元格宽度 (**已废弃，请使用 `style.treeRowsWidth` 代替**) | `number` | 120 |  | \n| widthByField | 根据 `field` 设置每行的宽度。`field` 是行的 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | - |  | \n| heightByField | 根据 `field` 设置每行的高度。`field` 是行的 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | - |  | \n \n \n",en:" \n# Style \n \n \n## style \n \nobject is **required** , *default: null* Function description: style setting \n \n\\| parameter | type | required | default value | function description| `compact` | --- | --- | :-: | --- | --- | --- | `colAdaptive` | `adaptive` | | | cell width layout type\\ \n`adaptive` : Rows and columns are equal in width, equally dividing the entire `Canvas` canvas width\\ \n`colAdaptive` : Equal width of columns, compact layout of line headers, the remaining width of the column equally divided canvas width minus the width of line headers\\ \n`compact` : Compact layout of rows and columns, when the index dimension is small, it cannot cover the `number` `boolean` Mode row cell width (priority over `rowCfg.width` and `rowCfg.treeRowsWidth （已废弃）` ) | | hierarchyCollapse | `boolean` | | `false` | Whether row headers are expanded by default in tree structure mode. | | rowExpandDepth | `number` | | | In the tree structure mode, the default expanded level of the row header (the level starts from 0). | | collapsedRows | `Record<string, boolean>` | | | Customize the collapsed and collapsed state of row headers in tree mode (used by pivot tables).\\ \nThe generation of the key value must follow the specified rules: 'root\\[&] row header dimension value'. [View demo](/examples/basic/pivot#tree) | | `mobile` | [CellCfg](#cellcfg) | | | Cell Configuration | | `pc` | [ColCfg](#colcfg) | | | Column Style Configuration | `pc` | [rowCfg](#rowcfg) | Device type | \n \n## CellCfg \n \nobject is **required** , *default: null* Function description: Numerical cell configuration \n \n| parameter | illustrate         | type                                                                                    | Defaults | required | \n| --------- | ------------------ | --------------------------------------------------------------------------------------- | -------- | -------- | \n| width     | cell width         | `number`                                                                                | 96       | -        | \n| height    | cell height        | `number`                                                                                | 30       | -        | \n| valuesCfg | cell configuration | `{ originalValueField?: string, widthPercent?: number[], showOriginalValue?: boolean }` |          | -        | \n \n## ColCfg \n \nobject is **required** , *default: null* Function description: column style configuration \n \n| parameter         | illustrate                                                                                                                                                                                                                                                                             | type                     | Defaults                    | required | \n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------ | --------------------------- | :------: | \n| width             | Cell width, which can be dynamically set according to the current column header node (leaf nodes are valid)                                                                                                                                                                            | \\`number                 | (colNode: Node) => number\\` |          | \n| height            | cell height                                                                                                                                                                                                                                                                            | `number`                 | 30                          |          | \n| widthByFieldValue | Set the width according to the measurement value (drag or preset width scene), `fieldValue` corresponds to the column header value in `s2DataConfig.fields.columns`                                                                                                                    | `Record<string, number>` | -                           |          | \n| heightByField     | Set the height according to the measurement value (drag and drop or preset height scene), the `field` corresponds to the column header id, [view details](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | -                           |          | \n| hideMeasureColumn | The default value hangs the column header, which will display the column header and the value at the same time, and hide the value column to make it more beautiful.                                                                                                                   | `boolean`                | false                       |          | \n \n## RowCfg \n \nobject is **required** , *default: null* Function description: row style configuration \n \n| parameter     | illustrate                                                                                                                                                                                                                 | type                     | Defaults                    | required | \n| ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------ | --------------------------- | :------: | \n| width         | Row cell width, the width can be dynamically set according to the current row header node, if it is a tree structure, please use `styles.treeRowsWidth`                                                                    | \\`number                 | (rowNode: Node) => number\\` |    96    | \n| treeRowsWidth | Under the tree structure, row cell width ( **deprecated, please use `style.treeRowsWidth` instead** )                                                                                                                      | `number`                 | 120                         |          | \n| widthByField   | Set the width of each line according to `field` . `field` is the id of the row, [see details](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | -                           |          | \n| heightByField | Set the height of each row according to `field` . `field` is the id of the row, [see details](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | -                           |          | \n \n \n"},childrenKey:"demos",order:0},{demos:[{id:"custom-pivot-size",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/%24sNoM1o7b/8a35f685-f989-4125-aada-046f90b93969.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    // 详情请查看: https://s2.antv.antgroup.com/zh/docs/manual/advanced/custom/cell-size\n    const s2Options = {\n      width: 600,\n      height: 480,\n      hierarchyType: 'grid',\n      style: {\n        cellCfg: {\n          width: 100,\n          height: 90,\n        },\n        rowCfg: {\n          width: 100,\n          heightByField: {\n            'root[&]浙江省[&]杭州市': 30,\n            'root[&]浙江省[&]宁波市': 100,\n          },\n        },\n        colCfg: {\n          widthByFieldValue: {\n            number: 100,\n          },\n        },\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n    s2.render();\n  });\n",title:{zh:"自定义透视表行列宽高",en:"Custom PivotSheet Size"},filename:"custom-pivot-size.ts",isNew:!1},{id:"custom-table-size",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/oIjIixviI/ccba0c66-c8ba-4285-b0ec-fc776d0a4cdf.png",source:"import { TableSheet } from '@antv/s2';\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json')\n  .then((res) => res.json())\n  .then((data) => {\n    // 详情请查看: https://s2.antv.antgroup.com/zh/docs/manual/advanced/custom/cell-size\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        columns: ['type', 'province', 'city', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      style: {\n        // 列头宽度始终和数值单元格一致\n        cellCfg: {\n          width: 200,\n          height: 50,\n        },\n        colCfg: {\n          height: 50,\n        },\n        // 每一行根据指标单独设置\n        rowCfg: {\n          heightByField: {\n            '1': 130,\n            '3': 60,\n            '10': 80,\n            '15': 20,\n          },\n        },\n      },\n    };\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义明细表行列宽高",en:"Custom TableSheet Height"},filename:"custom-table-size.ts",isNew:!1},{id:"custom-row-col-cell-width",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/gzR%26xlnjG/7b23ff29-0789-4420-ad23-e1df96e4489d.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    // 详情请查看: https://s2.antv.antgroup.com/zh/docs/manual/advanced/custom/cell-size\n    const s2Options = {\n      width: 600,\n      height: 480,\n      hierarchyType: 'grid',\n      style: {\n        rowCfg: {\n          // 固定配置: 行头单元格 100px\n          // width: 100,\n          // 动态配置: 叶子节点 300px, 非叶子节点 200px\n          width: (row) => {\n            console.log('row: ', row);\n            return row.isLeaf ? 300 : 200;\n          },\n        },\n        colCfg: {\n          // 固定配置: 每列 100px\n          // width: 100,\n          // 动态配置: 偶数列 100px, 奇数列 200px\n          width: (col) => {\n            console.log('col: ', col);\n            return col.colIndex % 2 === 0 ? 100 : 200;\n          },\n        },\n        cellCfg: {\n          height: 50,\n        },\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n    s2.render();\n  });\n",title:{zh:"自定义行列单元格宽度",en:"Custom Row/Column Cell Height"},filename:"custom-row-col-cell-width.ts",isNew:!1},{id:"custom-tree-row-width",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/y%26PAejhkm/e9b18b27-a6c9-4c05-b75c-83b25030d0c6.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    // 详情请查看: https://s2.antv.antgroup.com/zh/docs/manual/advanced/custom/cell-size\n    const s2Options = {\n      width: 600,\n      height: 480,\n      hierarchyType: 'tree',\n      style: {\n        treeRowsWidth: 200,\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n    s2.render();\n  });\n",title:{zh:"自定义树状结构行头宽度",en:"Custom Tree Row Width"},filename:"custom-tree-row-width.ts",isNew:!1},{id:"hide-columns",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/7uLsxYg0N/b85dc985-6a07-40fd-a73e-4f0f17e63b72.png",source:"import { TableSheet } from '@antv/s2';\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        columns: ['type', 'province', 'city', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      style: {\n        colCfg: {\n          height: 0,\n        },\n      },\n    };\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"隐藏列头",en:"Hide Columns"},filename:"hide-columns.ts",isNew:!1},{id:"hide-value",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*dmQ5R401jjAAAAAAAAAAAAAADmJ7AQ/original",source:"import { S2DataConfig, S2Options } from '@antv/s2';\nimport { PivotSheet } from '@antv/s2';\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig: S2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      style: {\n        colCfg: {\n          // 隐藏数值 (数值挂列头时生效, 即 s2DataConfig.fields.values)\n          hideMeasureColumn: true,\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"数值挂列头时隐藏数值",en:"Hide Value"},filename:"hide-value.ts",isNew:!1},{id:"only-show-row-header",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*pezZTI9lp50AAAAAAAAAAAAADmJ7AQ/original",source:"import { S2DataConfig, S2Options } from '@antv/s2';\nimport { PivotSheet } from '@antv/s2';\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json001215413-dev-S09001736318/s2/basic.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig: S2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        values: ['price'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n      ],\n      data,\n    };\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      style: {\n        colCfg: {\n          // 当只有行头和数值时, 隐藏数值, 可以让表格只显示行头\n          hideMeasureColumn: true,\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"只显示行头",en:"Only Show Row Header"},filename:"only-show-row-header.ts",isNew:!1}],icon:"",id:"custom",title:{en:"Custom Height & Width",zh:"自定义布局 / 行列宽高"},api:{zh:" \n# Style \n \n \n## Style \n \nobject **必选**,_default：null_ 功能描述：样式设置 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| layoutWidthType | `adaptive \\| colAdaptive \\| compact` |    |  | 单元格宽度布局类型<br> `adaptive` : 行列等宽，均分整个表格 (`Canvas`) 画布宽度 <br> `colAdaptive`：列等宽，行头紧凑布局，列等分画布宽度减去行头宽度的剩余宽度<br> `compact`：行列紧凑布局，列头宽度为内容实际宽度 （采样列前 50 个数值）, 指标维度少的时候无法布满整个画布 | \n| showTreeLeafNodeAlignDot | `boolean` |  |  false  | 树状模式下叶子节点是否显示层级占位点 | \n| treeRowsWidth | `number` |  |  120  | 树状模式行单元格宽度 （优先级大于 `rowCfg.width` 和 `rowCfg.treeRowsWidth （已废弃）`) | \n| hierarchyCollapse | `boolean` |  |   `false` | 在树状结构模式下行头是否默认展开。 | \n| rowExpandDepth | `number` |  |    | 在树状结构模式下行头默认展开展开的层级（层级从 0 开始）。 | \n| collapsedRows | `Record<string, boolean>` |  |  | 树状模式下行头自定义折叠、收起状态（透视表使用）。<br> key 值的生成需遵守指定的规则：'root[&] 行头维度值'。 [查看 demo](/examples/basic/pivot#tree) | \n| cellCfg | [CellCfg](#cellcfg) |  |  |   单元格配置 | \n| colCfg | [ColCfg](#colcfg) |  |  |   列样式配置 | \n| rowCfg | [RowCfg](#rowcfg) |  |  |   行样式配置 | \n| device | `pc \\| mobile` | |  `pc` | 设备类型 | \n \n## CellCfg \n \nobject **必选**,_default：null_ 功能描述：数值单元格配置 \n \n| 参数    | 说明 | 类型   | 默认值 | 必选  | \n| ------- | ------------ | ------ | ------ | ---- | \n| width   | 单元格宽度   | `number` |    96 | - | \n| height  | 单元格高度   | `number` |    30 | - | \n| valuesCfg  | 单元格配置   | `{ originalValueField?: string, widthPercent?: number[], showOriginalValue?: boolean }` |   | - | \n \n## ColCfg \n \nobject **必选**,_default：null_ 功能描述： 列样式配置 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| width |   单元格宽度，可根据当前列头节点动态设置宽度 （叶子节点有效） | `number \\| (colNode: Node) => number` |  |  | \n| height |  单元格高度 | `number` | 30 |  | \n| widthByFieldValue | 根据度量值设置宽度（拖拽或者预设宽度场景）, `fieldValue` 对应 `s2DataConfig.fields.columns` 中的列头数值 | `Record<string, number>`   | - |  | \n| heightByField | 根据度量值设置高度（拖拽或者预设高度场景）, `field` 对应 列头 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>`   | - |  | \n| hideMeasureColumn | 默认数值挂列头，会同时显示列头和数值，隐藏数值列，使其更美观。（仅在单数值时有效，多数值时推荐使用 [隐藏列头](https://s2.antv.vision/manual/advanced/interaction/hide-columns#2-%E9%80%8F%E8%A7%86%E8%A1%A8)) | `boolean` | false |  | \n \n## RowCfg \n \nobject **必选**,_default：null_ 功能描述： 行样式配置 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| width | 行单元格宽度，可根据当前行头节点动态设置宽度，如果是树状结构，请使用 `styles.treeRowsWidth` | `number \\| (rowNode: Node) => number` | 96 |  | \n| treeRowsWidth | 树状结构下，行单元格宽度 (**已废弃，请使用 `style.treeRowsWidth` 代替**) | `number` | 120 |  | \n| widthByField | 根据 `field` 设置每行的宽度。`field` 是行的 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | - |  | \n| heightByField | 根据 `field` 设置每行的高度。`field` 是行的 id, [查看详情](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | - |  | \n \n \n",en:" \n# Style \n \n \n## style \n \nobject is **required** , *default: null* Function description: style setting \n \n\\| parameter | type | required | default value | function description| `compact` | --- | --- | :-: | --- | --- | --- | `colAdaptive` | `adaptive` | | | cell width layout type\\ \n`adaptive` : Rows and columns are equal in width, equally dividing the entire `Canvas` canvas width\\ \n`colAdaptive` : Equal width of columns, compact layout of line headers, the remaining width of the column equally divided canvas width minus the width of line headers\\ \n`compact` : Compact layout of rows and columns, when the index dimension is small, it cannot cover the `number` `boolean` Mode row cell width (priority over `rowCfg.width` and `rowCfg.treeRowsWidth （已废弃）` ) | | hierarchyCollapse | `boolean` | | `false` | Whether row headers are expanded by default in tree structure mode. | | rowExpandDepth | `number` | | | In the tree structure mode, the default expanded level of the row header (the level starts from 0). | | collapsedRows | `Record<string, boolean>` | | | Customize the collapsed and collapsed state of row headers in tree mode (used by pivot tables).\\ \nThe generation of the key value must follow the specified rules: 'root\\[&] row header dimension value'. [View demo](/examples/basic/pivot#tree) | | `mobile` | [CellCfg](#cellcfg) | | | Cell Configuration | | `pc` | [ColCfg](#colcfg) | | | Column Style Configuration | `pc` | [rowCfg](#rowcfg) | Device type | \n \n## CellCfg \n \nobject is **required** , *default: null* Function description: Numerical cell configuration \n \n| parameter | illustrate         | type                                                                                    | Defaults | required | \n| --------- | ------------------ | --------------------------------------------------------------------------------------- | -------- | -------- | \n| width     | cell width         | `number`                                                                                | 96       | -        | \n| height    | cell height        | `number`                                                                                | 30       | -        | \n| valuesCfg | cell configuration | `{ originalValueField?: string, widthPercent?: number[], showOriginalValue?: boolean }` |          | -        | \n \n## ColCfg \n \nobject is **required** , *default: null* Function description: column style configuration \n \n| parameter         | illustrate                                                                                                                                                                                                                                                                             | type                     | Defaults                    | required | \n| ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------ | --------------------------- | :------: | \n| width             | Cell width, which can be dynamically set according to the current column header node (leaf nodes are valid)                                                                                                                                                                            | \\`number                 | (colNode: Node) => number\\` |          | \n| height            | cell height                                                                                                                                                                                                                                                                            | `number`                 | 30                          |          | \n| widthByFieldValue | Set the width according to the measurement value (drag or preset width scene), `fieldValue` corresponds to the column header value in `s2DataConfig.fields.columns`                                                                                                                    | `Record<string, number>` | -                           |          | \n| heightByField     | Set the height according to the measurement value (drag and drop or preset height scene), the `field` corresponds to the column header id, [view details](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | -                           |          | \n| hideMeasureColumn | The default value hangs the column header, which will display the column header and the value at the same time, and hide the value column to make it more beautiful.                                                                                                                   | `boolean`                | false                       |          | \n \n## RowCfg \n \nobject is **required** , *default: null* Function description: row style configuration \n \n| parameter     | illustrate                                                                                                                                                                                                                 | type                     | Defaults                    | required | \n| ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------ | --------------------------- | :------: | \n| width         | Row cell width, the width can be dynamically set according to the current row header node, if it is a tree structure, please use `styles.treeRowsWidth`                                                                    | \\`number                 | (rowNode: Node) => number\\` |    96    | \n| treeRowsWidth | Under the tree structure, row cell width ( **deprecated, please use `style.treeRowsWidth` instead** )                                                                                                                      | `number`                 | 120                         |          | \n| widthByField   | Set the width of each line according to `field` . `field` is the id of the row, [see details](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | -                           |          | \n| heightByField | Set the height of each row according to `field` . `field` is the id of the row, [see details](/docs/manual/advanced/custom/cell-size#%E8%B0%83%E6%95%B4%E8%A1%8C%E5%A4%B4%E5%8D%95%E5%85%83%E6%A0%BC%E5%AE%BD%E9%AB%98) | `Record<string, number>` | -                           |          | \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"window-adaptation",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/lAWvv3XGU/chuangkouzishiying.gif",source:"import { PivotSheet } from '@antv/s2'\nimport { debounce } from 'lodash'\n\n\nfetch(\n    'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n    .then((res) => res.json())\n    .then((dataCfg) => {\n        const container = document.getElementById('container');\n\n        const s2Options = {\n            width: 600,\n            height: 480,\n        };\n        const s2 = new PivotSheet(container, dataCfg, s2Options);\n        s2.render();\n\n        const debounceRender = debounce((width, height) => {\n            s2.changeSheetSize(width, height)\n            s2.render(false) // 不重新加载数据\n        }, 200)\n\n        new ResizeObserver(([entry] = []) => {\n            const [size] = entry.borderBoxSize || [];\n            debounceRender(size.inlineSize, size.blockSize)\n        }).observe(document.body); // 通过监听 document.body 来实现监听窗口大小变化\n    });\n\n",title:{zh:"窗口自适应",en:"Window adaptation"},filename:"window-adaptation.ts",isNew:!1},{id:"container-adaptation",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/KGzcHFhKw/rongqizishiying.gif",source:"import { PivotSheet } from '@antv/s2'\nimport { debounce } from 'lodash'\n\nfetch(\n    'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n    .then((res) => res.json())\n    .then((dataCfg) => {\n        const container = document.getElementById('container');\n        container.innerHTML = '<div style=\"width: 100%; height: 600px; display: flex; flex-flow: row nowrap; \"> ' +\n            '<p id=\"side\" style=\"flex-basis: 100px; width: 100px\"> 这是一个新的node</p> <div id=\"content\" style=\"width: 600px \"></div> ' +\n            '</div>';\n\n        const content = document.getElementById('content')\n        setTimeout(() => {\n            content.style.width = '300px';\n        }, 1000)\n\n        const s2Options = {\n            width: 600,\n            height: 480,\n        };\n        const s2 = new PivotSheet(content, dataCfg, s2Options);\n\n        s2.render();\n        const debounceRender = debounce((width, height) => {\n            s2.changeSheetSize(width, height)\n            s2.render(false) // 不重新加载数据\n        }, 200)\n\n        const resizeObserver = new ResizeObserver(([entry] = []) => {\n            const [size] = entry.borderBoxSize || [];\n            debounceRender(size.inlineSize, size.blockSize)\n        });\n        resizeObserver.observe(content);\n    });\n\n",title:{zh:"容器自适应",en:"Container adaptation"},filename:"container-adaptation.ts",isNew:!1},{id:"react-adaptive",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/tKAKwgB5r/React%252520zujianzishiying.gif",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={dataCfg}\n        options={s2Options}\n        adaptive={{\n          width: true,\n          height: false,\n          getContainer: () => document.getElementById('container'),\n        }}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"React 组件自适应",en:"React adaptive"},filename:"react-adaptive.tsx",isNew:!1}],icon:"",id:"adaptive",title:{en:"Adaptive Layout",zh:"自适应布局"},api:{zh:' \n \n表格默认根据配置的 `width` 和 `height` 渲染： \n \n```ts \nconst s2Options = { \n  width: 600, \n  height: 400, \n} \n``` \n \n需要注意的是，表格基于 `Canvas` 渲染，配置的宽高其实就是设置 `canvas` 的 `width` 和 `height`, 也就是意味着 `100%`, `80vw` 之类的配置是不生效的： \n \n```ts \nconst s2Options = { \n  width: \'100%\', // ❌ \n  height: \'20vh\',// ❌ \n} \n``` \n \n![preview](https://gw.alipayobjects.com/zos/antfincdn/WmM9%24SLfu/2396a53f-8946-497a-9e68-fd89f01077ff.png) \n \n### 窗口自适应 \n \n如果想让表格撑满整个父容器，可以监听 窗口的 `resize` 事件，或使用 [ResizeObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver) 监听容器大小变化，然后更新表格宽高： \n \n```ts \nimport { PivotSheet } from \'@antv/s2\' \nimport { debounce } from \'lodash\' \n \nconst s2 = new PivotSheet(...) \n \nconst debounceRender = debounce((width, height) => { \n  s2.changeSheetSize(width, height) \n  s2.render(false) // 不重新加载数据 \n}, 200) \n \nnew ResizeObserver(([entry] = []) => { \n    const [size] = entry.borderBoxSize || []; \n    debounceRender(size.inlineSize, size.blockSize) \n}).observe(document.body); // 通过监听 document.body 来实现监听窗口大小变化 \n``` \n \n![preview](https://gw.alipayobjects.com/zos/antfincdn/8kmgXX%267U/Kapture%2525202021-11-23%252520at%25252017.59.16.gif) \n \n​📊 查看 [窗口自适应 demo](/examples/layout/adaptive#window-adaptation) \n \n### 容器自适应 \n \n如果是容器本身大小发生改变，而不是窗口，那么可以使用 [ResizeObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver) 获取到实时的容器大小： \n \n```ts \nimport { PivotSheet } from \'@antv/s2\' \nimport { debounce } from \'lodash\' \n \nconst s2 = new PivotSheet(...) \n \nconst parent = /* 你的容器节点 */ \n \nconst debounceRender = debounce((width, height) => { \n  s2.changeSheetSize(width, height) \n  s2.render(false) // 不重新加载数据 \n}, 200) \n \nconst resizeObserver = new ResizeObserver(([entry] = []) => { \n  const [size] = entry.borderBoxSize || []; \n  debounceRender(size.inlineSize, size.blockSize) \n}); \n \nresizeObserver.observe(parent); \n \n// 取消监听 \n// resizeObserver.unobserve(parent) \n``` \n \n![preview](https://gw.alipayobjects.com/zos/antfincdn/IFNNjZ862/Kapture%2525202021-11-23%252520at%25252019.07.37.gif) \n \n​📊 查看 [容器自适应 demo](/examples/layout/adaptive#container-adaptation) \n \n### React 组件 \n \n如果是使用 `@antv/s2-react` 的方式，可以配置 `adaptive` 参数开启自适应。 \n \n#### Adaptive 参数类型 \n \n```ts \n// `adaptive` 的类型 `Adaptive` \ntype Adaptive = \n  | boolean \n  | { \n      width?: boolean; \n      height?: boolean; \n      getContainer?: () => HTMLElement; \n    } \n``` \n \n配置为 `boolean` 值时： \n \n* true: 容器默认为内部的 `<div class=antv-s2-wrapper>`, 只有宽度自适应，高度以 options 设置的为准 \n* false: 宽高都以 options 设置的为准 \n \n```tsx \nimport { SheetComponent } from \'@antv/s2-react\'; \n \n<SheetComponent adaptive={true} /> \n<SheetComponent adaptive={false} /> \n``` \n \n也可以配置只对宽度或高度开启自适应，上面的配置等同于： \n \n```tsx \nimport { SheetComponent } from \'@antv/s2-react\'; \n \n<SheetComponent adaptive={{ width: true, height: true }} /> \n<SheetComponent adaptive={{ width: false, height: false }} /> \n``` \n \n还可以自定义自适应的容器： \n \n```tsx \nimport { SheetComponent } from \'@antv/s2-react\'; \n \nconst adaptiveRef = React.useRef<HTMLDivElement>(); \nconst containerId = \'containerId\'; \n \n<div \n  id={containerId} \n  :style="{ \n    width: 600, \n    height: 400, \n  }" \n> \n  <SheetComponent \n    adaptive={{ \n      width: true, \n      height: false, \n      getContainer: () => adaptiveRef.current // 或者使用 document.getElementById(containerId) \n    }} \n  /> \n</div> \n``` \n \n​📊 查看 [React 组件自适应 demo](/examples/layout/adaptive#react-adaptive) \n \n### Vue 组件 \n \n如果是使用 `@antv/s2-vue` 的方式，可以配置 `adaptive` 参数开启自适应，`adaptive`参数的类型和使用方法与`@antv/s2-react`基本一致。 \n \n可以配置为 `boolean` 值： \n \n```tsx \n<template> \n  <SheetComponent \n    :dataCfg="your-dataCfg" \n    :options="your-options" \n    :adaptive="true" \n  /> \n  <SheetComponent \n    :dataCfg="your-dataCfg" \n    :options="your-options" \n    :adaptive="false" \n  /> \n</template> \n``` \n \n也可以配置只对宽度或高度开启自适应，上面的配置等同于： \n \n```tsx \n<template> \n  <SheetComponent \n    :dataCfg="your-dataCfg" \n    :options="your-options" \n    :adaptive="{ width: true, height: true }" \n  /> \n  <SheetComponent \n    :dataCfg="your-dataCfg" \n    :options="your-options" \n    :adaptive="{ width: false, height: false }" \n  /> \n</template> \n``` \n \n还可以自定义自适应的容器： \n \n```tsx \n<script setup> \nconst adaptive = { \n  width: true, \n  height: true, \n  getContainer: () => document.getElementById(\'containerId\'), \n}; \n<\/script> \n \n<template> \n  <div \n    id="containerId" \n    style="width:600px;height:400px" \n  > \n    <SheetComponent \n      :dataCfg="your-dataCfg" \n      :options="your-options" \n      :adaptive="adaptive" \n    /> \n  </div> \n</template> \n``` \n \n​📊 查看 [Vue 组件自适应 demo](https://codesandbox.io/s/vue-adaptive-demo-4pptyy?file=/src/App.vue) \n \n \n',en:' \n \nThe table is rendered according to the configured `width` and `height` by default: \n \n```ts \nconst s2Options = { \n  width: 600, \n  height: 400, \n} \n``` \n \nIt should be noted that the table is rendered based on `Canvas` , and the width and height of the configuration are actually setting the `width` and `height` of the `canvas` , which means that configurations such as `100%` , `80vw` , etc. will not take effect: \n \n```ts \nconst s2Options = { \n  width: \'100%\', // ❌ \n  height: \'20vh\',// ❌ \n} \n``` \n \n![preview](https://gw.alipayobjects.com/zos/antfincdn/WmM9%24SLfu/2396a53f-8946-497a-9e68-fd89f01077ff.png) \n \n### window adaptive \n \nIf you want the table to fill the entire parent container, you can listen to the `resize` event of the window, or use [ResizeObserver to](https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver) monitor the container size change, and then update the table width and height: \n \n```ts \nimport { PivotSheet } from \'@antv/s2\' \nimport { debounce } from \'lodash\' \n \nconst s2 = new PivotSheet(...) \n \nconst debounceRender = debounce((width, height) => { \n  s2.changeSheetSize(width, height) \n  s2.render(false) // 不重新加载数据 \n}, 200) \n \nnew ResizeObserver(([entry] = []) => { \n    const [size] = entry.borderBoxSize || []; \n    debounceRender(size.inlineSize, size.blockSize) \n}).observe(document.body); // 通过监听 document.body 来实现监听窗口大小变化 \n``` \n \n![preview](https://gw.alipayobjects.com/zos/antfincdn/8kmgXX%267U/Kapture%2525202021-11-23%252520at%25252017.59.16.gif) \n \n​📊 Check out the [window adaptive demo](/examples/layout/adaptive#window-adaptation) \n \n### container adaptation \n \nIf the size of the container itself changes instead of the window, you can use [ResizeObserver](https://developer.mozilla.org/zh-CN/docs/Web/API/ResizeObserver) to get the real-time container size: \n \n```ts \nimport { PivotSheet } from \'@antv/s2\' \nimport { debounce } from \'lodash\' \n \nconst s2 = new PivotSheet(...) \n \nconst parent = /* 你的容器节点 */ \n \nconst debounceRender = debounce((width, height) => { \n  s2.changeSheetSize(width, height) \n  s2.render(false) // 不重新加载数据 \n}, 200) \n \nconst resizeObserver = new ResizeObserver(([entry] = []) => { \n  const [size] = entry.borderBoxSize || []; \n  debounceRender(size.inlineSize, size.blockSize) \n}); \n \nresizeObserver.observe(parent); \n \n// 取消监听 \n// resizeObserver.unobserve(parent) \n``` \n \n![preview](https://gw.alipayobjects.com/zos/antfincdn/IFNNjZ862/Kapture%2525202021-11-23%252520at%25252019.07.37.gif) \n \n​📊 View [container adaptive demo](/examples/layout/adaptive#container-adaptation) \n \n### React components \n \nIf you use `@antv/s2-react` , you can configure the `adaptive` parameter to enable self-adaptation. \n \n#### Adaptive parameter type \n \n```ts \n// `adaptive` 的类型 `Adaptive` \ntype Adaptive = \n  | boolean \n  | { \n      width?: boolean; \n      height?: boolean; \n      getContainer?: () => HTMLElement; \n    } \n``` \n \nWhen configured as a `boolean` value: \n \n* true: The container defaults to the inner `<div class=antv-s2-wrapper>` , only the width is adaptive, and the height is subject to the settings in options \n* false: width and height are subject to the settings of options \n \n```tsx \nimport { SheetComponent } from \'@antv/s2-react\'; \n \n<SheetComponent adaptive={true} /> \n<SheetComponent adaptive={false} /> \n``` \n \nIt can also be configured to only enable adaptive width or height. The above configuration is equivalent to: \n \n```tsx \nimport { SheetComponent } from \'@antv/s2-react\'; \n \n<SheetComponent adaptive={{ width: true, height: true }} /> \n<SheetComponent adaptive={{ width: false, height: false }} /> \n``` \n \nYou can also customize the adaptive container: \n \n```tsx \nimport { SheetComponent } from \'@antv/s2-react\'; \n \nconst adaptiveRef = React.useRef<HTMLDivElement>(); \nconst containerId = \'containerId\'; \n \n<div \n  id={containerId} \n  :style="{ \n    width: 600, \n    height: 400, \n  }" \n> \n  <SheetComponent \n    adaptive={{ \n      width: true, \n      height: false, \n      getContainer: () => adaptiveRef.current // 或者使用 document.getElementById(containerId) \n    }} \n  /> \n</div> \n``` \n \n​📊 View [React component adaptive demo](/examples/layout/adaptive#react-adaptive) \n \n### Vue components \n \nIf you use `@antv/s2-vue` , you can configure the `adaptive` parameter to enable self-adaptation. The type and usage of the `adaptive` parameter are basically the same as `@antv/s2-react` . \n \nCan be configured as a `boolean` value: \n \n```tsx \n<template> \n  <SheetComponent \n    :dataCfg="your-dataCfg" \n    :options="your-options" \n    :adaptive="true" \n  /> \n  <SheetComponent \n    :dataCfg="your-dataCfg" \n    :options="your-options" \n    :adaptive="false" \n  /> \n</template> \n``` \n \nIt can also be configured to only enable adaptive width or height. The above configuration is equivalent to: \n \n```tsx \n<template> \n  <SheetComponent \n    :dataCfg="your-dataCfg" \n    :options="your-options" \n    :adaptive="{ width: true, height: true }" \n  /> \n  <SheetComponent \n    :dataCfg="your-dataCfg" \n    :options="your-options" \n    :adaptive="{ width: false, height: false }" \n  /> \n</template> \n``` \n \nYou can also customize the adaptive container: \n \n```tsx \n<script setup> \nconst adaptive = { \n  width: true, \n  height: true, \n  getContainer: () => document.getElementById(\'containerId\'), \n}; \n<\/script> \n \n<template> \n  <div \n    id="containerId" \n    style="width:600px;height:400px" \n  > \n    <SheetComponent \n      :dataCfg="your-dataCfg" \n      :options="your-options" \n      :adaptive="adaptive" \n    /> \n  </div> \n</template> \n``` \n \n​📊 Check out the [Vue component adaptive demo](https://codesandbox.io/s/vue-adaptive-demo-4pptyy?file=/src/App.vue) \n \n \n'},childrenKey:"demos",order:2}],childrenKey:"examples"},{id:"theme",title:{zh:"表格主题",en:"Theme"},icon:"skin",examples:[{demos:[{id:"default",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/nDIO0OG8fv/4ff6613f-fad3-4ea6-9473-0161509f692c.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"默认",en:"Default"},filename:"default.ts",isNew:!1},{id:"colorful",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/rgLkfo4MrT/95b7fbc3-8c6e-442c-9c4b-8bf8b3c3da1d.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.setThemeCfg({ name: 'colorful' });\n\n    s2.render();\n  });\n",title:{zh:"多彩蓝",en:"Colorful blue"},filename:"colorful.ts",isNew:!1},{id:"gray",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/4rwGg8Rp3N/cf08d7dd-ab96-446e-ba8d-146de8cb6a64.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.setThemeCfg({ name: 'gray' });\n\n    s2.render();\n  });\n",title:{zh:"简约灰",en:"Simple Gray"},filename:"gray.ts",isNew:!1}],icon:"",id:"default",title:{en:"Theme",zh:"主题"},api:{zh:" \n \n主题配置 \n \n```ts \n// 统一设置主题 Schema, 色板，名称 \ns2.setThemeCfg({ \n  theme: {}, \n  palette: {}, \n  name: \"default\" \n}); \n \n// 单独设置主题 Schema, 配置单元格背景，文字大小，文字颜色 \ns2.setTheme({ \n  rowCell: { \n    cell: { \n      backgroundColor: \"#fff\" \n    } \n  } \n}); \n``` \n \n## ThemeCfg \n \n<description> **optional** _object_ </description> \n \n功能描述： 表主题配置项 \n \n| 参数    | 参数        | 类型                              | 默认值    | 必选 | \n| ------- | ----------- | --------------------------------- | --------- | ---- | \n| theme   | 主题 schema | [S2Theme](#s2theme)               | -         |      | \n| palette | 色板        | [Palette](#palette)               | -         |      | \n| name    | 主题名      | `default` \\| `colorful` \\| `gray` | `default` |      | \n \n### Palette \n \n<description> **optional** _object_ </description> \n \n功能描述： 表主题色板 \n \n| 参数                | 参数                                                | 类型                                                             | 默认值 | 必选 | \n| ------------------- | --------------------------------------------------- | ---------------------------------------------------------------- | ------ | ---- | \n| brandColor          | 色板主题色                                          | `string`                                                         | -      | ✓    | \n| basicColors         | 基础颜色                                            | `string[]`                                                       | -      | ✓    | \n| basicColorRelations | basicColors 与标准色板数组下标的对应关系            | `Array<{ basicColorIndex: number; standardColorIndex: number;}>` | -      | ✓    | \n| semanticColors      | 用于表示实际业务语义的颜色。例如内置颜色 “红跌绿涨” | `[key: string]`                                                  | -      | ✓    | \n| others              | 用于表示实际业务语义的颜色。例如内置颜色 “红跌绿涨” | `[key: string]`                                                  | -      |      | \n \n### S2Theme \n \n<description> **optional** _object_ </description> \n \n功能描述： 表主题 `Schema` \n \n| 参数              | 参数                                   | 类型                                            | 默认值 | 必选 | \n| ----------------- | -------------------------------------- | ----------------------------------------------- | ------ | ---- | \n| cornerCell        | 角头单元格主题                         | [DefaultCellTheme](#defaultcelltheme)           |        |      | \n| rowCell           | 行头单元格主题                         | [DefaultCellTheme](#defaultcelltheme)           |        |      | \n| colCell           | 列头单元格主题                         | [DefaultCellTheme](#defaultcelltheme)           |        |      | \n| dataCell          | 数值单元格主题                         | [DefaultCellTheme](#defaultcelltheme)           |        |      | \n| resizeArea        | 列宽行高调整热区                       | [ResizeArea](#resizearea)                       |        |      | \n| scrollBar         | 滚动条样式                             | [ScrollBarTheme](#scrollbartheme)               |        |      | \n| splitLine         | 单元格分割线样式                       | [SplitLine](#splitline)                         |        |      | \n| prepareSelectMask | 刷选遮罩样式                           | [InteractionStateTheme](#interactionstatetheme) |        |      | \n| background        | 背景样式                               | [Background](#background)                       |        |      | \n| [key: string]     | 额外属性字段，用于用户自定义主题时传参 | `unknown`                                       |        |      | \n \n#### DefaultCellTheme \n \n<description> **optional** _object_ </description> \n \n功能描述： 默认单元格主题 \n \n| 参数              | 说明           | 类型                              | 默认值 | 必选 | \n| ----------------- | -------------- | --------------------------------- | ------ | ---- | \n| bolderText        | 加粗文本样式   | [TextTheme](#texttheme)           | -      |      | \n| text              | 文本样式       | [TextTheme](#texttheme)           | -      |      | \n| seriesText        | 序号文本样式   | [TextTheme](#texttheme)           | -      |      | \n| measureText       | 度量值文本样式 | [TextTheme](#texttheme)           | -      |      | \n| cell              | 单元格样式     | [CellTheme](#celltheme)           | -      |      | \n| icon              | 图标样式       | [IconTheme](#icontheme)           | -      |      | \n| seriesNumberWidth | 序号列宽       | `number`                          | 80     |      | \n| miniChart         | mini 图        | [MiniChartTheme](#minicharttheme) |        |      | \n \n#### ResizeArea \n \n<description> **optional** _object_ </description> \n \n功能描述： 列宽行高拖拽热区样式 \n \n| 参数              | 说明                                                                                                         | 类型                                  | 默认值   | 必选 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------ | ------------------------------------- | -------- | ---- | \n| size              | 热区大小                                                                                                     | `number`                              | 3        |      | \n| background        | 热区背景色                                                                                                   | `string`                              | -        |      | \n| backgroundOpacity | 热区背景色透明度                                                                                             | `number`                              | -        |      | \n| guideLineColor    | 参考线颜色                                                                                                   | `string`                              | -        |      | \n| guideLineDash     | 热区参考线 [虚线模式](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/setLineDash) | `number[]`                            | `[3, 3]` |      | \n| interactionState  | 热区交互态样式                                                                                               | [InteractionState](#interactionstate) | -        |      | \n \n#### ScrollBarTheme \n \n<description> **optional** _object_ </description> \n \n功能描述： 滚动条样式 \n \n| 参数            | 说明                       | 类型                          | 默认值               | 必选 | \n| --------------- | -------------------------- | ----------------------------- | -------------------- | ---- | \n| trackColor      | 滚动条轨道颜色             | `string`                      | `rgba(0,0,0,0)`      |      | \n| thumbHoverColor | 滚动条 Hover 态颜色        | `string`                      | `rgba(0,0,0,0.4)`    |      | \n| thumbColor      | 滚动条颜色                 | `string`                      | `rgba(0,0,0,0.15)`   |      | \n| thumbHorizontalMinSize      | 滚动条水平最小尺寸 （在大数量情况下，滚动条会很小，可配置水平滚动条最小尺寸）                | `string`                      | `32`   |      | \n| thumbVerticalMinSize      | 滚动条垂直最小尺寸 （在大数量情况下，滚动条会很小，可配置垂直滚动条最小尺寸）                 | `string`                      | `32`   |      | \n| size            | 滚动条尺寸                 | `number`                      | Mobile: `3` <br> PC: `6` |      | \n| hoverSize       | 滚动条 Hover 时的尺寸        | `number`                      | `16`                   |      | \n| lineCap         | 指定如何绘制每一条线段末端 | `butt` \\| `round` \\| `square` | `round`              |      | \n \n#### SplitLine \n \n<description> **optional** _object_ </description> \n \n功能描述： 分割线样式 \n \n| 参数                         | 说明                                                      | 类型                                   | 默认值                                                   | 必选 | \n| ---------------------------- | --------------------------------------------------------- | -------------------------------------- | -------------------------------------------------------- | ---- | \n| horizontalBorderColor        | 水平分割线颜色                                            | `string`                               | -                                                        |      | \n| horizontalBorderColorOpacity | 水平分割线颜色透明度                                      | `number`                               | 0.2                                                      |      | \n| horizontalBorderWidth        | 水平分割线宽度                                            | `number`                               | 2                                                        |      | \n| verticalBorderColor          | 垂直分割线颜色                                            | `string`                               | -                                                        |      | \n| verticalBorderColorOpacity   | 垂直分割线颜色透明度                                      | `number`                               | 0.25                                                     |      | \n| verticalBorderWidth          | 垂直分割线宽度                                            | `number`                               | 2                                                        |      | \n| showShadow                   | 分割线是否显示外阴影（行列冻结情况下）                    | `boolean`                              | `true`                                                   |      | \n| shadowWidth                  | 阴影宽度                                                  | `number`                               | 10                                                       |      | \n| shadowColors                 | `left` : 线性变化左侧颜色 <br> `right` : 线性变化右侧颜色 | `{left: string,` <br> `right: string}` | `{left: 'rgba(0,0,0,0.1)',`<br>`right: 'rgba(0,0,0,0)'}` |      | \n| borderDash                 | 分割线虚线 | `number[]` | `[]` |      | \n \n#### TextTheme \n \n<description> **optional** _object_ </description> \n \n功能描述： 文本主题 \n \n| 参数         | 说明                                                                           | 类型                          | 默认值                                                                                            | 必选 | \n| ------------ | ------------------------------------------------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------- | ---- | \n| textAlign    | 文本内容的对齐方式                                                             | `left` \\| `center` \\| `right` | -                                                                                                 |      | \n| textBaseline | 绘制文本时的基线                                                               | `top` \\| `middle` \\| `bottom` | -                                                                                                 |      | \n| fontFamily   | 字体                                                                           | `string`                      | `Roboto, PingFangSC,` <br> `BlinkMacSystemFont,` <br> `Microsoft YaHei,` <br> `Arial, sans-serif` |      | \n| fontSize     | 字体大小                                                                       | `number`                      | -                                                                                                 |      | \n| fontWeight   | number <br> string: `normal` <br> `bold` <br> `bolder` <br> `lighter` 字体粗细 | `number` \\| `string`          | 粗体文本：Mobile：`520` PC: `bold` <br> 普通文本：`normal`                                        |      | \n| fontStyle   | 字体样式    | `normal \\| italic \\| oblique`        |  `normal` | \n| fontVariant | 字体变体  | `normal \\| small-caps \\| string`    |  `normal`  | \n| fill         | 字体颜色                                                                       | `string`                      | -                                                                                                 |      | \n| linkTextFill | 链接文本颜色                                                                   | `string`                      | -                                                                                                 |      | \n| opacity      | 字体透明度                                                                     | `number`                      | 1                                                                                                 |      | \n \n#### CellTheme \n \n<description> **optional** _object_ </description> \n \n功能描述： 单元格通用主题 \n \n| 参数                         | 说明                                    | 类型                                            | 默认值 | 必选 | \n| ---------------------------- | --------------------------------------- | ----------------------------------------------- | ------ | ---- | \n| crossBackgroundColor         | 奇数行单元格背景色                      | `string`                                        | -      |      | \n| backgroundColor              | 单元格背景色 （默认斑马纹效果，如果想禁用，可将 `crossBackgroundColor` 和 `backgroundColor` 设置为同一颜色）                           | `string`                                        | -      |      | \n| backgroundColorOpacity       | 单元格背景色透明度                      | `number`                                        | 1      |      | \n| horizontalBorderColor        | 单元格水平边线颜色                      | `string`                                        | -      |      | \n| horizontalBorderColorOpacity | 单元格水平边线颜色透明度                | `number`                                        | 1      |      | \n| horizontalBorderWidth        | 单元格水平边线宽度                      | `number`                                        | -      |      | \n| verticalBorderColor          | 单元格垂直边线颜色                      | `string`                                        | -      |      | \n| verticalBorderColorOpacity   | 单元格垂直边线颜色透明度                | `number`                                        | 1      |      | \n| verticalBorderWidth          | 单元格垂直边线宽度                      | `number`                                        | -      |      | \n| padding                      | 单元格内边距                            | [Padding](#margin--padding)                     | -      |      | \n| interactionState             | 单元格交互态  ([查看默认配置](https://github.com/antvis/S2/blob/master/packages/s2-core/src/theme/index.ts#L66-L107)) ([示例](/zh/examples/interaction/basic#state-theme))                       |  Record<[InteractionStateName](#interactionstatename), [InteractionStateTheme](#interactionstatetheme)> | -      |      | \n| miniBarChartHeight           | 单元格内条件格式-迷你条形图高度         | `number`                                        | 12     |      | \n| miniBarChartFillColor        | 单元格内条件格式-迷你条形图默认填充颜色 | `string`                                        | -      |      | \n| borderDash        | 单元格边线虚线 | `number[]`                                        | `[]`      |      | \n \n#### IconTheme \n \n<description> **optional** _object_ </description> \n \n功能描述：icon 通用主题 \n \n| 参数          | 说明             | 类型                       | 默认值    | 必选 | \n| ------------- | ---------------- | -------------------------- | --------- | ---- | \n| fill          | icon 填充色      | `string`                   | -         |      | \n| downIconColor | 下跌 icon 填充色 | `string`                   | `#FF4D4F` |      | \n| upIconColor   | 上涨 icon 填充色 | `string`                   | `#29A294` |      | \n| size          | icon 大小        | `number`                   | -         |      | \n| margin        | 单元格外边距     | [Margin](#margin--padding) | -         |      | \n \n#### InteractionStateName \n \n> 示例 \n \n```ts \ns2.setTheme({ \n  dataCell: { \n    cell: { \n      interactionState: { \n        hoverFocus: {}, \n        selected: {}, \n        prepareSelect: {} \n      } \n    } \n  } \n}) \n``` \n \n| 状态名              | 说明       | 类型     | 默认值 | 必选 | \n| ----------------- | ---------- | -------- | ------ | ---- | \n| hover   | 悬停 | [InteractionStateTheme](#interactionstatetheme) |        |      | \n| hoverFocus | 悬停聚焦 | [InteractionStateTheme](#interactionstatetheme) |        |      | \n| selected       | 选中 | [InteractionStateTheme](#interactionstatetheme)|        |      | \n| unselected       | 未选中   | [InteractionStateTheme](#interactionstatetheme) |        |      | \n| searchResult     | 搜索结果 | [InteractionStateTheme](#interactionstatetheme) |        |      | \n| highlight       | 高亮 | [InteractionStateTheme](#interactionstatetheme) |        |      | \n| prepareSelect           | 预选中 | [InteractionStateTheme](#interactionstatetheme) |        |      | \n \n#### InteractionStateTheme \n \n<description> **optional** _object_ </description> \n \n功能描述：交互通用主题 \n \n```ts \ntype InteractionState = { \n  [K in InteractionStateName]?: InteractionStateTheme; \n}; \n``` \n \n| 参数              | 说明       | 类型     | 默认值 | 必选 | \n| ----------------- | ---------- | -------- | ------ | ---- | \n| backgroundColor   | 背景填充色 | `string` |        |      | \n| backgroundOpacity | 背景透明度 | `number` |        |      | \n| borderColor       | 边线填充色 | `string` |        |      | \n| borderWidth       | 边线宽度   | `number` |        |      | \n| borderOpacity     | 边线透明度 | `number` |        |      | \n| textOpacity       | 文本透明度 | `number` |        |      | \n| opacity           | 整体透明度 | `number` |        |      | \n \n#### Margin ｜ Padding \n \n<description> **optional** _object_ </description> \n \n功能描述：icon 外边距，单元格内边距 \n \n| 参数   | 说明 | 类型     | 默认值 | 必选 | \n| ------ | ---- | -------- | ------ | ---- | \n| top    | 上   | `number` |        |      | \n| right  | 右   | `number` |        |      | \n| bottom | 下   | `number` |        |      | \n| left   | 左   | `number` |        |      | \n \n#### Background \n \n<description> **optional** _object_ </description> \n \n功能描述：背景配置 \n \n| 参数    | 说明   | 类型     | 默认值 | 必选 | \n| ------- | ------ | -------- | ------ | ---- | \n| color   | 颜色   | `string` | -      |      | \n| opacity | 透明度 | `number` | 1      |      | \n \n#### MiniChartTheme \n \n功能描述：迷你图配置 \n \n| 参数     | 说明           | 类型                            | 默认值 | 必选 | \n| -------- | -------------- | ------------------------------- | ------ | ---- | \n| line     | 折线图样式配置 | [LineTheme](#linetheme)         |        |      | \n| bar      | 柱状图样式配置 | [BarTheme](#bartheme)           |        |      | \n| bullet   | 颜色           | [BulletTheme](#bullettheme)     |        |      | \n| interval | 透明度         | [IntervalTheme](#intervaltheme) |        |      | \n \n#### LineTheme \n \n功能描述：mini 折线图样式配置 \n \n| 参数     | 说明           | 类型                                              | 默认值 | 必选 | \n| -------- | -------------- | ------------------------------------------------- | ------ | ---- | \n| point    | 折线图的点配置 | `{size: number; fill?: number; opacity?: number}` |        |      | \n| linkLine | 折线图的线配置 | `{size: number; fill: number; opacity: number}`   |        |      | \n \n#### BarTheme \n \n功能描述：mini 柱状图样式配置 \n \n| 参数            | 说明                 | 类型     | 默认值 | 必选 | \n| --------------- | -------------------- | -------- | ------ | ---- | \n| intervalPadding | 柱状图之间的间隔距离 | `number` |        |      | \n| fill            | 颜色填充             | `string` |        |      | \n| opacity         | 透明度               | `number` |        |      | \n \n#### BulletTheme \n \n功能描述：mini 子弹图样式配置 \n \n| 参数               | 说明           | 类型                                      | 默认值 | 必选 | \n| ------------------ | -------------- | ----------------------------------------- | ------ | ---- | \n| progressBar        | 进度条样式     | [ProgressBar](#progressbar)               |        |      | \n| comparativeMeasure | 测量标记线     | [ComparativeMeasure](#comparativemeasure) |        |      | \n| rangeColors        | 子弹图状态颜色 | [RangeColors](#rangecolors)               |        |      | \n| backgroundColor    | 子弹图背景颜色 | string                                    |        |      | \n \n#### ProgressBar \n \n功能描述：mini 子弹图进度条样式配置 \n \n| 参数               | 说明           | 类型                                      | 默认值 | 必选 | \n| ------------------ | -------------- | ----------------------------------------- | ------ | ---- | \n| widthPercent        | 子弹图宽度相对单元格 content 占比，小数     | `number` |        |      | \n| height | 高度     | `number`|        |      | \n| innerHeight        | 内高度 | `number`  |        |      | \n \n#### ComparativeMeasure \n \n功能描述：mini 子弹图测量标记线样式配置 \n \n| 参数               | 说明           | 类型                                      | 默认值 | 必选 | \n| ------------------ | -------------- | ----------------------------------------- | ------ | ---- | \n| width        | 宽度    | `number` |        |      | \n| height | 高度     | `number`|        |      | \n| fill            | 颜色填充             | `string` |        |      | \n| opacity         | 透明度               | `number` |        |      | \n \n#### RangeColors \n \n功能描述：mini 子弹图状态颜色样式配置 \n \n| 参数               | 说明           | 类型                                      | 默认值 | 必选 | \n| ------------------ | -------------- | ----------------------------------------- | ------ | ---- | \n| good        | 满意    | `string` |        |      | \n| satisfactory | 良好     | `string`|        |      | \n| bad            | 不符合预期             | `string` |        |      | \n \n#### IntervalTheme \n \n功能描述：mini 条形图样式（条件格式） \n \n| 参数   | 说明       | 类型     | 默认值 | 必选 | \n| ------ | ---------- | -------- | ------ | ---- | \n| height | 条形图高度 | `number` |        |      | \n| fill   | 颜色填充   | `string` |        |      | \n \n \n",en:' \n \ntheme configuration \n \n```ts \n// 统一设置主题 Schema, 色板，名称 \ns2.setThemeCfg({ \n  theme: {}, \n  palette: {}, \n  name: "default" \n}); \n \n// 单独设置主题 Schema, 配置单元格背景，文字大小，文字颜色 \ns2.setTheme({ \n  rowCell: { \n    cell: { \n      backgroundColor: "#fff" \n    } \n  } \n}); \n``` \n \n## ThemeCfg \n \n**optional** *object* \n \nFunction description: Table theme configuration items \n \n| parameter | parameter    | type                              | Defaults  | required | \n| :-------- | :----------- | :-------------------------------- | :-------- | :------: | \n| theme     | theme schema | [S2Theme](#s2theme)               | -         |          | \n| palette   | swatches     | [Palette](#palette)               | -         |          | \n| name      | subject name | `default` \\| `colorful` \\| `gray` | `default` |          | \n \n### Palette \n \n**optional** *object* \n \nFunction description: Table theme swatches \n \n| parameter           | parameter                                                                                                     | type                                                             | Defaults | required | \n| :------------------ | :------------------------------------------------------------------------------------------------------------ | :--------------------------------------------------------------- | :------- | :------: | \n| brandColor          | Swatch theme color                                                                                            | `string`                                                         | -        | ✓        | \n| basicColors         | base color                                                                                                    | `string[]`                                                       | -        | ✓        | \n| basicColorRelations | The correspondence between basicColors and the subscripts of the standard color palette array                 | `Array<{ basicColorIndex: number; standardColorIndex: number;}>` | -        | ✓        | \n| semanticColors      | Colors used to represent the actual business semantics. For example, the built-in color "red fall green rise" | `[key: string]`                                                  | -        | ✓        | \n| others              | Colors used to represent the actual business semantics. For example, the built-in color "red fall green rise" | `[key: string]`                                                  | -        |          | \n \n### S2Theme \n \n**optional** *object* \n \nFunction description: Table theme `Schema` \n \n| parameter         | parameter                                                                               | type                                            | Defaults | required | \n| :---------------- | :----------------------------------------------------------------------------------- | :---------------------------------------------- | :------- | :------: | \n| cornerCell        | Corner header cell theme                                                                | [DefaultCellTheme](#defaultcelltheme)           |          |          | \n| rowCell           | Row header cell theme                                                                   | [DefaultCellTheme](#defaultcelltheme)           |          |          | \n| colCell           | Column header cell theme                                                                | [DefaultCellTheme](#defaultcelltheme)           |          |          | \n| dataCell          | Numeric Cell Theme                                                                      | [DefaultCellTheme](#defaultcelltheme)           |          |          | \n| resizeArea        | Column Width Row Height Adjustment Hotspot                                              | [ResizeArea](#resizearea)                       |          |          | \n| scrollBar         | scroll bar style                                                                        | [ScrollBarTheme](#scrollbartheme)               |          |          | \n| splitLine         | Cell divider style                                                                      | [SplitLine](#splitline)                         |          |          | \n| prepareSelectMask | Brush mask style                                                                        | [InteractionStateTheme](#interactionstatetheme) |          |          | \n| background        | background style                                                                        | [background](#background)                       |          |          | \n| \\[key: string]    | Additional attribute fields, used for passing parameters when users customize the theme | `unknown`                                       |          |          | \n \n#### DefaultCellTheme \n \n**optional** *object* \n \nFunction description: Default cell theme \n \n| parameter         | illustrate                 | type                              | Defaults | required | \n| :---------------- | :------------------------- | :----------------------- | :------- | :------: | \n| bolderText        | bold text style            | [TextTheme](#texttheme)           | -        |          | \n| text              | text style                 | [TextTheme](#texttheme)           | -        |          | \n| seriesText        | Ordinal text style         | [TextTheme](#texttheme)           | -        |          | \n| measureText       | Metric Text Style          | [TextTheme](#texttheme)           | -        |          | \n| cell              | cell style                 | [Cell Theme](#celltheme)          | -        |          | \n| icon              | icon style                 | [IconTheme](#icontheme)           | -        |          | \n| seriesNumberWidth | Serial Number Column Width | `number`                          | 80       |          | \n| miniChart         | mini-figure                | [MiniChartTheme](#minicharttheme) |          |          | \n \n#### ResizeArea \n \n**optional** *object* \n \nFunction description: Column width row height drag hot zone style \n \n| parameter         | illustrate                                                                                                               | type                                  | Defaults | required | \n| :---------------- | :----------------------------------------------------------------------------------------------------------------------- | :------------------------------------ | :------- | :------: | \n| size              | Hot zone size                                                                                                            | `number`                              | 3        |          | \n| background        | Hot zone background color                                                                                                | `string`                              | -        |          | \n| backgroundOpacity | Hotspot background color transparency                                                                                    | `number`                              | -        |          | \n| guideLineColor    | Guide Color                                                                                                              | `string`                              | -        |          | \n| guideLineDash     | Hot Zone Guide [Dashed Line Mode](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/setLineDash) | `number[]`                            | `[3, 3]` |          | \n| interactionState  | Hot zone interactive state style                                                                                         | [InteractionState](#interactionstate) | -        |          | \n \n#### ScrollBarTheme \n \n**optional** *object* \n \nFunction description: scroll bar style \n \n| parameter       | illustrate                                         | type                          | Defaults           | required | \n| :-------------- | :------------------------------------------------- | :---------------------------- | :----------------- | :------: | \n| trackColor      | Scrollbar track color                              | `string`                      | `rgba(0,0,0,0)`    |          | \n| thumbHoverColor | Scrollbar Hover state color                        | `string`                      | `rgba(0,0,0,0.4)`  |          | \n| thumbColor      | scrollbar color                                    | `string`                      | `rgba(0,0,0,0.15)` |          | \n| size            | scroll bar size                                    | `number`                      | Mobile: 3 PC: 6    |          | \n| hoverSize       | Scroll bar Hover state size                        | `number`                      | 16                 |          | \n| lineCap         | Specifies how to draw the end of each line segment | `butt` \\| `round` \\| `square` | `round`            |          | \n \n#### SplitLine \n \n**optional** *object* \n \nFunction description: Split line style \n \n| parameter                    | illustrate                                                                                        | type                              | Defaults                                              | required | \n| :--------------------------- | :------------------------------------------------------------------------------------------------ | :-------------------------------- | :---------------------------------------------------- | :------: | \n| horizontalBorderColor        | Horizontal divider color                                                                          | `string`                          | -                                                     |          | \n| horizontalBorderColorOpacity | Horizontal divider color transparency                                                             | `number`                          | 0.2                                                   |          | \n| horizontalBorderWidth        | Horizontal split line width                                                                       | `number`                          | 2                                                     |          | \n| verticalBorderColor          | vertical line color                                                                               | `string`                          | -                                                     |          | \n| verticalBorderColorOpacity   | Vertical split line color transparency                                                            | `number`                          | 0.25                                                  |          | \n| verticalBorderWidth          | Vertical dividing line width                                                                      | `number`                          | 2                                                     |          | \n| showShadow                   | Whether to display the outer shadow of the dividing line (in the case of frozen rows and columns) | `boolean`                         | `true`                                                |          | \n| shadowWidth                  | shadow width                                                                                      | `number`                          | 10                                                    |          | \n| shadowColors                 | `left` : change the left color linearly `right` : change the color of the right side linearly     | `{left: string,` `right: string}` | `{left: \'rgba(0,0,0,0.1)\',` `right: \'rgba(0,0,0,0)\'}` |          | \n| borderDash                 | Split line dash | `number[]` | `[]` |      | \n \n#### TextTheme \n \n**optional** *object* \n \nFunction Description: Text Theme \n \n| parameter    | illustrate                                                    | type                          | Defaults                                                                           | required | \n| :----------- | :------------------------------------------------------------ | :---------------------------- | :--------------------------------------------------------------------------------- | :------: | \n| textAlign    | Alignment of text content                                     | `left` \\| `center` \\| `right` | -                                                                                  |          | \n| textBaseline | Baseline when drawing text                                    | `top` \\| `middle` \\| `bottom` | -                                                                                  |          | \n| fontFamily   | font                                                          | `string`                      | `Roboto, PingFangSC,` `BlinkMacSystemFont,` `Microsoft YaHei,` `Arial, sans-serif` |          | \n| fontSize     | font size                                                     | `number`                      | -                                                                                  |          | \n| fontWeight   | number string: `normal` `bold` `bolder` `lighter` font weight | `number` \\| `string`          | Bold text: Mobile: `520` PC: `bold` Normal text: `normal`                          |          | \n| fill         | font color                                                    | `string`                      | -                                                                                  |          | \n| linkTextFill | link text color                                               | `string`                      | -                                                                                  |          | \n| opacity      | font transparency                                             | `number`                      | 1                                                                                  |          | \n \n#### Cell Theme \n \n**optional** *object* \n \nFunction description: Cell general theme \n \n| parameter                    | illustrate                                                              | type                                            | Defaults | required | \n| :--------------------------- | :---------------------------------------------------------------------- | :---------------------------------------------- | :------- | :------: | \n| crossBackgroundColor         | Cardinal row cell background color                                      | `string`                                        | -        |          | \n| backgroundColor              | cell background color                                                   | `string`                                        | -        |          | \n| backgroundColorOpacity       | Cell background color transparency                                      | `number`                                        | 1        |          | \n| horizontalBorderColor        | Cell horizontal border color                                            | `string`                                        | -        |          | \n| horizontalBorderColorOpacity | Cell horizontal border color transparency                               | `number`                                        | 1        |          | \n| horizontalBorderWidth        | Cell horizontal border width                                            | `number`                                        | -        |          | \n| verticalBorderColor          | Cell vertical border color                                              | `string`                                        | -        |          | \n| verticalBorderColorOpacity   | Cell vertical border color transparency                                 | `number`                                        | 1        |          | \n| verticalBorderWidth          | cell vertical border width                                              | `number`                                        | -        |          | \n| padding                      | cell padding                                                            | [Padding](#margin--padding)                     | -        |          | \n| interactionState             | cell interaction state                                                  | [InteractionStateTheme](#interactionstatetheme) | -        |          | \n| miniBarChartHeight           | In-Cell Conditional Formatting - Sparkline Bar Height                   | `number`                                        | 12       |          | \n| miniBarChartFillColor        | In-cell conditional formatting - default fill color for mini bar charts | `string`                                        | -        |          | \n| borderDash        | cell border dash | `number[]`                                        | `[]`      |      | \n \n#### IconTheme \n \n**optional** *object* \n \nFunction description: icon general theme \n \n| parameter     | illustrate             | type                       | Defaults  | required | \n| :------------ | :--------------------- | :------------------------- | :-------- | :------: | \n| fill          | icon fill color        | `string`                   | -         |          | \n| downIconColor | drop icon fill color   | `string`                   | `#FF4D4F` |          | \n| upIconColor   | Rising icon fill color | `string`                   | `#29A294` |          | \n| size          | icon size              | `number`                   | -         |          | \n| margin        | cell margin            | [Margin](#margin--padding) | -         |          | \n \n#### InteractionStateTheme \n \n**optional** *object* \n \nFunction description: interactive general theme \n \n| parameter         | illustrate              | type     | Defaults | required | \n| ----------------- | ----------------------- | -------- | -------- | -------- | \n| backgroundColor   | background fill color   | `string` |          |          | \n| backgroundOpacity | background transparency | `number` |          |          | \n| borderColor       | Edge fill color         | `string` |          |          | \n| borderWidth       | Edge Width              | `number` |          |          | \n| borderOpacity     | border transparency     | `number` |          |          | \n| textOpacity       | text transparency       | `number` |          |          | \n| opacity           | overall transparency    | `number` |          |          | \n \n#### Margin｜Padding \n \n**optional** *object* \n \nFunction description: icon outer margin, cell inner margin \n \n| parameter | illustrate | type     | Defaults | required | \n| :-------- | :--------- | :------- | :------- | :------: | \n| top       | superior   | `number` |          |          | \n| right     | right      | `number` |          |          | \n| bottom    | Down       | `number` |          |          | \n| left      | left       | `number` |          |          | \n \n#### background \n \n**optional** *object* \n \nFunction description: background configuration \n \n| parameter | illustrate   | type     | Defaults | required | \n| --------- | ------------ | -------- | -------- | -------- | \n| color     | color        | `string` | -        |          | \n| opacity   | transparency | `number` | 1        |          | \n \n#### MiniChartTheme \n \nFunction description: sparkline configuration \n \n| parameter | illustrate                     | type                             | Defaults | required | \n| --------- | ------------------------------ | -------------------------------- | -------- | -------- | \n| line      | Line chart style configuration | [Line Theme](#linetheme)         |          |          | \n| bar       | Histogram style configuration  | [Bar Theme](#bartheme)           |          |          | \n| bullet    | color                          | [Bullet Theme](#bullettheme)     |          |          | \n| interval  | transparency                   | [Interval Theme](#intervaltheme) |          |          | \n \n#### Line Theme \n \nFunction description: mini line chart style configuration \n \n| parameter | illustrate                          | type                                              | Defaults | required | \n| --------- | ----------------------------------- | ------------------------------------------------- | -------- | -------- | \n| point     | Point Configuration for Line Charts | `{size: number; fill?: number; opacity?: number}` |          |          | \n| linkLine  | Line Configuration for Line Charts  | `{size: number; fill: number; opacity: number}`   |          |          | \n \n#### Bar Theme \n \nFunction description: mini histogram style configuration \n \n| parameter       | illustrate                           | type     | Defaults | required | \n| --------------- | ------------------------------------ | -------- | -------- | -------- | \n| intervalPadding | Interval distance between histograms | `number` |          |          | \n| fill            | color fill                           | `string` |          |          | \n| opacity         | transparency                         | `number` |          |          | \n \n#### Bullet Theme \n \nFunction description: mini bullet chart style configuration \n \n| parameter           | illustrate                    | type                                       | Defaults | required | \n| ------------------- | ----------------------------- | ------------------------------------------ | -------- | -------- | \n| progressBar         | progress bar style            | [Progress Bar](#progressbar)               |          |          | \n| comparative measure | measurement markers           | [Comparative Measure](#comparativemeasure) |          |          | \n| rangeColors         | Bullet chart status color     | [RangeColors](#rangecolors)                |          |          | \n| backgroundColor     | Bullet chart background color | string                                     |          |          | \n \n#### Progress Bar \n \nFunction description: mini bullet chart progress bar style configuration \n \n| parameter    | illustrate                                                    | type     | Defaults | required | \n| ------------ | ------------------------------------------------------------- | -------- | -------- | -------- | \n| widthPercent | Ratio of bullet chart width relative to cell content, decimal | `number` |          |          | \n| height       | high                                                          | `number` |          |          | \n| innerHeight  | inner height                                                  | `number` |          |          | \n \n#### Comparative Measure \n \nFunction description: mini bullet chart measurement marker line style configuration \n \n| parameter | illustrate   | type     | Defaults | required | \n| --------- | ------------ | -------- | -------- | -------- | \n| width     | width        | `number` |          |          | \n| height    | high         | `number` |          |          | \n| fill      | color fill   | `string` |          |          | \n| opacity   | transparency | `number` |          |          | \n \n#### RangeColors \n \nFunction description: mini bullet chart state color style configuration \n \n| parameter    | illustrate                | type     | Defaults | required | \n| ------------ | ------------------------- | -------- | -------- | -------- | \n| good         | satisfy                   | `string` |          |          | \n| satisfactory | good                      | `string` |          |          | \n| bad          | did not meet expectations | `string` |          |          | \n \n#### Interval Theme \n \nFunction description: mini bar chart style (conditional formatting) \n \n| parameter | illustrate | type     | Defaults | required | \n| --------- | ---------- | -------- | -------- | -------- | \n| height    | bar height | `number` |          |          | \n| fill      | color fill | `string` |          |          | \n \n \n'},childrenKey:"demos",order:3},{demos:[{id:"custom-generate-palette",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/571bdIS6Q/CleanShot%2525202022-04-02%252520at%25252011.10.20.gif",source:"import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { getPalette, generatePalette } from '@antv/s2';\nimport { SheetComponent } from '@antv/s2-react';\nimport { ChromePicker } from 'react-color';\nimport { Button, Popover, Space } from 'antd';\n\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    function App() {\n      const [themeColor, setThemeColor] = useState('#EA1720');\n      const [themeCfg, setThemeCfg] = useState({\n        name: 'colorful',\n      });\n\n      const updatePalette = (newThemeColor) => {\n        // 使用内置的 colorful 色板作为参考色板\n        const palette = getPalette(themeCfg.name);\n        // 使用参考色板 & 主题色值生成新色板\n        const newPalette = generatePalette({\n          ...palette,\n          brandColor: newThemeColor,\n        });\n\n        // 使用新色板设置主题\n        setThemeCfg({\n          name: themeCfg.name,\n          palette: newPalette,\n        });\n      };\n\n      useEffect(() => {\n        updatePalette(themeColor);\n      }, []);\n\n      return (\n        <Space direction=\"vertical\">\n          <Space>\n            <span>当前主题色: {themeColor}</span>\n            <Popover\n              placement=\"bottomRight\"\n              content={\n                <ChromePicker\n                  disableAlpha\n                  color={themeColor}\n                  onChangeComplete={(color) => {\n                    setThemeColor(color.hex);\n                    updatePalette(color.hex);\n                  }}\n                />\n              }\n            >\n              <Button size=\"small\" style={{ marginLeft: 20 }}>\n                主题色调整\n              </Button>\n            </Popover>\n          </Space>\n          <SheetComponent\n            dataCfg={dataCfg}\n            options={s2Options}\n            themeCfg={themeCfg}\n          />\n        </Space>\n      );\n    }\n\n    ReactDOM.render(<App />, document.getElementById('container'));\n  });\n",title:{zh:"主题色自动生成色板",en:"Generate palette"},filename:"custom-generate-palette.tsx",isNew:!1},{id:"custom-palette",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/YxskohI92J/c17971dd-6dd9-4a62-85f8-c69dff908aec.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    const s2Palette = {\n      basicColors: [\n        '#FFFFFF',\n        '#F8F5FE',\n        '#EDE1FD',\n        '#873BF4',\n        '#7232CF',\n        '#7232CF',\n        '#7232CF',\n        '#AB76F7',\n        '#FFFFFF',\n        '#DDC7FC',\n        '#9858F5',\n        '#B98EF8',\n        '#873BF4',\n        '#282B33',\n        '#121826',\n      ],\n\n      // ---------- semantic colors ----------\n      semanticColors: {\n        red: '#FF4D4F',\n        green: '#29A294',\n      },\n    };\n\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.setThemeCfg({ palette: s2Palette });\n    s2.render();\n  });\n",title:{zh:"自定义色板",en:"Custom palette"},filename:"custom-palette.ts",isNew:!1},{id:"custom-manual-palette",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/o2XSQLjiC/CleanShot%2525202022-04-02%252520at%25252015.35.37.gif",source:"import React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport { getPalette } from '@antv/s2';\nimport { SketchPicker } from 'react-color';\nimport { Row, Space, Input, Button, message, Popover, Table } from 'antd';\nimport copy from 'copy-to-clipboard';\n\nimport 'antd/es/table/style/index.css';\nimport 'antd/es/space/style/index.css';\nimport '@antv/s2-react/dist/style.min.css';\n\nconst s2Options = {\n  width: 500,\n  height: 300,\n  conditions: {\n    interval: [\n      {\n        field: 'number',\n        mapping: () => ({}),\n      },\n    ],\n  },\n  interaction: {\n    linkFields: ['city'],\n  },\n};\n\nconst STORE_KEY = 'S2_TEST_PALETTE';\n\n/** 色板颜色说明 */\nconst paletteDesc = [\n  '角头字体、列头字体',\n  '行头背景、数据格背景(斑马纹)',\n  '行头&数据格交互(hover、选中、十字)',\n  '角头背景、列头背景',\n  '列头交互(hover、选中)',\n  '刷选遮罩',\n  '行头 link',\n  'mini bar、resize 交互(参考线等)',\n  '数据格背景(非斑马纹)、整体表底色(建议白色)',\n  '行头边框、数据格边框',\n  '角头边框、列头边框',\n  '竖向大分割线',\n  '横向大分割线',\n  '数据格字体',\n  '行头字体、数据格交互色(hover)',\n];\n\nfunction getInitPalette() {\n  try {\n    return JSON.parse(localStorage.getItem(STORE_KEY) || '');\n  } catch (err) {}\n  return getPalette('colorful');\n}\n\nconst savePalette = _.debounce(function (palette) {\n  localStorage.setItem(STORE_KEY, JSON.stringify(palette));\n  console.log('saved');\n}, 1000);\n\nfunction useDataCfg() {\n  const [dataCfg, setDataCfg] = useState(null);\n\n  useEffect(() => {\n    fetch(\n      'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n    )\n      .then((res) => res.json())\n      .then((res) => setDataCfg(res));\n  }, []);\n\n  return dataCfg;\n}\n\nfunction ColorTable({ palette, onChange }) {\n  const columns = [\n    {\n      title: '#',\n      render(r, v, idx) {\n        return idx + 1;\n      },\n    },\n    {\n      title: '色值',\n      dataIndex: 'color',\n    },\n    {\n      title: '点击调整',\n      dataIndex: 'color',\n      render(val, _, idx) {\n        return (\n          <Popover\n            trigger=\"click\"\n            content={\n              <SketchPicker\n                disableAlpha\n                presetColors={[]}\n                color={val}\n                onChangeComplete={(evt) => {\n                  const nextBasicColors = [...palette.basicColors];\n                  nextBasicColors.splice(idx, 1, evt.hex);\n                  onChange({\n                    ...palette,\n                    basicColors: nextBasicColors,\n                  });\n                }}\n              />\n            }\n          >\n            <Row justify=\"center\">\n              <div\n                style={{\n                  width: 30,\n                  height: 30,\n                  boxShadow: `0 0 8px rgba(0, 0, 0, 0.2)`,\n                  cursor: 'pointer',\n                  backgroundColor: val,\n                }}\n              />\n            </Row>\n          </Popover>\n        );\n      },\n    },\n    {\n      title: '说明',\n      dataIndex: 'desc',\n    },\n  ];\n\n  const dataSource = palette.basicColors.map((color, idx) => ({\n    color,\n    desc: paletteDesc[idx],\n  }));\n\n  return (\n    <Table\n      size=\"small\"\n      rowKey=\"desc\"\n      bordered\n      columns={columns}\n      pagination={false}\n      dataSource={dataSource}\n    />\n  );\n}\n\nfunction App() {\n  const dataCfg = useDataCfg();\n  const [palette, setPalette] = useState(getInitPalette());\n  const [config, setConfig] = useState('');\n\n  useEffect(() => {\n    savePalette(palette);\n  }, [palette]);\n\n  if (!dataCfg) {\n    return null;\n  }\n\n  return (\n    <Space direction=\"vertical\">\n      <SheetComponent\n        dataCfg={dataCfg}\n        options={s2Options}\n        themeCfg={{ palette }}\n      />\n      <Space>\n        <Button\n          size=\"small\"\n          type=\"primary\"\n          onClick={() => {\n            copy(JSON.stringify(palette));\n            message.success('复制成功');\n          }}\n        >\n          复制当前色板配置\n        </Button>\n        <Button\n          size=\"small\"\n          danger\n          onClick={() => {\n            setPalette(getPalette('colorful'));\n          }}\n        >\n          重置为默认色板配置\n        </Button>\n      </Space>\n      <Space>\n        <Input\n          size=\"small\"\n          placeholder=\"粘贴色板 JSON 配置\"\n          onChange={(evt) => setConfig(evt.target.value)}\n          style={{\n            width: 180,\n          }}\n          value={config}\n        />\n        <Button\n          size=\"small\"\n          disabled={!config}\n          onClick={() => {\n            try {\n              const cfgObj = JSON.parse(config);\n              if (!_.isObjectLike(cfgObj)) {\n                message.error('加载错误');\n                return;\n              }\n              setPalette(cfgObj);\n              setConfig('');\n              message.success('加载成功');\n            } catch (err) {\n              message.error('加载错误');\n            }\n          }}\n        >\n          设置色板配置\n        </Button>\n      </Space>\n      <ColorTable palette={palette} onChange={setPalette} />\n    </Space>\n  );\n}\n\nReactDOM.render(<App />, document.getElementById('container'));\n",title:{zh:"自助色板调色",en:"Manual palette"},filename:"custom-manual-palette.tsx",isNew:!1},{id:"custom-schema",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/xEL8hrZJUo/c1a79590-aeaf-484c-98c9-99980ab627ef.png",source:"import { TableSheet } from '@antv/s2';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        columns: ['province', 'city', 'type', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    const BORDER_COLOR = 'rgb(39, 44, 65)';\n    const BACK_COLOR = 'rgb(67, 72, 91)';\n    const HEADER_BACK_COLOR = '#353c59';\n    const CELL_ACTIVE_BACK_COLOR = '#434c6c';\n\n    const customTheme = {\n      background: {\n        color: HEADER_BACK_COLOR,\n      },\n      cornerCell: {\n        cell: {\n          horizontalBorderColor: BORDER_COLOR,\n          verticalBorderColor: BORDER_COLOR,\n          padding: {\n            top: 12,\n            right: 8,\n            bottom: 12,\n            left: 8,\n          },\n          backgroundColor: HEADER_BACK_COLOR,\n        },\n        text: {\n          fill: '#fff',\n        },\n        bolderText: {\n          fill: '#fff',\n          opacity: 0.4,\n        },\n      },\n      splitLine: {\n        horizontalBorderColor: BORDER_COLOR,\n        horizontalBorderColorOpacity: 1,\n        horizontalBorderWidth: 2,\n        verticalBorderColor: BORDER_COLOR,\n        verticalBorderColorOpacity: 1,\n        verticalBorderWidth: 2,\n        showRightShadow: true,\n        shadowWidth: 10,\n        shadowColors: {\n          left: 'rgba(0,0,0,0.1)',\n          right: 'rgba(0,0,0,0)',\n        },\n      },\n      colCell: {\n        cell: {\n          horizontalBorderColor: BORDER_COLOR,\n          verticalBorderColor: BORDER_COLOR,\n          verticalBorderWidth: 2,\n          horizontalBorderWidth: 2,\n          padding: {\n            top: 12,\n            right: 8,\n            bottom: 12,\n            left: 8,\n          },\n          backgroundColor: HEADER_BACK_COLOR,\n          interactionState: {\n            hover: {\n              backgroundColor: CELL_ACTIVE_BACK_COLOR,\n              backgroundOpacity: 1,\n            },\n            selected: {\n              backgroundColor: 'rgb(63, 69, 97)',\n            },\n          },\n        },\n        text: {\n          fill: '#fff',\n        },\n        bolderText: {\n          fill: '#fff',\n          opacity: 0.4,\n        },\n      },\n      dataCell: {\n        icon: {\n          size: 14,\n          margin: {\n            left: 10,\n          },\n        },\n        cell: {\n          interactionState: {\n            hover: {\n              backgroundColor: CELL_ACTIVE_BACK_COLOR,\n              backgroundOpacity: 1,\n            },\n            hoverFocus: {\n              backgroundColor: CELL_ACTIVE_BACK_COLOR,\n              backgroundOpacity: 1,\n              borderColor: 'blue',\n            },\n            selected: {\n              backgroundColor: CELL_ACTIVE_BACK_COLOR,\n              backgroundOpacity: 1,\n            },\n            unselected: {\n              backgroundOpacity: 1,\n              opacity: 1,\n            },\n            prepareSelect: {\n              borderColor: CELL_ACTIVE_BACK_COLOR,\n            },\n          },\n          horizontalBorderColor: BORDER_COLOR,\n          verticalBorderColor: BORDER_COLOR,\n          verticalBorderWidth: 2,\n          horizontalBorderWidth: 2,\n          padding: {\n            top: 0,\n            right: 8,\n            bottom: 2,\n            left: 0,\n          },\n          backgroundColorOpacity: 0.9,\n          backgroundColor: BACK_COLOR,\n          crossBackgroundColor: BACK_COLOR,\n        },\n        text: {\n          fill: '#fff',\n        },\n      },\n    };\n\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n\n    s2.setTheme(customTheme);\n\n    s2.render();\n  });\n",title:{zh:"自定义 schema",en:"Custom schema"},filename:"custom-schema.ts",isNew:!1},{id:"custom-transparent-background",screenshot:"https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*4adQSLv95OkAAAAAAAAAAAAAARQnAQ",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    const cellTheme = {\n      cell: {\n        backgroundColorOpacity: 0,\n        verticalBorderColorOpacity: 0,\n        horizontalBorderColorOpacity: 0,\n      },\n    };\n\n    // https://s2.antv.antgroup.com/zh/docs/api/general/S2Theme#s2theme\n    const s2Theme = {\n      background: {\n        opacity: 0,\n      },\n      rowCell: cellTheme,\n      colCell: cellTheme,\n      dataCell: cellTheme,\n      cornerCell: cellTheme,\n    };\n\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.setTheme(s2Theme);\n    s2.render();\n  });\n",title:{zh:"透明背景",en:"Transparent background"},filename:"custom-transparent-background.ts",isNew:!1}],icon:"",id:"custom",title:{en:"Custom Theme",zh:"自定义主题"},api:{zh:" \n \n主题配置 \n \n```ts \n// 统一设置主题 Schema, 色板，名称 \ns2.setThemeCfg({ \n  theme: {}, \n  palette: {}, \n  name: \"default\" \n}); \n \n// 单独设置主题 Schema, 配置单元格背景，文字大小，文字颜色 \ns2.setTheme({ \n  rowCell: { \n    cell: { \n      backgroundColor: \"#fff\" \n    } \n  } \n}); \n``` \n \n## ThemeCfg \n \n<description> **optional** _object_ </description> \n \n功能描述： 表主题配置项 \n \n| 参数    | 参数        | 类型                              | 默认值    | 必选 | \n| ------- | ----------- | --------------------------------- | --------- | ---- | \n| theme   | 主题 schema | [S2Theme](#s2theme)               | -         |      | \n| palette | 色板        | [Palette](#palette)               | -         |      | \n| name    | 主题名      | `default` \\| `colorful` \\| `gray` | `default` |      | \n \n### Palette \n \n<description> **optional** _object_ </description> \n \n功能描述： 表主题色板 \n \n| 参数                | 参数                                                | 类型                                                             | 默认值 | 必选 | \n| ------------------- | --------------------------------------------------- | ---------------------------------------------------------------- | ------ | ---- | \n| brandColor          | 色板主题色                                          | `string`                                                         | -      | ✓    | \n| basicColors         | 基础颜色                                            | `string[]`                                                       | -      | ✓    | \n| basicColorRelations | basicColors 与标准色板数组下标的对应关系            | `Array<{ basicColorIndex: number; standardColorIndex: number;}>` | -      | ✓    | \n| semanticColors      | 用于表示实际业务语义的颜色。例如内置颜色 “红跌绿涨” | `[key: string]`                                                  | -      | ✓    | \n| others              | 用于表示实际业务语义的颜色。例如内置颜色 “红跌绿涨” | `[key: string]`                                                  | -      |      | \n \n### S2Theme \n \n<description> **optional** _object_ </description> \n \n功能描述： 表主题 `Schema` \n \n| 参数              | 参数                                   | 类型                                            | 默认值 | 必选 | \n| ----------------- | -------------------------------------- | ----------------------------------------------- | ------ | ---- | \n| cornerCell        | 角头单元格主题                         | [DefaultCellTheme](#defaultcelltheme)           |        |      | \n| rowCell           | 行头单元格主题                         | [DefaultCellTheme](#defaultcelltheme)           |        |      | \n| colCell           | 列头单元格主题                         | [DefaultCellTheme](#defaultcelltheme)           |        |      | \n| dataCell          | 数值单元格主题                         | [DefaultCellTheme](#defaultcelltheme)           |        |      | \n| resizeArea        | 列宽行高调整热区                       | [ResizeArea](#resizearea)                       |        |      | \n| scrollBar         | 滚动条样式                             | [ScrollBarTheme](#scrollbartheme)               |        |      | \n| splitLine         | 单元格分割线样式                       | [SplitLine](#splitline)                         |        |      | \n| prepareSelectMask | 刷选遮罩样式                           | [InteractionStateTheme](#interactionstatetheme) |        |      | \n| background        | 背景样式                               | [Background](#background)                       |        |      | \n| [key: string]     | 额外属性字段，用于用户自定义主题时传参 | `unknown`                                       |        |      | \n \n#### DefaultCellTheme \n \n<description> **optional** _object_ </description> \n \n功能描述： 默认单元格主题 \n \n| 参数              | 说明           | 类型                              | 默认值 | 必选 | \n| ----------------- | -------------- | --------------------------------- | ------ | ---- | \n| bolderText        | 加粗文本样式   | [TextTheme](#texttheme)           | -      |      | \n| text              | 文本样式       | [TextTheme](#texttheme)           | -      |      | \n| seriesText        | 序号文本样式   | [TextTheme](#texttheme)           | -      |      | \n| measureText       | 度量值文本样式 | [TextTheme](#texttheme)           | -      |      | \n| cell              | 单元格样式     | [CellTheme](#celltheme)           | -      |      | \n| icon              | 图标样式       | [IconTheme](#icontheme)           | -      |      | \n| seriesNumberWidth | 序号列宽       | `number`                          | 80     |      | \n| miniChart         | mini 图        | [MiniChartTheme](#minicharttheme) |        |      | \n \n#### ResizeArea \n \n<description> **optional** _object_ </description> \n \n功能描述： 列宽行高拖拽热区样式 \n \n| 参数              | 说明                                                                                                         | 类型                                  | 默认值   | 必选 | \n| ----------------- | ------------------------------------------------------------------------------------------------------------ | ------------------------------------- | -------- | ---- | \n| size              | 热区大小                                                                                                     | `number`                              | 3        |      | \n| background        | 热区背景色                                                                                                   | `string`                              | -        |      | \n| backgroundOpacity | 热区背景色透明度                                                                                             | `number`                              | -        |      | \n| guideLineColor    | 参考线颜色                                                                                                   | `string`                              | -        |      | \n| guideLineDash     | 热区参考线 [虚线模式](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/setLineDash) | `number[]`                            | `[3, 3]` |      | \n| interactionState  | 热区交互态样式                                                                                               | [InteractionState](#interactionstate) | -        |      | \n \n#### ScrollBarTheme \n \n<description> **optional** _object_ </description> \n \n功能描述： 滚动条样式 \n \n| 参数            | 说明                       | 类型                          | 默认值               | 必选 | \n| --------------- | -------------------------- | ----------------------------- | -------------------- | ---- | \n| trackColor      | 滚动条轨道颜色             | `string`                      | `rgba(0,0,0,0)`      |      | \n| thumbHoverColor | 滚动条 Hover 态颜色        | `string`                      | `rgba(0,0,0,0.4)`    |      | \n| thumbColor      | 滚动条颜色                 | `string`                      | `rgba(0,0,0,0.15)`   |      | \n| thumbHorizontalMinSize      | 滚动条水平最小尺寸 （在大数量情况下，滚动条会很小，可配置水平滚动条最小尺寸）                | `string`                      | `32`   |      | \n| thumbVerticalMinSize      | 滚动条垂直最小尺寸 （在大数量情况下，滚动条会很小，可配置垂直滚动条最小尺寸）                 | `string`                      | `32`   |      | \n| size            | 滚动条尺寸                 | `number`                      | Mobile: `3` <br> PC: `6` |      | \n| hoverSize       | 滚动条 Hover 时的尺寸        | `number`                      | `16`                   |      | \n| lineCap         | 指定如何绘制每一条线段末端 | `butt` \\| `round` \\| `square` | `round`              |      | \n \n#### SplitLine \n \n<description> **optional** _object_ </description> \n \n功能描述： 分割线样式 \n \n| 参数                         | 说明                                                      | 类型                                   | 默认值                                                   | 必选 | \n| ---------------------------- | --------------------------------------------------------- | -------------------------------------- | -------------------------------------------------------- | ---- | \n| horizontalBorderColor        | 水平分割线颜色                                            | `string`                               | -                                                        |      | \n| horizontalBorderColorOpacity | 水平分割线颜色透明度                                      | `number`                               | 0.2                                                      |      | \n| horizontalBorderWidth        | 水平分割线宽度                                            | `number`                               | 2                                                        |      | \n| verticalBorderColor          | 垂直分割线颜色                                            | `string`                               | -                                                        |      | \n| verticalBorderColorOpacity   | 垂直分割线颜色透明度                                      | `number`                               | 0.25                                                     |      | \n| verticalBorderWidth          | 垂直分割线宽度                                            | `number`                               | 2                                                        |      | \n| showShadow                   | 分割线是否显示外阴影（行列冻结情况下）                    | `boolean`                              | `true`                                                   |      | \n| shadowWidth                  | 阴影宽度                                                  | `number`                               | 10                                                       |      | \n| shadowColors                 | `left` : 线性变化左侧颜色 <br> `right` : 线性变化右侧颜色 | `{left: string,` <br> `right: string}` | `{left: 'rgba(0,0,0,0.1)',`<br>`right: 'rgba(0,0,0,0)'}` |      | \n| borderDash                 | 分割线虚线 | `number[]` | `[]` |      | \n \n#### TextTheme \n \n<description> **optional** _object_ </description> \n \n功能描述： 文本主题 \n \n| 参数         | 说明                                                                           | 类型                          | 默认值                                                                                            | 必选 | \n| ------------ | ------------------------------------------------------------------------------ | ----------------------------- | ------------------------------------------------------------------------------------------------- | ---- | \n| textAlign    | 文本内容的对齐方式                                                             | `left` \\| `center` \\| `right` | -                                                                                                 |      | \n| textBaseline | 绘制文本时的基线                                                               | `top` \\| `middle` \\| `bottom` | -                                                                                                 |      | \n| fontFamily   | 字体                                                                           | `string`                      | `Roboto, PingFangSC,` <br> `BlinkMacSystemFont,` <br> `Microsoft YaHei,` <br> `Arial, sans-serif` |      | \n| fontSize     | 字体大小                                                                       | `number`                      | -                                                                                                 |      | \n| fontWeight   | number <br> string: `normal` <br> `bold` <br> `bolder` <br> `lighter` 字体粗细 | `number` \\| `string`          | 粗体文本：Mobile：`520` PC: `bold` <br> 普通文本：`normal`                                        |      | \n| fontStyle   | 字体样式    | `normal \\| italic \\| oblique`        |  `normal` | \n| fontVariant | 字体变体  | `normal \\| small-caps \\| string`    |  `normal`  | \n| fill         | 字体颜色                                                                       | `string`                      | -                                                                                                 |      | \n| linkTextFill | 链接文本颜色                                                                   | `string`                      | -                                                                                                 |      | \n| opacity      | 字体透明度                                                                     | `number`                      | 1                                                                                                 |      | \n \n#### CellTheme \n \n<description> **optional** _object_ </description> \n \n功能描述： 单元格通用主题 \n \n| 参数                         | 说明                                    | 类型                                            | 默认值 | 必选 | \n| ---------------------------- | --------------------------------------- | ----------------------------------------------- | ------ | ---- | \n| crossBackgroundColor         | 奇数行单元格背景色                      | `string`                                        | -      |      | \n| backgroundColor              | 单元格背景色 （默认斑马纹效果，如果想禁用，可将 `crossBackgroundColor` 和 `backgroundColor` 设置为同一颜色）                           | `string`                                        | -      |      | \n| backgroundColorOpacity       | 单元格背景色透明度                      | `number`                                        | 1      |      | \n| horizontalBorderColor        | 单元格水平边线颜色                      | `string`                                        | -      |      | \n| horizontalBorderColorOpacity | 单元格水平边线颜色透明度                | `number`                                        | 1      |      | \n| horizontalBorderWidth        | 单元格水平边线宽度                      | `number`                                        | -      |      | \n| verticalBorderColor          | 单元格垂直边线颜色                      | `string`                                        | -      |      | \n| verticalBorderColorOpacity   | 单元格垂直边线颜色透明度                | `number`                                        | 1      |      | \n| verticalBorderWidth          | 单元格垂直边线宽度                      | `number`                                        | -      |      | \n| padding                      | 单元格内边距                            | [Padding](#margin--padding)                     | -      |      | \n| interactionState             | 单元格交互态  ([查看默认配置](https://github.com/antvis/S2/blob/master/packages/s2-core/src/theme/index.ts#L66-L107)) ([示例](/zh/examples/interaction/basic#state-theme))                       |  Record<[InteractionStateName](#interactionstatename), [InteractionStateTheme](#interactionstatetheme)> | -      |      | \n| miniBarChartHeight           | 单元格内条件格式-迷你条形图高度         | `number`                                        | 12     |      | \n| miniBarChartFillColor        | 单元格内条件格式-迷你条形图默认填充颜色 | `string`                                        | -      |      | \n| borderDash        | 单元格边线虚线 | `number[]`                                        | `[]`      |      | \n \n#### IconTheme \n \n<description> **optional** _object_ </description> \n \n功能描述：icon 通用主题 \n \n| 参数          | 说明             | 类型                       | 默认值    | 必选 | \n| ------------- | ---------------- | -------------------------- | --------- | ---- | \n| fill          | icon 填充色      | `string`                   | -         |      | \n| downIconColor | 下跌 icon 填充色 | `string`                   | `#FF4D4F` |      | \n| upIconColor   | 上涨 icon 填充色 | `string`                   | `#29A294` |      | \n| size          | icon 大小        | `number`                   | -         |      | \n| margin        | 单元格外边距     | [Margin](#margin--padding) | -         |      | \n \n#### InteractionStateName \n \n> 示例 \n \n```ts \ns2.setTheme({ \n  dataCell: { \n    cell: { \n      interactionState: { \n        hoverFocus: {}, \n        selected: {}, \n        prepareSelect: {} \n      } \n    } \n  } \n}) \n``` \n \n| 状态名              | 说明       | 类型     | 默认值 | 必选 | \n| ----------------- | ---------- | -------- | ------ | ---- | \n| hover   | 悬停 | [InteractionStateTheme](#interactionstatetheme) |        |      | \n| hoverFocus | 悬停聚焦 | [InteractionStateTheme](#interactionstatetheme) |        |      | \n| selected       | 选中 | [InteractionStateTheme](#interactionstatetheme)|        |      | \n| unselected       | 未选中   | [InteractionStateTheme](#interactionstatetheme) |        |      | \n| searchResult     | 搜索结果 | [InteractionStateTheme](#interactionstatetheme) |        |      | \n| highlight       | 高亮 | [InteractionStateTheme](#interactionstatetheme) |        |      | \n| prepareSelect           | 预选中 | [InteractionStateTheme](#interactionstatetheme) |        |      | \n \n#### InteractionStateTheme \n \n<description> **optional** _object_ </description> \n \n功能描述：交互通用主题 \n \n```ts \ntype InteractionState = { \n  [K in InteractionStateName]?: InteractionStateTheme; \n}; \n``` \n \n| 参数              | 说明       | 类型     | 默认值 | 必选 | \n| ----------------- | ---------- | -------- | ------ | ---- | \n| backgroundColor   | 背景填充色 | `string` |        |      | \n| backgroundOpacity | 背景透明度 | `number` |        |      | \n| borderColor       | 边线填充色 | `string` |        |      | \n| borderWidth       | 边线宽度   | `number` |        |      | \n| borderOpacity     | 边线透明度 | `number` |        |      | \n| textOpacity       | 文本透明度 | `number` |        |      | \n| opacity           | 整体透明度 | `number` |        |      | \n \n#### Margin ｜ Padding \n \n<description> **optional** _object_ </description> \n \n功能描述：icon 外边距，单元格内边距 \n \n| 参数   | 说明 | 类型     | 默认值 | 必选 | \n| ------ | ---- | -------- | ------ | ---- | \n| top    | 上   | `number` |        |      | \n| right  | 右   | `number` |        |      | \n| bottom | 下   | `number` |        |      | \n| left   | 左   | `number` |        |      | \n \n#### Background \n \n<description> **optional** _object_ </description> \n \n功能描述：背景配置 \n \n| 参数    | 说明   | 类型     | 默认值 | 必选 | \n| ------- | ------ | -------- | ------ | ---- | \n| color   | 颜色   | `string` | -      |      | \n| opacity | 透明度 | `number` | 1      |      | \n \n#### MiniChartTheme \n \n功能描述：迷你图配置 \n \n| 参数     | 说明           | 类型                            | 默认值 | 必选 | \n| -------- | -------------- | ------------------------------- | ------ | ---- | \n| line     | 折线图样式配置 | [LineTheme](#linetheme)         |        |      | \n| bar      | 柱状图样式配置 | [BarTheme](#bartheme)           |        |      | \n| bullet   | 颜色           | [BulletTheme](#bullettheme)     |        |      | \n| interval | 透明度         | [IntervalTheme](#intervaltheme) |        |      | \n \n#### LineTheme \n \n功能描述：mini 折线图样式配置 \n \n| 参数     | 说明           | 类型                                              | 默认值 | 必选 | \n| -------- | -------------- | ------------------------------------------------- | ------ | ---- | \n| point    | 折线图的点配置 | `{size: number; fill?: number; opacity?: number}` |        |      | \n| linkLine | 折线图的线配置 | `{size: number; fill: number; opacity: number}`   |        |      | \n \n#### BarTheme \n \n功能描述：mini 柱状图样式配置 \n \n| 参数            | 说明                 | 类型     | 默认值 | 必选 | \n| --------------- | -------------------- | -------- | ------ | ---- | \n| intervalPadding | 柱状图之间的间隔距离 | `number` |        |      | \n| fill            | 颜色填充             | `string` |        |      | \n| opacity         | 透明度               | `number` |        |      | \n \n#### BulletTheme \n \n功能描述：mini 子弹图样式配置 \n \n| 参数               | 说明           | 类型                                      | 默认值 | 必选 | \n| ------------------ | -------------- | ----------------------------------------- | ------ | ---- | \n| progressBar        | 进度条样式     | [ProgressBar](#progressbar)               |        |      | \n| comparativeMeasure | 测量标记线     | [ComparativeMeasure](#comparativemeasure) |        |      | \n| rangeColors        | 子弹图状态颜色 | [RangeColors](#rangecolors)               |        |      | \n| backgroundColor    | 子弹图背景颜色 | string                                    |        |      | \n \n#### ProgressBar \n \n功能描述：mini 子弹图进度条样式配置 \n \n| 参数               | 说明           | 类型                                      | 默认值 | 必选 | \n| ------------------ | -------------- | ----------------------------------------- | ------ | ---- | \n| widthPercent        | 子弹图宽度相对单元格 content 占比，小数     | `number` |        |      | \n| height | 高度     | `number`|        |      | \n| innerHeight        | 内高度 | `number`  |        |      | \n \n#### ComparativeMeasure \n \n功能描述：mini 子弹图测量标记线样式配置 \n \n| 参数               | 说明           | 类型                                      | 默认值 | 必选 | \n| ------------------ | -------------- | ----------------------------------------- | ------ | ---- | \n| width        | 宽度    | `number` |        |      | \n| height | 高度     | `number`|        |      | \n| fill            | 颜色填充             | `string` |        |      | \n| opacity         | 透明度               | `number` |        |      | \n \n#### RangeColors \n \n功能描述：mini 子弹图状态颜色样式配置 \n \n| 参数               | 说明           | 类型                                      | 默认值 | 必选 | \n| ------------------ | -------------- | ----------------------------------------- | ------ | ---- | \n| good        | 满意    | `string` |        |      | \n| satisfactory | 良好     | `string`|        |      | \n| bad            | 不符合预期             | `string` |        |      | \n \n#### IntervalTheme \n \n功能描述：mini 条形图样式（条件格式） \n \n| 参数   | 说明       | 类型     | 默认值 | 必选 | \n| ------ | ---------- | -------- | ------ | ---- | \n| height | 条形图高度 | `number` |        |      | \n| fill   | 颜色填充   | `string` |        |      | \n \n \n",en:' \n \ntheme configuration \n \n```ts \n// 统一设置主题 Schema, 色板，名称 \ns2.setThemeCfg({ \n  theme: {}, \n  palette: {}, \n  name: "default" \n}); \n \n// 单独设置主题 Schema, 配置单元格背景，文字大小，文字颜色 \ns2.setTheme({ \n  rowCell: { \n    cell: { \n      backgroundColor: "#fff" \n    } \n  } \n}); \n``` \n \n## ThemeCfg \n \n**optional** *object* \n \nFunction description: Table theme configuration items \n \n| parameter | parameter    | type                              | Defaults  | required | \n| :-------- | :----------- | :-------------------------------- | :-------- | :------: | \n| theme     | theme schema | [S2Theme](#s2theme)               | -         |          | \n| palette   | swatches     | [Palette](#palette)               | -         |          | \n| name      | subject name | `default` \\| `colorful` \\| `gray` | `default` |          | \n \n### Palette \n \n**optional** *object* \n \nFunction description: Table theme swatches \n \n| parameter           | parameter                                                                                                     | type                                                             | Defaults | required | \n| :------------------ | :------------------------------------------------------------------------------------------------------------ | :--------------------------------------------------------------- | :------- | :------: | \n| brandColor          | Swatch theme color                                                                                            | `string`                                                         | -        | ✓        | \n| basicColors         | base color                                                                                                    | `string[]`                                                       | -        | ✓        | \n| basicColorRelations | The correspondence between basicColors and the subscripts of the standard color palette array                 | `Array<{ basicColorIndex: number; standardColorIndex: number;}>` | -        | ✓        | \n| semanticColors      | Colors used to represent the actual business semantics. For example, the built-in color "red fall green rise" | `[key: string]`                                                  | -        | ✓        | \n| others              | Colors used to represent the actual business semantics. For example, the built-in color "red fall green rise" | `[key: string]`                                                  | -        |          | \n \n### S2Theme \n \n**optional** *object* \n \nFunction description: Table theme `Schema` \n \n| parameter         | parameter                                                                               | type                                            | Defaults | required | \n| :---------------- | :----------------------------------------------------------------------------------- | :---------------------------------------------- | :------- | :------: | \n| cornerCell        | Corner header cell theme                                                                | [DefaultCellTheme](#defaultcelltheme)           |          |          | \n| rowCell           | Row header cell theme                                                                   | [DefaultCellTheme](#defaultcelltheme)           |          |          | \n| colCell           | Column header cell theme                                                                | [DefaultCellTheme](#defaultcelltheme)           |          |          | \n| dataCell          | Numeric Cell Theme                                                                      | [DefaultCellTheme](#defaultcelltheme)           |          |          | \n| resizeArea        | Column Width Row Height Adjustment Hotspot                                              | [ResizeArea](#resizearea)                       |          |          | \n| scrollBar         | scroll bar style                                                                        | [ScrollBarTheme](#scrollbartheme)               |          |          | \n| splitLine         | Cell divider style                                                                      | [SplitLine](#splitline)                         |          |          | \n| prepareSelectMask | Brush mask style                                                                        | [InteractionStateTheme](#interactionstatetheme) |          |          | \n| background        | background style                                                                        | [background](#background)                       |          |          | \n| \\[key: string]    | Additional attribute fields, used for passing parameters when users customize the theme | `unknown`                                       |          |          | \n \n#### DefaultCellTheme \n \n**optional** *object* \n \nFunction description: Default cell theme \n \n| parameter         | illustrate                 | type                              | Defaults | required | \n| :---------------- | :------------------------- | :----------------------- | :------- | :------: | \n| bolderText        | bold text style            | [TextTheme](#texttheme)           | -        |          | \n| text              | text style                 | [TextTheme](#texttheme)           | -        |          | \n| seriesText        | Ordinal text style         | [TextTheme](#texttheme)           | -        |          | \n| measureText       | Metric Text Style          | [TextTheme](#texttheme)           | -        |          | \n| cell              | cell style                 | [Cell Theme](#celltheme)          | -        |          | \n| icon              | icon style                 | [IconTheme](#icontheme)           | -        |          | \n| seriesNumberWidth | Serial Number Column Width | `number`                          | 80       |          | \n| miniChart         | mini-figure                | [MiniChartTheme](#minicharttheme) |          |          | \n \n#### ResizeArea \n \n**optional** *object* \n \nFunction description: Column width row height drag hot zone style \n \n| parameter         | illustrate                                                                                                               | type                                  | Defaults | required | \n| :---------------- | :----------------------------------------------------------------------------------------------------------------------- | :------------------------------------ | :------- | :------: | \n| size              | Hot zone size                                                                                                            | `number`                              | 3        |          | \n| background        | Hot zone background color                                                                                                | `string`                              | -        |          | \n| backgroundOpacity | Hotspot background color transparency                                                                                    | `number`                              | -        |          | \n| guideLineColor    | Guide Color                                                                                                              | `string`                              | -        |          | \n| guideLineDash     | Hot Zone Guide [Dashed Line Mode](https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/setLineDash) | `number[]`                            | `[3, 3]` |          | \n| interactionState  | Hot zone interactive state style                                                                                         | [InteractionState](#interactionstate) | -        |          | \n \n#### ScrollBarTheme \n \n**optional** *object* \n \nFunction description: scroll bar style \n \n| parameter       | illustrate                                         | type                          | Defaults           | required | \n| :-------------- | :------------------------------------------------- | :---------------------------- | :----------------- | :------: | \n| trackColor      | Scrollbar track color                              | `string`                      | `rgba(0,0,0,0)`    |          | \n| thumbHoverColor | Scrollbar Hover state color                        | `string`                      | `rgba(0,0,0,0.4)`  |          | \n| thumbColor      | scrollbar color                                    | `string`                      | `rgba(0,0,0,0.15)` |          | \n| size            | scroll bar size                                    | `number`                      | Mobile: 3 PC: 6    |          | \n| hoverSize       | Scroll bar Hover state size                        | `number`                      | 16                 |          | \n| lineCap         | Specifies how to draw the end of each line segment | `butt` \\| `round` \\| `square` | `round`            |          | \n \n#### SplitLine \n \n**optional** *object* \n \nFunction description: Split line style \n \n| parameter                    | illustrate                                                                                        | type                              | Defaults                                              | required | \n| :--------------------------- | :------------------------------------------------------------------------------------------------ | :-------------------------------- | :---------------------------------------------------- | :------: | \n| horizontalBorderColor        | Horizontal divider color                                                                          | `string`                          | -                                                     |          | \n| horizontalBorderColorOpacity | Horizontal divider color transparency                                                             | `number`                          | 0.2                                                   |          | \n| horizontalBorderWidth        | Horizontal split line width                                                                       | `number`                          | 2                                                     |          | \n| verticalBorderColor          | vertical line color                                                                               | `string`                          | -                                                     |          | \n| verticalBorderColorOpacity   | Vertical split line color transparency                                                            | `number`                          | 0.25                                                  |          | \n| verticalBorderWidth          | Vertical dividing line width                                                                      | `number`                          | 2                                                     |          | \n| showShadow                   | Whether to display the outer shadow of the dividing line (in the case of frozen rows and columns) | `boolean`                         | `true`                                                |          | \n| shadowWidth                  | shadow width                                                                                      | `number`                          | 10                                                    |          | \n| shadowColors                 | `left` : change the left color linearly `right` : change the color of the right side linearly     | `{left: string,` `right: string}` | `{left: \'rgba(0,0,0,0.1)\',` `right: \'rgba(0,0,0,0)\'}` |          | \n| borderDash                 | Split line dash | `number[]` | `[]` |      | \n \n#### TextTheme \n \n**optional** *object* \n \nFunction Description: Text Theme \n \n| parameter    | illustrate                                                    | type                          | Defaults                                                                           | required | \n| :----------- | :------------------------------------------------------------ | :---------------------------- | :--------------------------------------------------------------------------------- | :------: | \n| textAlign    | Alignment of text content                                     | `left` \\| `center` \\| `right` | -                                                                                  |          | \n| textBaseline | Baseline when drawing text                                    | `top` \\| `middle` \\| `bottom` | -                                                                                  |          | \n| fontFamily   | font                                                          | `string`                      | `Roboto, PingFangSC,` `BlinkMacSystemFont,` `Microsoft YaHei,` `Arial, sans-serif` |          | \n| fontSize     | font size                                                     | `number`                      | -                                                                                  |          | \n| fontWeight   | number string: `normal` `bold` `bolder` `lighter` font weight | `number` \\| `string`          | Bold text: Mobile: `520` PC: `bold` Normal text: `normal`                          |          | \n| fill         | font color                                                    | `string`                      | -                                                                                  |          | \n| linkTextFill | link text color                                               | `string`                      | -                                                                                  |          | \n| opacity      | font transparency                                             | `number`                      | 1                                                                                  |          | \n \n#### Cell Theme \n \n**optional** *object* \n \nFunction description: Cell general theme \n \n| parameter                    | illustrate                                                              | type                                            | Defaults | required | \n| :--------------------------- | :---------------------------------------------------------------------- | :---------------------------------------------- | :------- | :------: | \n| crossBackgroundColor         | Cardinal row cell background color                                      | `string`                                        | -        |          | \n| backgroundColor              | cell background color                                                   | `string`                                        | -        |          | \n| backgroundColorOpacity       | Cell background color transparency                                      | `number`                                        | 1        |          | \n| horizontalBorderColor        | Cell horizontal border color                                            | `string`                                        | -        |          | \n| horizontalBorderColorOpacity | Cell horizontal border color transparency                               | `number`                                        | 1        |          | \n| horizontalBorderWidth        | Cell horizontal border width                                            | `number`                                        | -        |          | \n| verticalBorderColor          | Cell vertical border color                                              | `string`                                        | -        |          | \n| verticalBorderColorOpacity   | Cell vertical border color transparency                                 | `number`                                        | 1        |          | \n| verticalBorderWidth          | cell vertical border width                                              | `number`                                        | -        |          | \n| padding                      | cell padding                                                            | [Padding](#margin--padding)                     | -        |          | \n| interactionState             | cell interaction state                                                  | [InteractionStateTheme](#interactionstatetheme) | -        |          | \n| miniBarChartHeight           | In-Cell Conditional Formatting - Sparkline Bar Height                   | `number`                                        | 12       |          | \n| miniBarChartFillColor        | In-cell conditional formatting - default fill color for mini bar charts | `string`                                        | -        |          | \n| borderDash        | cell border dash | `number[]`                                        | `[]`      |      | \n \n#### IconTheme \n \n**optional** *object* \n \nFunction description: icon general theme \n \n| parameter     | illustrate             | type                       | Defaults  | required | \n| :------------ | :--------------------- | :------------------------- | :-------- | :------: | \n| fill          | icon fill color        | `string`                   | -         |          | \n| downIconColor | drop icon fill color   | `string`                   | `#FF4D4F` |          | \n| upIconColor   | Rising icon fill color | `string`                   | `#29A294` |          | \n| size          | icon size              | `number`                   | -         |          | \n| margin        | cell margin            | [Margin](#margin--padding) | -         |          | \n \n#### InteractionStateTheme \n \n**optional** *object* \n \nFunction description: interactive general theme \n \n| parameter         | illustrate              | type     | Defaults | required | \n| ----------------- | ----------------------- | -------- | -------- | -------- | \n| backgroundColor   | background fill color   | `string` |          |          | \n| backgroundOpacity | background transparency | `number` |          |          | \n| borderColor       | Edge fill color         | `string` |          |          | \n| borderWidth       | Edge Width              | `number` |          |          | \n| borderOpacity     | border transparency     | `number` |          |          | \n| textOpacity       | text transparency       | `number` |          |          | \n| opacity           | overall transparency    | `number` |          |          | \n \n#### Margin｜Padding \n \n**optional** *object* \n \nFunction description: icon outer margin, cell inner margin \n \n| parameter | illustrate | type     | Defaults | required | \n| :-------- | :--------- | :------- | :------- | :------: | \n| top       | superior   | `number` |          |          | \n| right     | right      | `number` |          |          | \n| bottom    | Down       | `number` |          |          | \n| left      | left       | `number` |          |          | \n \n#### background \n \n**optional** *object* \n \nFunction description: background configuration \n \n| parameter | illustrate   | type     | Defaults | required | \n| --------- | ------------ | -------- | -------- | -------- | \n| color     | color        | `string` | -        |          | \n| opacity   | transparency | `number` | 1        |          | \n \n#### MiniChartTheme \n \nFunction description: sparkline configuration \n \n| parameter | illustrate                     | type                             | Defaults | required | \n| --------- | ------------------------------ | -------------------------------- | -------- | -------- | \n| line      | Line chart style configuration | [Line Theme](#linetheme)         |          |          | \n| bar       | Histogram style configuration  | [Bar Theme](#bartheme)           |          |          | \n| bullet    | color                          | [Bullet Theme](#bullettheme)     |          |          | \n| interval  | transparency                   | [Interval Theme](#intervaltheme) |          |          | \n \n#### Line Theme \n \nFunction description: mini line chart style configuration \n \n| parameter | illustrate                          | type                                              | Defaults | required | \n| --------- | ----------------------------------- | ------------------------------------------------- | -------- | -------- | \n| point     | Point Configuration for Line Charts | `{size: number; fill?: number; opacity?: number}` |          |          | \n| linkLine  | Line Configuration for Line Charts  | `{size: number; fill: number; opacity: number}`   |          |          | \n \n#### Bar Theme \n \nFunction description: mini histogram style configuration \n \n| parameter       | illustrate                           | type     | Defaults | required | \n| --------------- | ------------------------------------ | -------- | -------- | -------- | \n| intervalPadding | Interval distance between histograms | `number` |          |          | \n| fill            | color fill                           | `string` |          |          | \n| opacity         | transparency                         | `number` |          |          | \n \n#### Bullet Theme \n \nFunction description: mini bullet chart style configuration \n \n| parameter           | illustrate                    | type                                       | Defaults | required | \n| ------------------- | ----------------------------- | ------------------------------------------ | -------- | -------- | \n| progressBar         | progress bar style            | [Progress Bar](#progressbar)               |          |          | \n| comparative measure | measurement markers           | [Comparative Measure](#comparativemeasure) |          |          | \n| rangeColors         | Bullet chart status color     | [RangeColors](#rangecolors)                |          |          | \n| backgroundColor     | Bullet chart background color | string                                     |          |          | \n \n#### Progress Bar \n \nFunction description: mini bullet chart progress bar style configuration \n \n| parameter    | illustrate                                                    | type     | Defaults | required | \n| ------------ | ------------------------------------------------------------- | -------- | -------- | -------- | \n| widthPercent | Ratio of bullet chart width relative to cell content, decimal | `number` |          |          | \n| height       | high                                                          | `number` |          |          | \n| innerHeight  | inner height                                                  | `number` |          |          | \n \n#### Comparative Measure \n \nFunction description: mini bullet chart measurement marker line style configuration \n \n| parameter | illustrate   | type     | Defaults | required | \n| --------- | ------------ | -------- | -------- | -------- | \n| width     | width        | `number` |          |          | \n| height    | high         | `number` |          |          | \n| fill      | color fill   | `string` |          |          | \n| opacity   | transparency | `number` |          |          | \n \n#### RangeColors \n \nFunction description: mini bullet chart state color style configuration \n \n| parameter    | illustrate                | type     | Defaults | required | \n| ------------ | ------------------------- | -------- | -------- | -------- | \n| good         | satisfy                   | `string` |          |          | \n| satisfactory | good                      | `string` |          |          | \n| bad          | did not meet expectations | `string` |          |          | \n \n#### Interval Theme \n \nFunction description: mini bar chart style (conditional formatting) \n \n| parameter | illustrate | type     | Defaults | required | \n| --------- | ---------- | -------- | -------- | -------- | \n| height    | bar height | `number` |          |          | \n| fill      | color fill | `string` |          |          | \n \n \n'},childrenKey:"demos",order:4}],childrenKey:"examples"},{id:"interaction",title:{zh:"表格交互",en:"Interaction"},icon:"block",examples:[{demos:[{id:"hover",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/l23NpRrPmF/hover.gif",source:"import { PivotSheet, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        // 悬停高亮\n        hoverHighlight: true,\n        // 等同于\n        // hoverHighlight: {\n        //   rowHeader = true, // 高亮悬停格子所在行头\n        //   colHeader = true, // 高亮悬停格子所在列头\n        //   currentRow = true, // 高亮悬停格子所在行\n        //   currentCol = true, // 高亮悬停格子所在列\n        // },\n      },\n      tooltip: {\n        showTooltip: true,\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"行列联动高亮",en:"Hover Highlighting"},filename:"hover.ts",isNew:!1},{id:"data-cell-click-selection",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/0lw2grIHZN/click.gif",source:"import { PivotSheet, S2Event, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: true,\n        // 高亮选中单元格\n        selectedCellsSpotlight: true,\n        // 多选 (按住 Ctrl/Command), 默认开启\n        multiSelection: true,\n      },\n      tooltip: {\n        showTooltip: true,\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.on(S2Event.GLOBAL_SELECTED, (cells) => {\n      console.log('selected', cells);\n    });\n\n    s2.render();\n  });\n",title:{zh:"数值单元格单选/多选",en:"Data Cell Click Highlighting"},filename:"data-cell-click-selection.ts",isNew:!1},{id:"header-cell-click-selection",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/XYZaL1w%24M/Kapture%2525202022-04-15%252520at%25252011.45.55.gif",source:"import { PivotSheet, S2Event, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    // 试试 (按住 Ctrl/Command) 对行列头进行多选\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: true,\n        // 高亮选中单元格\n        selectedCellsSpotlight: true,\n        // 多选 (按住 Ctrl/Command), 默认开启\n        multiSelection: true,\n      },\n      tooltip: {\n        showTooltip: true,\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    // 也可以监听全局的选中事件\n    s2.on(S2Event.GLOBAL_SELECTED, (cells) => {\n      console.log('selected', cells);\n    });\n\n    s2.render();\n  });\n",title:{zh:"行列头单选/多选",en:"Header Cell Highlighting"},filename:"header-cell-click-selection.ts",isNew:!1},{id:"data-cell-range-selection",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/RcIcQc7O2/Kapture%2525202022-04-15%252520at%25252011.52.52.gif",source:"import { PivotSheet, S2Event, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    // 试试选中一个单元格, 然后按住 Shift 选中另一个单元格\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        // 高亮选中单元格\n        selectedCellsSpotlight: true,\n        // 区间多选 (按住 Shift), 默认开启\n        rangeSelection: true,\n      },\n      tooltip: {\n        showTooltip: true,\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    // 也可以监听全局的选中事件\n    s2.on(S2Event.GLOBAL_SELECTED, (cells) => {\n      console.log('selected', cells);\n    });\n\n    s2.render();\n  });\n",title:{zh:"区间多选",en:"Range Highlighting"},filename:"data-cell-range-selection.ts",isNew:!1},{id:"brush-selection",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/WBFq3TzTY9/multi-select.gif",source:"import { PivotSheet, S2Event, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    // 支持滚动圈选, 试试圈选时鼠标向下\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: true,\n        // 高亮选中单元格\n        selectedCellsSpotlight: true,\n        // 关闭圈选\n        // brushSelection: false,\n      },\n      style: {\n        cellCfg: {\n          height: 100,\n        },\n      },\n      tooltip: {\n        showTooltip: true,\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.on(S2Event.DATA_CELL_BRUSH_SELECTION, (cells) => {\n      console.log('dataCelBrushSelection', cells);\n    });\n\n    s2.render();\n  });\n",title:{zh:"圈选",en:"Brush Selection"},filename:"brush-selection.ts",isNew:!1},{id:"brush-header",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/2wKjHcOGD/quanxuanbiaotougongneng.gif",source:"import { PivotSheet, S2Event, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: true,\n        // 设置行头，列头，单元格都可以进行圈选 (行头,列头默认关闭)\n        brushSelection: {\n          data: true,\n          row: true,\n          col: true,\n        },\n        // 圈选功能 + 复制功能开启后，可以通过使用快捷键 `command/ctrl + c` 即可复制选中区域（局部复制）\n        enableCopy: true,\n      },\n      style: {\n        cellCfg: {\n          height: 100,\n        },\n      },\n      tooltip: {\n        showTooltip: true,\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    // 可以监听各自单元格区域的刷选事件\n    s2.on(S2Event.DATA_CELL_BRUSH_SELECTION, (cells) => {\n      console.log('dataCelBrushSelection', cells);\n    });\n    s2.on(S2Event.ROW_CELL_BRUSH_SELECTION, (cells) => {\n      console.log('rowCellBrushSelection', cells);\n    });\n    s2.on(S2Event.COL_CELL_BRUSH_SELECTION, (cells) => {\n      console.log('colCelBrushSelection', cells);\n    });\n\n    // 也可以监听全局的选中事件\n    s2.on(S2Event.GLOBAL_SELECTED, (cells) => {\n      console.log('selected', cells);\n    });\n\n    s2.render();\n  });\n",title:{zh:"行列头圈选",en:"Brush Row and Column Header"},filename:"brush-header.ts",isNew:!1},{id:"resize",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/F6l3SoxBCx/resize.gif",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: true,\n        selectedCellsSpotlight: true, // highlight selection\n      },\n      tooltip: {\n        showTooltip: true,\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"行高列宽调整",en:"Resize Height And Width"},filename:"resize.ts",isNew:!1},{id:"frozen",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/%24a16EsOCR8/frozeb.gif",source:"import { TableSheet } from '@antv/s2';\n\nfetch('https://assets.antv.antgroup.com/s2/basic-table-mode.json')\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n\n    const s2DataConfig = {\n      fields: {\n        columns: ['province', 'city', 'type', 'price'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n      ],\n      data: res,\n    };\n\n    const s2Options = {\n      width: 450,\n      height: 480,\n      showSeriesNumber: true,\n      frozenRowCount: 1, // 行头冻结数量\n      frozenColCount: 1, // 列头冻结数量\n      frozenTrailingRowCount: 1, // 列尾冻结数量\n      frozenTrailingColCount: 1, // 列尾冻结数量\n    };\n\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n    s2.render();\n  });\n",title:{zh:"明细表 - 行列冻结",en:"TableSheet - Frozen Rows And Cols"},filename:"frozen.ts",isNew:!1},{id:"frozen-row-header",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*kk0ETbbbnOsAAAAAAAAAAAAADmJ7AQ/original",source:"import { PivotSheet, S2Event, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      hierarchyType: 'tree', // 'tree' | 'grid'\n      // 默认开启行头冻结, 关闭后滚动区域为整个表格\n      frozenRowHeader: true,\n      style: {\n        rowCfg: {\n          treeRowsWidth: 400,\n          width: 200,\n        },\n        colCfg: {\n          width: 200,\n        },\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.on(S2Event.GLOBAL_SCROLL, (e) => {\n      console.log('scroll', e);\n    });\n\n    s2.on(S2Event.ROW_CELL_SCROLL, (e) => {\n      console.log('row cell scroll', e);\n    });\n\n    s2.render();\n  });\n",title:{zh:"透视表 - 行头冻结",en:"PivotSheet - Frozen Row Header"},filename:"frozen-row-header.ts",isNew:!1},{id:"auto-reset-sheet-style",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/Lb0%26u6LtAu/reset.gif",source:"import { TableSheet } from '@antv/s2';\n\nfetch(\n  'https://assets.antv.antgroup.com/s2/basic-table-mode.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        columns: ['province', 'city', 'type', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        autoResetSheetStyle: true, // 在鼠标移出表格区域后，自动 reset hover 高亮状态\n      },\n    };\n\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n    s2.render();\n  });\n",title:{zh:"自动交互状态重置",en:"Disable auto reset sheet style"},filename:"auto-reset-sheet-style.ts",isNew:!1},{id:"hover-after-scroll",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*NbG7SakRzXUAAAAAAAAAAAAADmJ7AQ/original.gif",source:"import { PivotSheet, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      style: {\n        cellCfg: {\n          height: 100,\n        },\n      },\n      interaction: {\n        // 悬停高亮\n        hoverHighlight: true,\n        // 滚动后自动触发悬停状态\n        hoverAfterScroll: true,\n      },\n      tooltip: {\n        showTooltip: true,\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"滚动后自动触发悬停状态",en:"Trigger hover after scroll"},filename:"hover-after-scroll.ts",isNew:!1},{id:"state-theme",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*6zM5TpfV7qIAAAAAAAAAAAAADmJ7AQ/original",source:"import { PivotSheet, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: true,\n        selectedCellHighlight: true,\n        selectedCellsSpotlight: true,\n        multiSelection: true,\n        selectedCellMove: true,\n        rangeSelection: true,\n        brushSelection: {\n          row: true,\n          col: true,\n          data: true,\n        },\n      },\n      tooltip: {\n        showTooltip: true,\n      },\n      style: {\n        rowCfg: {\n          width: 100,\n        },\n        cellCfg: {\n          width: 120,\n        },\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.setTheme({\n      // 刷选 (预选中遮罩框)\n      prepareSelectMask: {\n        backgroundColor: '#ccc',\n      },\n      // 宽高调整 (热区, 参考线)\n      resizeArea: {\n        // 热区大小, 背景色\n        size: 4,\n        background: 'rgba(0,0,0, 0.5)',\n        backgroundOpacity: 0,\n\n        // 参考线\n        guideLineColor: 'pink',\n        guideLineDisableColor: 'yellow',\n        guideLineDash: [4, 4],\n      },\n      // 滚动条\n      scrollBar: {\n        trackColor: 'rgba(0,0,0,0.01)',\n        thumbHoverColor: 'rgba(0,0,0,0.25)',\n        thumbColor: 'rgba(0,0,0,0.15)',\n        // 滑块最小宽度\n        thumbHorizontalMinSize: 32,\n        thumbVerticalMinSize: 32,\n        size: 6,\n        hoverSize: 10,\n        lineCap: 'round',\n      },\n      // 数值单元格 (其他单元格同理)\n      dataCell: {\n        cell: {\n          interactionState: {\n            // 悬停聚焦: 关闭悬停单元格时出现的 \"黑色边框\"\n            hoverFocus: {\n              // 边框设置为透明\n              borderColor: 'transparent',\n              // 或者边框透明度设置为 0\n              // borderOpacity: 0\n            },\n            // 十字悬停\n            hover: {\n              backgroundOpacity: 0.2,\n              borderColor: 'transparent',\n              borderOpacity: 1,\n            },\n            // 选中背景色/边框\n            selected: {\n              backgroundColor: 'pink',\n              borderWidth: 3,\n              borderColor: '#dcdcdc',\n              borderOpacity: 1,\n            },\n            // 未选中背景色/边框\n            unselected: {\n              backgroundOpacity: 0.5,\n              textOpacity: 0.1,\n              opacity: 0.1,\n            },\n            // 高亮效果\n            highlight: {\n              textOpacity: 0.2,\n              backgroundColor: '#f63',\n              borderColor: '#f63',\n              borderOpacity: 1,\n            },\n            // 预选 (刷选)\n            prepareSelect: {\n              borderColor: '#396',\n              borderOpacity: 1,\n            },\n          },\n        },\n      },\n    });\n\n    s2.render();\n  });\n",title:{zh:"交互主题配置",en:"Interaction state theme"},filename:"state-theme.ts",isNew:!1}],icon:"",id:"basic",title:{en:"Basic Interaction",zh:"基础交互"},api:{zh:" \n \n## Interaction \n \n| 参数    | 说明   | 类型                                        | 默认值   |        必选        | \n| -------- | ----------- |-------------------------------------------| -------- | ---------------- | \n| linkFields  | 标记字段为链接样式，用于外链跳转  | `string[]` \\| (meta: [Node](/docs/api/basic-class/node) \\| ViewMeta) => boolean    |    |    | \n| selectedCellsSpotlight               | 是否开启选中高亮聚光灯效果    | `boolean`                                 | `false`      |                  | \n| hoverHighlight                       | 鼠标悬停时高亮当前单元格，以及所对应的行头，列头<br/>rowHeader：是否高亮悬停格子所在行头<br/>colHeader：是否高亮悬停格子所在列头<br/>rowCells：是否高亮悬停格子所在行<br/>colCells：是否高亮悬停格子所在列<br/>true：同 `{rowHeader: true, colHeader: true, currentRow: true, currentCol: true}`                                                                                                                 | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, rowCells?: boolean, colCells?: boolean}`                                 | `true`                                                |                  | \n| hoverFocus                           | 鼠标悬停在当前单元格超过默认 800ms 后，保持当前高亮，显示 tooltip，悬停时间通过设置 `duration` 来控制   | `boolean  \\| {duration: number}`                                   |      `true`      |       | \n| hiddenColumnFields                   | 用于配置默认隐藏的列，透视表需要配置列头唯一 id, 明细表配置列头 field 字段即可                                                                                          | `string[]`                                |                                                       |                  | \n| enableCopy                           | 是否允许复制                                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| copyWithHeader                       | 复制数据是否带表头信息                                                                                                                            | `boolean`                                 | `false`                                               |                  | \n| copyWithFormat                       | 是否使用 field format 格式复制                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| customInteractions                   | 自定义交互 [详情](/docs/manual/advanced/interaction/custom)                                                                                | [CustomInteraction[]](#custominteraction) |                                                       |                  | \n| scrollSpeedRatio                     | 用于控制滚动速率，分水平和垂直两个方向，默认为 1                                                                                                              | [ScrollSpeedRatio](#scrollspeedratio)     |                                                       |                  | \n| autoResetSheetStyle                  | 用于控制点击表格外区域和按下 esc 键时是否重置交互状态                                                                                                          | `boolean`                                 | `true`                                                |                  | \n| resize                               | 用于控制 resize 热区是否显示     | `boolean`  \\| [ResizeInteractionOptions](#resizeinteractionoptions) |      `true`      |       | \n| brushSelection         | 是否允许单元格（包含行头，列头，数值单元格）刷选。    | `boolean` \\|  [BrushSelection](#brushSelection)  | `true`                         |     |  1.29.0 后支持 [BrushSelection](#brushSelection)   | \n| multiSelection                       | 是否允许多选 （包含行头，列头，数值单元格）                                                                                                                 | `boolean`                                 | `true`                                                |                  | \n| rangeSelection                       | 是否允许区间快捷多选                                                                                                                             | `boolean`                                 | `true`                                                |                  | \n| scrollbarPosition                    | 用于控制滚动条展示在内容区边缘还是画布边缘                                                                                                                  | `content \\| canvas`                                              |    `content`     |   | \n| eventListenerOptions                 | 事件监听函数 `addEventListener` 的 [可选项配置](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener), 可控制事件从冒泡阶段还是捕获阶段触发 | `false`                                   |                                                       | \n| selectedCellHighlight                | 选中格子后的高亮行为<br/>rowHeader：是否高亮选中格子所在行头<br/>colHeader：是否高亮选中格子所在列头<br/>currentRow：是否高亮选中格子所在行<br/>currentCol：是否高亮选中格子所在列<br/>true：同{rowHeader: true, colHeader: true}     | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, currentRow?: boolean, currentCol?: boolean }` | `false`                                               |                  | \n| overscrollBehavior                   | 控制滚动至边界的行为，可禁用浏览器的默认滚动行为。[详情](/docs/manual/advanced/interaction/basic/#修改滚动至边界行为)  | `auto \\| contain \\| none \\| null`  |  `auto` | \n| hoverAfterScroll                   | 滚动结束后是否在当前鼠标所处单元格自动触发悬停表现  | `boolean`  |  `false` | \n \n### CustomInteraction \n \n功能描述：自定义交互，继承 baseEvent:  [具体例子](/docs/manual/advanced/interaction/custom) \n \n| 参数        | 说明           | 类型                                              | 默认值 | 必选  | \n| ----------- | -------------- | ------------------------------------------------- | ------ | --- | \n| key         | 交互的唯一标识 | `string`                                          |        |   ✓   | \n| interaction |                | [InteractionConstructor](/docs/api/basic-class/interaction#interactionconstructor) |        |   ✓   | \n \n### ScrollSpeedRatio \n \n```js \ninterface ScrollSpeedRatio { \n  horizontal?: number; // 水平滚动速率，默认为 1 \n  vertical?: number; // 垂直滚动速率，默认为 1 \n} \n``` \n \n### ResizeInteractionOptions \n \n| 参数                 | 说明     | 类型    | 默认值 | 必选  | \n| -------------------- | ------- | ----------------- | ------ | --- | \n| rowCellVertical      | 是否开启行头垂直方向 resize 热区                                                   | `boolean`         | true   |       | \n| cornerCellHorizontal | 是否开启角头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellHorizontal    | 是否开启列头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellVertical      | 是否开启列头垂直方向 resize 热区 （列头隐藏时该配置无效）                                                   | `boolean`         | true   |       | \n| rowResizeType        | 用于控制行高 resize 时是同时对所有 Cell 生效，还是只对当前行生效。默认对所有行生效 | `all`\\| `current` | `all`  |       | \n| disable        | 用于控制行高 resize 是否生效 查看例子 | (resizeInfo: [S2CellType](/docs/api/components/sheet-component#resizeinfo)) => boolean |   |       | \n| visible        | 自定义当前单元格是否显示 resize 热区 | (cell: [S2CellType](/docs/api/basic-class/base-cell)) => boolean |   |       | \n \n### brushSelection \n \n| 参数              | 说明                  | 类型              | 默认值   | 必选  | \n| ----------------- | --------------------- | ----------------- | ------- | --- | \n| data            | 是否允许数值单元格刷选         | `boolean`         | true  |       | \n| row             | 是否允许行头单元格刷选（仅支持透视表） | `boolean`         | false |       | \n| col             | 是否允许列头单元格刷选 | `boolean`         | false |       | \n \n \n",en:" \n \n## Interaction \n \n| parameter              | illustrate                                                                                                                                                                                                                                                   | type                                           | Defaults                                              |  required | \n| :--------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | :--------------------------------------------- | :---------------------------------------------------- | :-------: | \n| linkFields             | The mark field is a link style, which is used for external link jumps                                                                                                                                                                                        | `string[]`                                     |                                                       |           | \n| selectedCellsSpotlight | Whether to enable the selected highlight spotlight effect                                                                                                                                                                                                    | `boolean`                                      | `false`                                               |           | \n| hoverHighlight         | Highlight the current cell, and the corresponding row and column headers when the mouse hovers                                                                                                                                                               | `boolean\\| { rowHeader?: boolean, colHeader?: boolean, rowCells?: boolean, colCells?: boolean}`                                      | `true`                                                |           | \n| hoverFocus             | After the mouse hovers over the current cell for more than the default 800ms, it will keep the current highlight and display the tooltip. The hovering time is controlled by setting the `duration`                                                          | \\`boolean                                      | {duration: number}\\`                                  |   `true`  | \n| hiddenColumnFields     | It is used to configure the columns that are hidden by default. The pivot table needs to configure the unique id of the column header, and the detail table can be configured with the field field of the column header.                                     | `string[]`                                     |                                                       |           | \n| enableCopy             | Whether to allow copying                                                                                                                                                                                                                                     | `boolean`                                      | `false`                                               |           | \n| copyWithHeader         | Whether to copy data with header information                                                                                                                                                                                                                 | `boolean`                                      | `false`                                               |           | \n| copyWithFormat         | Whether to use the field format format to copy                                                                                                                                                                                                               | `boolean`                                      | `false`                                               |           | \n| customInteractions     | Customize interaction [details](/docs/manual/advanced/interaction/custom)                                                                                                                                                                                 | [CustomInteraction\\[\\]](#custominteraction)    |                                                       |           | \n| scrollSpeedRatio       | Used to control the scroll rate, divided into horizontal and vertical directions, the default is 1                                                                                                                                                           | [ScrollSpeedRatio](#scrollspeedratio)          |                                                       |           | \n| autoResetSheetStyle    | Used to control whether to reset the interactive state when clicking the area outside the table and pressing the esc key                                                                                                                                     | `boolean`                                      | `true`                                                |           | \n| resize                 | Used to control whether the resize hotspot is displayed                                                                                                                                                                                                      | `boolean` \\\\                                   | [ResizeInteractionOptions](#resizeinteractionoptions) |   `true`  | \n| brushSelection         | Whether to allow cells (including row headers, column headers, and value cells) to be selected. Row header, column header selection only supports pivot tables                                                                                               | `boolean \\| [BrushSelection](#brushSelection)` | `true`                                                |           | \n| multiSelection         | Whether to allow multiple selection (including row headers, column headers, and value cells)                                                                                                                                                                 | `boolean`                                      | `true`                                                |           | \n| rangeSelection         | Whether to allow quick multiple selection of intervals                                                                                                                                                                                                       | `boolean`                                      | `true`                                                |           | \n| scrollbarPosition      | Used to control whether the scroll bar is displayed on the edge of the content area or the edge of the canvas                                                                                                                                                | `content` \\\\                                   | `canvas`                                              | `content` | \n| eventListenerOptions   | [Optional configuration](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener) of the event listening function `addEventListener` , which can control whether the event is triggered from the bubbling phase or the capturing phase | `false`                                        |                                                       |           | \n| selectedCellHighlight  | Whether to highlight the column header where the grid is located                                                                                                                                                                                             | `boolean`                                      | `false`                                               |           | \n| overscrollBehavior     | Controls the behavior of scrolling to bounds, which disables the browser's default scrolling behavior. [details](/docs/manual/advanced/interaction/basic/#%E4%BF%AE%E6%94%B9%E6%BB%9A%E5%8A%A8%E8%87%B3%E8%BE%B9%E7%95%8C%E8%A1%8C%E4%B8%BA)              | `auto \\| contain \\| none \\| null`  |  `auto` | \n| hoverAfterScroll                   | Whether to automatically trigger hover performance in the cell where the mouse is currently located after scrolling  | `boolean`  |  `false` | \n \n### CustomInteraction \n \nFunction description: custom interaction, inherit baseEvent: [concrete example](/docs/manual/advanced/interaction/custom) \n \n| parameter   | illustrate                            | type                                                                                   | Defaults | required | \n| ----------- | ------------------------------------- | -------------------------------------------------------------------------------------- | -------- | :------: | \n| key         | unique identifier for the interaction | `string`                                                                               |          |     ✓    | \n| interaction |                                       | [Interaction Constructor](/docs/api/basic-class/interaction#interactionconstructor) |          |     ✓    | \n \n### ScrollSpeedRatio \n \n```js \ninterface ScrollSpeedRatio { \n  horizontal?: number; // 水平滚动速率，默认为 1 \n  vertical?: number; // 垂直滚动速率，默认为 1 \n} \n``` \n \n### ResizeInteractionOptions \n \n| parameter            | illustrate                                                                                                                                                       | type                                                                                       | Defaults | required | \n| -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ | -------- | :------: | \n| rowCellVertical      | Whether to open the line header vertical resize hot zone                                                                                                         | `boolean`                                                                                  | true     |          | \n| cornerCellHorizontal | Whether to enable the resize hotspot in the horizontal direction of the corner head                                                                              | `boolean`                                                                                  | true     |          | \n| colCellHorizontal    | Whether to enable the horizontal resize hotspot of the column header                                                                                             | `boolean`                                                                                  | true     |          | \n| colCellVertical      | Whether to enable the column header vertical resize hot zone (this configuration is invalid when the column header is hidden)                                    | `boolean`                                                                                  | true     |          | \n| rowResizeType        | It is used to control whether the row height resize will take effect for all Cells at the same time, or only for the current row. Applies to all rows by default | `all` \\| `current`                                                                         | `all`    |          | \n| disable              | It is used to control whether the row height resize is effective or not. View example                                                                            | (resizeInfo: [S2CellType](/docs/api/components/sheet-component#resizeinfo) ) => boolean |          |          | \n| visible              | Customize whether the current cell displays the resize hotspot                                                                                                   | (cell: [S2CellType](/docs/api/basic-class/base-cell) ) => boolean                       |          |          | \n \n### brushSelection \n \n| parameter | illustrate                                                                 | type      | Defaults | required | \n| --------- | -------------------------------------------------------------------------- | --------- | -------- | :------: | \n| data      | Whether to allow numerical cell selection                                  | `boolean` | true     |          | \n| row       | Whether to allow row header cell selection (only supports pivot tables)    | `boolean` | false    |          | \n| col       | Whether to allow column header cell selection (only supports pivot tables) | `boolean` | false    |          | \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"row-expand-depth",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/E8BAkGZo%26/2022-08-23%25252010.03.51.gif",source:"import { PivotSheet } from '@antv/s2';\n\nfunction createRadioGroup(s2) {\n  [\n    [0, '展开一级节点（省份）'],\n    [1, '展开二级节点（城市）'],\n    [2, '展开三级节点（类别）'],\n  ].forEach(([value, text]) => {\n    const radio = document.createElement('input');\n\n    radio.type = 'radio';\n    radio.name = 'rowExpandDepth';\n    radio.value = value;\n    radio.checked = value === 0;\n\n    radio.addEventListener('click', (e) => {\n      const value = e.target.value;\n      const updated = !s2.options.interaction.resize[value];\n      radio.checked = updated;\n\n      s2.setOptions({\n        style: {\n          rowExpandDepth: Number(value),\n        },\n      });\n      s2.render(false);\n    });\n\n    const label = document.createElement('label');\n    label.innerText = text;\n    label.htmlFor = 'name';\n\n    document.querySelector('#container > canvas').before(radio);\n    document.querySelector('#container > canvas').before(label);\n  });\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/e254339f-46df-4be0-81b0-a3b1e26b39ff.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      hierarchyType: 'tree',\n      style: {\n        rowExpandDepth: 0, // 展开一级维度的子节点\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n\n    createRadioGroup(s2);\n  });\n",title:{zh:"行头默认层级展开 - 透视表",en:"Row Depth Expand"},filename:"row-expand-depth.ts",isNew:!1},{id:"pivot-link-jump",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/W0bikxI2pn/link-pivot.gif",source:"import { S2Event, PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        linkFields: ['city', 'number'],\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.on(S2Event.GLOBAL_LINK_FIELD_JUMP, (data) => {\n      console.log(data);\n\n      const { key, record } = data;\n      const value = record[key];\n      const a = document.createElement('a');\n      a.target = '_blank';\n      a.href = `https://antv-s2.gitee.io/zh/docs/manual/introduction?${key}=${value}`;\n      a.click();\n      a.remove();\n    });\n\n    s2.render();\n  });\n",title:{zh:"链接跳转 - 透视表",en:"Link jump"},filename:"pivot-link-jump.ts",isNew:!1},{id:"table-link-jump",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/aygNlbA0fu/link-table.gif",source:"import { S2Event, TableSheet } from '@antv/s2';\n\nfetch(\n  'https://assets.antv.antgroup.com/s2/basic-table-mode.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        columns: ['type', 'province', 'city', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        linkFields: ['type', 'province', 'price'],\n      },\n    };\n\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n\n    s2.on(S2Event.GLOBAL_LINK_FIELD_JUMP, (data) => {\n      console.log(data);\n\n      const { key, record } = data;\n      const value = record[key];\n      const a = document.createElement('a');\n      a.target = '_blank';\n      a.href = `https://antv-s2.gitee.io/zh/docs/manual/introduction?${key}=${value}`;\n      a.click();\n      a.remove();\n    });\n\n    s2.render();\n  });\n",title:{zh:"链接跳转 - 明细表",en:"Link jump"},filename:"table-link-jump.ts",isNew:!1},{id:"custom-tree-link-jump",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*f6e6S4OUSdMAAAAAAAAAAAAADmJ7AQ/original",source:"import { S2Event, PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/custom-tree.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: [],\n        columns: ['type', 'sub_type'],\n        values: [\n          'measure-a',\n          'measure-b',\n          'measure-c',\n          'measure-d',\n          'measure-e',\n          'measure-f',\n        ],\n        customTreeItems: res.customTreeItem,\n        valueInCols: false,\n      },\n      data: res.data,\n    };\n    const s2Options = {\n      width: 600,\n      height: 480,\n      hierarchyType: 'customTree',\n      interaction: {\n        linkFields: [\n          'custom-node-1',\n          'custom-node-2',\n          'custom-node-3',\n          'custom-node-4',\n          'custom-node-5',\n          'measure-a',\n          'measure-b',\n          'measure-c',\n          'measure-d',\n          'measure-e',\n          'measure-f',\n        ],\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.on(S2Event.GLOBAL_LINK_FIELD_JUMP, (data) => {\n      console.log(data);\n\n      const { key, record } = data;\n      const value = record[key];\n      const a = document.createElement('a');\n      a.target = '_blank';\n      a.href = `https://antv-s2.gitee.io/zh/docs/manual/introduction?${key}=${value}`;\n      a.click();\n      a.remove();\n    });\n\n    s2.render();\n  });\n",title:{zh:"链接跳转 - 自定义目录树",en:"Link jump"},filename:"custom-tree-link-jump.ts",isNew:!1},{id:"pivot-hide-columns",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/0TMss8KAY/Kapture%2525202022-02-11%252520at%25252017.52.53.gif",source:"import { PivotSheet, S2Event } from '@antv/s2';\n\nfunction hideSelectedColumns(s2) {\n  // 兼容多选\n  const selectedColumnNodes = s2.interaction\n    .getActiveCells()\n    .map((cell) => cell.getMeta());\n\n  const selectedColumnFields = selectedColumnNodes.map((node) => node.id);\n  s2.interaction.hideColumns(selectedColumnFields, true);\n}\n\nfunction getTooltipContent(cell, options) {\n  const { spreadsheet, isLeaf } = cell.getMeta();\n\n  if (!isLeaf || !spreadsheet.options.tooltip.operation.hiddenColumns) {\n    return null;\n  }\n\n  const button = document.createElement('button');\n  button.type = 'button';\n  button.innerHTML = '隐藏';\n  button.className = 'ant-btn';\n  button.addEventListener('click', () => {\n    hideSelectedColumns(spreadsheet);\n  });\n\n  return button;\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        // 透视表默认隐藏需要指定唯一列头id\n        // 可通过 `s2.getColumnNodes()` 获取列头节点查看id\n        hiddenColumnFields: ['root[&]家具[&]沙发[&]number'],\n      },\n      tooltip: {\n        showTooltip: true,\n        operation: {\n          // 开启手动隐藏, 叶子节点有效\n          hiddenColumns: true,\n        },\n        content: getTooltipContent,\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.on(S2Event.LAYOUT_COLS_EXPANDED, (cell) => {\n      console.log('列头展开', cell);\n    });\n    s2.on(\n      S2Event.LAYOUT_COLS_HIDDEN,\n      (currentHiddenColumnsInfo, hiddenColumnsDetail) => {\n        console.log('列头隐藏', currentHiddenColumnsInfo, hiddenColumnsDetail);\n      },\n    );\n\n    s2.render();\n  });\n",title:{zh:"隐藏列头 - 透视表",en:"Hide pivot sheet columns"},filename:"pivot-hide-columns.ts",isNew:!1},{id:"table-hide-columns",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/nDXb10yy0v/hide.gif",source:"import { TableSheet, S2Event } from '@antv/s2';\n\nfunction hideSelectedColumns(s2) {\n  // 兼容多选\n  const selectedColumnNodes = s2.interaction\n    .getActiveCells()\n    .map((cell) => cell.getMeta());\n\n  const selectedColumnFields = selectedColumnNodes.map((node) => node.field);\n  s2.interaction.hideColumns(selectedColumnFields, true);\n}\n\nfunction getTooltipContent(cell, options) {\n  const { spreadsheet, isLeaf } = cell.getMeta();\n\n  if (!isLeaf || !spreadsheet.options.tooltip.operation.hiddenColumns) {\n    return null;\n  }\n\n  const button = document.createElement('button');\n  button.type = 'button';\n  button.innerHTML = '隐藏';\n  button.className = 'ant-btn';\n  button.addEventListener('click', () => {\n    hideSelectedColumns(spreadsheet);\n  });\n\n  return button;\n}\n\nfetch('https://assets.antv.antgroup.com/s2/basic-table-mode.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        columns: ['type', 'province', 'city', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        // 默认隐藏 [省份] 和 [价格]\n        hiddenColumnFields: ['province', 'price'],\n      },\n      tooltip: {\n        showTooltip: true,\n        operation: {\n          // 开启手动隐藏\n          hiddenColumns: true,\n        },\n        content: getTooltipContent,\n      },\n    };\n\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n\n    s2.on(S2Event.LAYOUT_COLS_EXPANDED, (cell) => {\n      console.log('列头展开', cell);\n    });\n\n    s2.on(\n      S2Event.LAYOUT_COLS_HIDDEN,\n      (currentHiddenColumnsInfo, hiddenColumnsDetail) => {\n        console.log('列头隐藏', currentHiddenColumnsInfo, hiddenColumnsDetail);\n      },\n    );\n\n    s2.render();\n  });\n",title:{zh:"隐藏列头 - 明细表",en:"Hide table sheet columns"},filename:"table-hide-columns.ts",isNew:!1},{id:"scroll-speed-ratio",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/e0z41b3e4/2021-11-16%25252020.11.53.gif",source:"import { TableSheet } from '@antv/s2';\n\nimport insertCss from 'insert-css';\n\nconst defaultScrollSpeedRatio = 1;\n\nfunction createSlider(s2) {\n  const slider = document.createElement('input');\n  slider.type = 'range';\n  slider.max = '5';\n  slider.min = '0';\n  slider.value = `${defaultScrollSpeedRatio}`;\n  slider.step = '0.1';\n  slider.title = `当前滚动速率: ${defaultScrollSpeedRatio}`;\n\n  slider.addEventListener('input', (e) => {\n    const ratio = e.target.value;\n    console.log('ratio: ', ratio);\n\n    s2.setOptions({\n      interaction: {\n        scrollSpeedRatio: {\n          vertical: ratio,\n        },\n      },\n    });\n    slider.title = `当前滚动速率: ${ratio}`;\n  });\n\n  document.querySelector('#container > canvas').before(slider);\n}\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n\n    const s2DataConfig = {\n      fields: {\n        columns: ['province', 'city', 'type', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 300,\n      interaction: {\n        scrollSpeedRatio: {\n          vertical: defaultScrollSpeedRatio,\n          horizontal: defaultScrollSpeedRatio,\n        },\n      },\n    };\n\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n\n    createSlider(s2);\n  });\n\ninsertCss(`\n  input[type='range'] {\n    display: block;\n    width: 300px;\n    background-color: #bdc3c7;\n    margin-left: 120px;\n    margin-bottom: 20px;\n    -webkit-appearance: none;\n    height: 5px;\n    border-radius: 5px;\n    outline: 0;\n  }\n\n  input[type=\"range\"]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    background-color: #2C60D3;\n    width: 15px;\n    height: 15px;\n    border-radius: 50%;\n    border: 2px solid white;\n    cursor: pointer;\n    transition: .3s ease-in-out;\n  }​\n\n  input[type=\"range\"]::-webkit-slider-thumb:hover {\n    background-color: white;\n    border: 2px solid #2C60D3;\n  }\n\n  input[type=\"range\"]::-webkit-slider-thumb:active {\n    transform: scale(1.5);\n  }\n\n  input[type='range']::before {\n    content: attr(title);\n    position: absolute;\n    left: 15px;\n    top: 12px;\n  }\n`);\n",title:{zh:"自定义滚动速度",en:"Custom scroll speed"},filename:"scroll-speed-ratio.ts",isNew:!1},{id:"resize-active",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/HEfCpSTRO/2021-12-06%25252011.39.15.gif",source:"import { PivotSheet } from '@antv/s2';\nimport insertCss from 'insert-css';\n\nfunction createRadioGroup(s2) {\n  [\n    ['rowCellVertical', '行头热区'],\n    ['cornerCellHorizontal', '角头热区'],\n    ['colCellHorizontal', '列头水平方向resize热区'],\n    ['colCellVertical', '列头垂直方向resize热区'],\n  ].forEach(([value, text]) => {\n    const radio = document.createElement('input');\n\n    radio.type = 'radio';\n    radio.name = value;\n    radio.value = value;\n    radio.checked = true;\n\n    radio.addEventListener('click', (e) => {\n      const value = e.target.value;\n      const updated = !s2.options.interaction.resize[value];\n      radio.checked = updated;\n\n      s2.setOptions({\n        interaction: {\n          resize: {\n            [value]: updated,\n          },\n        },\n      });\n      s2.render(false);\n    });\n\n    const label = document.createElement('label');\n    label.innerText = text;\n    label.htmlFor = 'name';\n\n    document.querySelector('#container > canvas').before(radio);\n    document.querySelector('#container > canvas').before(label);\n  });\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        resize: {\n          rowCellVertical: true,\n          cornerCellHorizontal: true,\n          colCellHorizontal: true,\n          colCellVertical: true,\n        },\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n\n    createRadioGroup(s2);\n  });\n\ninsertCss(`\n  input[type='radio'] {\n    margin-bottom: 20px;\n    margin-right: 4px;\n  }\n\n  label{\n    margin-right: 10px\n  }\n`);  ",title:{zh:"自定义行列宽度调整热区",en:"Custom resize area"},filename:"resize-active.ts",isNew:!1},{id:"resize-disable",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/64tnK5%263K/Kapture%2525202022-07-19%252520at%25252015.40.15.gif",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        resize: {\n          disable: (resizeInfo) => {\n            console.log('resizeInfo: ', resizeInfo);\n            // 不允许调小宽度\n            return resizeInfo.resizedWidth <= resizeInfo.width;\n            // 不允许调小高度\n            // return resizeInfo.resizedHeight <= resizeInfo.height;\n          },\n        },\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义行列宽度调整规则",en:"Custom resize disable"},filename:"resize-disable.ts",isNew:!1},{id:"merge-cell",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/Eq9WwyC2g/merge-cell.gif",source:"import { PivotSheet, S2Event } from '@antv/s2';\nimport insertCss from 'insert-css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const button = document.createElement('button');\n    const dataCellTooltip = () => {\n      button.innerText = '点击合并单元格';\n      button.className = 'merge-cells-button';\n      button.onclick = () => s2.interaction.mergeCells();\n      return button;\n    }; // (按住 Cmd/ Ctrl 多选)\n\n    const mergedCellsTooltip = (mergedCell) => {\n      button.innerText = '取消合并单元格';\n      button.className = 'merge-cells-button';\n      button.onclick = () => s2.interaction.unmergeCell(mergedCell);\n      return button;\n    };\n\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      data: res.data,\n      meta: res.meta,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      selectedCellsSpotlight: true,\n      mergedCellsInfo: [\n        [\n          { colIndex: 1, rowIndex: 6, showText: true },\n          { colIndex: 1, rowIndex: 7 },\n          { colIndex: 2, rowIndex: 6 },\n          { colIndex: 2, rowIndex: 7 },\n          { colIndex: 3, rowIndex: 6 },\n          { colIndex: 3, rowIndex: 7 },\n        ],\n      ],\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.on(S2Event.DATA_CELL_CLICK, (event) => {\n      s2.tooltip.show({\n        position: { x: event.clientX, y: event.clientY },\n        content: dataCellTooltip(),\n      });\n    });\n\n    s2.on(S2Event.MERGED_CELLS_CLICK, (event) => {\n      const cell = s2.getCell(event.target);\n      s2.tooltip.show({\n        position: { x: event.clientX, y: event.clientY },\n        content: mergedCellsTooltip(cell),\n      });\n    });\n\n    s2.render();\n  });\n\ninsertCss(`\n  .merge-cells-button {\n    border: 1px solid transparent;\n    box-shadow: 0 2px #00000004;\n    cursor: pointer;\n    height: 32px;\n    padding: 4px 15px;\n    font-size: 14px;\n    border-radius: 2px;\n    color: #000000d9;\n    border-color: #d9d9d9;\n    background: #fff;\n  }\n  .merge-cells-button:hover {\n    color: #40a9ff;\n    border-color: #40a9ff;\n  }\n  .merge-cells-button:active {\n    color: #096dd9;\n    border-color: #096dd9;\n  }\n  .antv-s2-tooltip-container  {\n    padding: 10px 64px;\n  }\n`);\n",title:{zh:"合并单元格",en:"Merge cell"},filename:"merge-cell.ts",isNew:!1},{id:"scroll-to-cell",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/303GANzFN/Kapture%2525202022-05-30%252520at%25252015.56.54.gif",source:"import { PivotSheet, S2Options, SpreadSheet } from '@antv/s2';\nimport insertCss from 'insert-css';\n\nfunction addScrollRowHeaderButton(s2: SpreadSheet) {\n  const btn = document.createElement('button');\n  btn.className = 'ant-btn ant-btn-default';\n  btn.innerHTML = '滚动行头';\n\n  btn.addEventListener('click', () => {\n    s2.updateScrollOffset({\n      rowHeaderOffsetX: {\n        value: 50,\n        animate: true,\n      },\n    });\n  });\n  document.querySelector('#container > canvas')?.before(btn);\n}\n\nfunction addScrollToCellButton(s2: SpreadSheet) {\n  const btn = document.createElement('button');\n  btn.className = 'ant-btn ant-btn-default';\n  btn.innerHTML = '滚动至成都市';\n\n  btn.addEventListener('click', () => {\n    // 获取行头是成都市对应的单元格\n    const rowNode = s2\n      .getRowNodes()\n      .find(({ id }) => id === 'root[&]四川省[&]成都市');\n\n    s2.updateScrollOffset({\n      offsetY: {\n        value: rowNode?.y,\n        animate: true,\n      },\n    });\n  });\n  document.querySelector('#container > canvas')?.before(btn);\n}\n\nfunction addScrollToTopButton(s2: SpreadSheet) {\n  const btn = document.createElement('button');\n  btn.className = 'ant-btn ant-btn-default';\n  btn.innerHTML = '滚动至顶部';\n\n  btn.addEventListener('click', () => {\n    s2.updateScrollOffset({\n      offsetY: {\n        value: 0,\n        animate: true,\n      },\n    });\n  });\n  document.querySelector('#container > canvas')?.before(btn);\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      frozenRowHeader: true,\n      style: {\n        // 让行头区域显示滚动条\n        rowCfg: {\n          width: 200,\n        },\n        // 让表格数值区域显示滚动条\n        cellCfg: {\n          height: 100,\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n\n    addScrollToCellButton(s2);\n    addScrollToTopButton(s2);\n    addScrollRowHeaderButton(s2);\n  });\n\ninsertCss(`\n  #container > canvas {\n    margin-top: 10px;\n  }\n`);\n",title:{zh:"滚动至指定单元格",en:"Scroll to cell"},filename:"scroll-to-cell.ts",isNew:!1},{id:"scroll-loop",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/3q7Rp9HhP/Kapture%2525202022-05-30%252520at%25252015.53.27.gif",source:"import { PivotSheet, S2Event } from '@antv/s2';\nimport insertCss from 'insert-css';\n\n// 每次滚动的距离\nconst STEP = 50;\n\n// 每次滚动间隔时间\nconst MS = 500;\n\n// 计时器\nlet timer;\n\nfunction addScrollButton(s2) {\n  const btn = document.createElement('button');\n  btn.className = 'ant-btn ant-btn-default';\n  btn.innerHTML = '开始滚动';\n\n  const stopBtn = document.createElement('button');\n  stopBtn.className = 'ant-btn ant-btn-default';\n  stopBtn.innerHTML = '停止滚动';\n\n  stopBtn.addEventListener('click', () => {\n    clearInterval(timer);\n  });\n\n  btn.addEventListener('click', () => {\n    // 如果没有纵向滚动条则不需要触发定时器\n    if (!s2.facet.vScrollBar) {\n      return;\n    }\n\n    // 如果需要快速滚动, 可将 setInterval 替换成 requestAnimationFrame\n    timer = setInterval(() => {\n      // 获取当前 Y 轴滚动距离\n      const { scrollY } = s2.facet.getScrollOffset();\n      // 访问 https://s2.antv.antgroup.com/zh/docs/api 查看更多 API\n      // 如果已经滚动到了底部，则回到顶部\n      if (s2.facet.isScrollToBottom(scrollY)) {\n        console.log('滚动到底部');\n        s2.updateScrollOffset({\n          offsetY: {\n            value: 0,\n            animate: false,\n          },\n        });\n        return;\n      }\n      console.log('开始滚动, 当前 scrollY:', scrollY);\n      s2.updateScrollOffset({\n        offsetY: {\n          value: scrollY + STEP,\n          animate: true,\n        },\n      });\n    }, MS);\n  });\n  document.querySelector('#container > canvas').before(btn);\n  btn.after(stopBtn);\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      style: {\n        cellCfg: {\n          // 让表格显示滚动条\n          height: 100,\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    // 记得在表格卸载后 或者 `s2.destroy()` 后清除定时器\n    s2.on(S2Event.LAYOUT_DESTROY, () => {\n      clearInterval(timer);\n    });\n\n    s2.render();\n\n    addScrollButton(s2);\n  });\n\ninsertCss(`\n  #container > canvas {\n    margin-top: 10px;\n  }\n`);\n",title:{zh:"循环滚动",en:"Scroll loop"},filename:"scroll-loop.ts",isNew:!1},{id:"overscroll-behavior",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/JRAt1kb93/Kapture%2525202022-06-06%252520at%25252011.28.43.gif",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      style: {\n        cellCfg: {\n          // 让表格显示滚动条\n          width: 200,\n          height: 100,\n        },\n      },\n      interaction: {\n        // 关闭浏览器默认的滚动边界行为, 同时设置表格不同的滚动边界行为, 可尝试在不同的设备上滚动看效果\n        // 设置为 'none' | 'contain' 时, 表格滚动到顶部/底部时, 不再触发父容器滚动\n        // 可选项: 'none' | 'contain' | 'auto'\n        overscrollBehavior: 'none',\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"关闭浏览器默认边界滚动行为",en:"Reaching the boundary of a scrolling area"},filename:"overscroll-behavior.ts",isNew:!1},{id:"frozen-pivot-grid",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ge0_S5iMB-wAAAAAAAAAAAAADmJ7AQ/original",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 300,\n      frozenFirstRow: true,\n      totals: {\n        row: {\n          showGrandTotals: true,\n          reverseLayout: true,\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"透视表 - 平铺模式冻结首行",en:"pivot mode freezes head rows"},filename:"frozen-pivot-grid.ts",isNew:!1},{id:"frozen-pivot-tree",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*ncdCT7NB2I0AAAAAAAAAAAAADmJ7AQ/original",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 300,\n      hierarchyType: 'tree',\n      frozenFirstRow: true,\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"透视表 - 树状模式冻结首行",en:"tree mode freezes head rows"},filename:"frozen-pivot-tree.ts",isNew:!1}],icon:"",id:"advanced",title:{en:"Advanced Interaction",zh:"高级交互"},api:{zh:" \n \n功能描述：交互类相关属性和方法。[详情](https://github.com/antvis/S2/blob/master/packages/s2-core/src/interaction/root.ts) \n \n```ts \ns2.interaction.reset() \n``` \n \n| 参数 | 说明                                               | 类型 | \n| --- |--------------------------------------------------| --- | \n| spreadsheet | 表格实例                                             | [SpreadSheet](/docs/api/basic-class/spreadsheet) | \n| interactions | 当前已注册的交互                                         | `Map<string, BaseEvent>` | \n| intercept | 当前拦截的交互，防止不同交互之间冲突                               | `Set<Intercept>` | \n| destroy | 卸载所有交互实例，并重置为初始状态                                | `() => void` | \n| reset | 重置所有交互                                           | `() => void` | \n| setState | 设置状态                                             | (data: [InteractionStateInfo](#interactionstateinfo)) => void | \n| getState | 获取当前状态                                           | `() => void` | \n| resetState | 重置为初始状态                                          | `() => void` | \n| clearState | 清空状态，并重绘                                         | `() => void` | \n| changeState | 更新状态                                             |  (data: [InteractionStateInfo](#interactionstateinfo)) => void | \n| setInteractedCells | 设置当前发生改变的单元格                                     | (cell: [S2CellType](#s2celltype)) => void | \n| getInteractedCells | 获取当前发生改变的单元格                                     | () => [S2CellType](#s2celltype)[] | \n| getCurrentStateName | 获取当前状态名                                          | `() => void` | \n| isEqualStateName | 是否是相同的状态名                                        | `(name: InteractionStateName) => void` | \n| isSelectedState | 是否是选中状态                                          | `() => void` | \n| isHoverState | 是否是悬停状态                                          | `() => void` | \n| isHoverFocusState | 是否是悬停聚焦状态 （悬停在单元格 `focusTime`: 默认 800ms 后）       | `() => void` | \n| isSelectedCell | 是否是选中的单元格                                        | (cell: [S2CellType](#s2celltype)) => void | \n| isActiveCell | 是否是激活的单元格                                        | (cell: [S2CellType](#s2celltype)) => void | \n| getCells | 获取当前 interaction 记录的 Cells 元信息列表，包括不在视口内的格子      | `() => Partial<ViewMeta>[]` | \n| getActiveCells | 获取当前在可视区域的单元格实例                                  | `() => S2CellType[]` | \n| clearStyleIndependent | 清除单元格样式                                          | `() => void` | \n| getPanelGroupAllUnSelectedDataCells | 获取可视区域内选中的数值单元格                                  | `() => DataCell[]` | \n| getPanelGroupAllDataCells | 获取可视区域内的所有数值单元格                                  | `() => DataCell[]` | \n| getAllRowHeaderCells | 获取行头单元格                                          | `() => RowCell[]` | \n| getAllColHeaderCells | 获取列头单元格                                          | `() => ColCell[]` | \n| getRowColActiveCells | 获取行头和列头激活的单元格                                    | `() => RowCell[] \\| ColCell[]` | \n| getAllCells | 获取所有可视区域内的单元格                                    | () => [S2CellType](#s2celltype)[] | \n| selectAll | 选中所有单元格                                          | `() => void` | \n| selectHeaderCell | 选中指定行列头单元格                                       | (selectHeaderCellInfo: [SelectHeaderCellInfo](#selectheadercellinfo)) => boolean | \n| getCellChildrenNodes | 获取当前单元格的所有子节点                                    | (cell: [S2CellType](#s2celltype)) => [Node]((/docs/api/basic-class/node))[] | \n| hideColumns | 隐藏列 (forceRender 为 `false` 时，隐藏列为空的情况下，不再触发表格更新） | `(hiddenColumnFields: string[], forceRender?: boolean = true) => void` | \n| mergeCells | 合并单元格                                            | (cellsInfo?: [MergedCellInfo](#mergedcellinfo)[], hideData?: boolean) => void | \n| unmergeCells | 取消合并单元格                                          | `(removedCells: MergedCell[]) => void` | \n| updatePanelGroupAllDataCells | 更新所有数值单元格                                        | `() => void` | \n| updateCells | 更新指定单元格                                          | (cells: [S2CellType](#s2celltype)[]) => void | \n| addIntercepts | 新增交互拦截                                           | (interceptTypes: [InterceptType](#intercepttype)[]) => void | \n| hasIntercepts | 是否有指定拦截的交互                                       | (interceptTypes: [InterceptType](#intercepttype)[]) => boolean | \n| removeIntercepts | 移除指定交互拦截                                         | (interceptTypes: [InterceptType](#intercepttype)[]) => void | \n| highlightNodes | 高亮节点对应的单元格                                       | (nodes: [Node](/docs/api/basic-class/node)[]) => void | \n \n \n## Interaction \n \n| 参数    | 说明   | 类型                                        | 默认值   |        必选        | \n| -------- | ----------- |-------------------------------------------| -------- | ---------------- | \n| linkFields  | 标记字段为链接样式，用于外链跳转  | `string[]` \\| (meta: [Node](/docs/api/basic-class/node) \\| ViewMeta) => boolean    |    |    | \n| selectedCellsSpotlight               | 是否开启选中高亮聚光灯效果    | `boolean`                                 | `false`      |                  | \n| hoverHighlight                       | 鼠标悬停时高亮当前单元格，以及所对应的行头，列头<br/>rowHeader：是否高亮悬停格子所在行头<br/>colHeader：是否高亮悬停格子所在列头<br/>rowCells：是否高亮悬停格子所在行<br/>colCells：是否高亮悬停格子所在列<br/>true：同 `{rowHeader: true, colHeader: true, currentRow: true, currentCol: true}`                                                                                                                 | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, rowCells?: boolean, colCells?: boolean}`                                 | `true`                                                |                  | \n| hoverFocus                           | 鼠标悬停在当前单元格超过默认 800ms 后，保持当前高亮，显示 tooltip，悬停时间通过设置 `duration` 来控制   | `boolean  \\| {duration: number}`                                   |      `true`      |       | \n| hiddenColumnFields                   | 用于配置默认隐藏的列，透视表需要配置列头唯一 id, 明细表配置列头 field 字段即可                                                                                          | `string[]`                                |                                                       |                  | \n| enableCopy                           | 是否允许复制                                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| copyWithHeader                       | 复制数据是否带表头信息                                                                                                                            | `boolean`                                 | `false`                                               |                  | \n| copyWithFormat                       | 是否使用 field format 格式复制                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| customInteractions                   | 自定义交互 [详情](/docs/manual/advanced/interaction/custom)                                                                                | [CustomInteraction[]](#custominteraction) |                                                       |                  | \n| scrollSpeedRatio                     | 用于控制滚动速率，分水平和垂直两个方向，默认为 1                                                                                                              | [ScrollSpeedRatio](#scrollspeedratio)     |                                                       |                  | \n| autoResetSheetStyle                  | 用于控制点击表格外区域和按下 esc 键时是否重置交互状态                                                                                                          | `boolean`                                 | `true`                                                |                  | \n| resize                               | 用于控制 resize 热区是否显示     | `boolean`  \\| [ResizeInteractionOptions](#resizeinteractionoptions) |      `true`      |       | \n| brushSelection         | 是否允许单元格（包含行头，列头，数值单元格）刷选。    | `boolean` \\|  [BrushSelection](#brushSelection)  | `true`                         |     |  1.29.0 后支持 [BrushSelection](#brushSelection)   | \n| multiSelection                       | 是否允许多选 （包含行头，列头，数值单元格）                                                                                                                 | `boolean`                                 | `true`                                                |                  | \n| rangeSelection                       | 是否允许区间快捷多选                                                                                                                             | `boolean`                                 | `true`                                                |                  | \n| scrollbarPosition                    | 用于控制滚动条展示在内容区边缘还是画布边缘                                                                                                                  | `content \\| canvas`                                              |    `content`     |   | \n| eventListenerOptions                 | 事件监听函数 `addEventListener` 的 [可选项配置](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener), 可控制事件从冒泡阶段还是捕获阶段触发 | `false`                                   |                                                       | \n| selectedCellHighlight                | 选中格子后的高亮行为<br/>rowHeader：是否高亮选中格子所在行头<br/>colHeader：是否高亮选中格子所在列头<br/>currentRow：是否高亮选中格子所在行<br/>currentCol：是否高亮选中格子所在列<br/>true：同{rowHeader: true, colHeader: true}     | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, currentRow?: boolean, currentCol?: boolean }` | `false`                                               |                  | \n| overscrollBehavior                   | 控制滚动至边界的行为，可禁用浏览器的默认滚动行为。[详情](/docs/manual/advanced/interaction/basic/#修改滚动至边界行为)  | `auto \\| contain \\| none \\| null`  |  `auto` | \n| hoverAfterScroll                   | 滚动结束后是否在当前鼠标所处单元格自动触发悬停表现  | `boolean`  |  `false` | \n \n### CustomInteraction \n \n功能描述：自定义交互，继承 baseEvent:  [具体例子](/docs/manual/advanced/interaction/custom) \n \n| 参数        | 说明           | 类型                                              | 默认值 | 必选  | \n| ----------- | -------------- | ------------------------------------------------- | ------ | --- | \n| key         | 交互的唯一标识 | `string`                                          |        |   ✓   | \n| interaction |                | [InteractionConstructor](/docs/api/basic-class/interaction#interactionconstructor) |        |   ✓   | \n \n### ScrollSpeedRatio \n \n```js \ninterface ScrollSpeedRatio { \n  horizontal?: number; // 水平滚动速率，默认为 1 \n  vertical?: number; // 垂直滚动速率，默认为 1 \n} \n``` \n \n### ResizeInteractionOptions \n \n| 参数                 | 说明     | 类型    | 默认值 | 必选  | \n| -------------------- | ------- | ----------------- | ------ | --- | \n| rowCellVertical      | 是否开启行头垂直方向 resize 热区                                                   | `boolean`         | true   |       | \n| cornerCellHorizontal | 是否开启角头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellHorizontal    | 是否开启列头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellVertical      | 是否开启列头垂直方向 resize 热区 （列头隐藏时该配置无效）                                                   | `boolean`         | true   |       | \n| rowResizeType        | 用于控制行高 resize 时是同时对所有 Cell 生效，还是只对当前行生效。默认对所有行生效 | `all`\\| `current` | `all`  |       | \n| disable        | 用于控制行高 resize 是否生效 查看例子 | (resizeInfo: [S2CellType](/docs/api/components/sheet-component#resizeinfo)) => boolean |   |       | \n| visible        | 自定义当前单元格是否显示 resize 热区 | (cell: [S2CellType](/docs/api/basic-class/base-cell)) => boolean |   |       | \n \n### brushSelection \n \n| 参数              | 说明                  | 类型              | 默认值   | 必选  | \n| ----------------- | --------------------- | ----------------- | ------- | --- | \n| data            | 是否允许数值单元格刷选         | `boolean`         | true  |       | \n| row             | 是否允许行头单元格刷选（仅支持透视表） | `boolean`         | false |       | \n| col             | 是否允许列头单元格刷选 | `boolean`         | false |       | \n \n \n### InteractionConstructor \n \n```ts \nexport type InteractionConstructor = new ( \n  spreadsheet: SpreadSheet, \n) => BaseEvent; \n \n``` \n \n### BaseEvent \n \n```ts \nexport abstract class BaseEvent { \n  public spreadsheet: SpreadSheet; \n \n  constructor(spreadsheet: SpreadSheet) { \n    this.spreadsheet = spreadsheet; \n    this.bindEvents(); \n  } \n \n  public abstract bindEvents(): void; \n} \n``` \n \n### InterceptType \n \n```ts \nenum InterceptType { \n  HOVER = 'hover', \n  CLICK = 'click', \n  BRUSH_SELECTION = 'brushSelection', \n  ROW_BRUSH_SELECTION = 'rowBrushSelection', \n  COL_BRUSH_SELECTION = 'colBrushSelection', \n  MULTI_SELECTION = 'multiSelection', \n} \n``` \n \n### S2CellType \n \n```ts \ntype S2CellType<T extends SimpleBBox = ViewMeta> = \n  | DataCell \n  | HeaderCell \n  | ColCell \n  | CornerCell \n  | RowCell \n  | MergedCell \n  | BaseCell<T>; \n``` \n \n### SelectHeaderCellInfo \n \n```ts \ninterface SelectHeaderCellInfo { \n  cell: S2CellType<ViewMeta>; // 目标单元格 \n  isMultiSelection?: boolean; // 是否是多选 \n} \n``` \n \n### MergedCellInfo \n \n```ts \ninterface MergedCellInfo { \n  colIndex?: number; \n  rowIndex?: number; \n  showText?: boolean; \n} \n``` \n \n### InteractionStateInfo \n \n```ts \ninterface InteractionStateInfo { \n  stateName?: InteractionStateName; \n  cells?: CellMeta[]; \n  interactedCells?: S2CellType[]; \n  nodes?: Node[]; \n  force?: boolean; \n} \n``` \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n \n## HeaderActionIcon \n \n<description> **optional**  _object_ </description> \n \n功能描述：为表格行列头角头注册自定义操作 icon。 \n \n| 参数             | 说明        | 类型     | 默认值 | 必选 | 取值        |     版本     | \n| ---------------- | ----------- | ----------- | ------ | ---- | ----------- | --- | \n| iconNames        | 已经注册的 icon 名称，或用户通过 customSVGIcons 注册的 icon 名称 | `string[]`   |        | ✓    |     | | \n| belongsCell      | 需要增加操作图标的单元格名称   | `string`     |        | ✓    | 角头：`cornerCell`;<br>列头：`colCell`;<br>行头：`rowCell` | | \n| defaultHide      | 控制是否 hover 在对应单元格时才展示 icon, 默认始终展示  | `boolean \\| (meta: Node, iconName: string) => boolean`          | false  |      |  | `1.26.0` 支持配置为一个函数 | \n| displayCondition | 自定义展示条件，可根据当前单元格信息动态控制 icon 是否展示 | `(mete: Node, iconName: string) => boolean`         |        |      |  | `1.26.0` 回传 `iconName` 并按单个 icon 控制显隐 | \n| action           | icon 点击之后的执行函数 （已废弃，请使用 `onClick`)    | `(headerActionIconProps: HeaderActionIconProps) => void` |        |     |    |  | \n| onClick           | icon 点击之后的执行函数   | `(headerIconClickParams: HeaderIconClickParams) => void` |        |     |    | `1.26.0` | \n| onHover           | icon hover 开始及结束之后的执行函数   | `(headerIconHoverParams: HeaderIconHoverParams) => void` |        |     |    | `1.26.0` | \n \n​ \n \n## HeaderActionIconProps \n \n<description> **required**  _object_ </description> \n \n功能描述： 点击自定义操作 icon 后透视表返回的当前 icon 相关的信息 \n \n| 参数 | 功能描述 | 类型 | 默认值 | 必选 | \n| --- | --- | --- | --- | --- | \n| iconName | 当前 icon 名称 | string |  | ✓ | \n| meta |当前 cell 的 meta 信息| [Node](/api/basic-class/node) | | ✓ | \n| event |当前点击事件信息| Event | false | ✓ | \n \n## CustomSVGIcon \n \n<description> **optional**  _object_ </description> \n \n功能描述：用于用户注册自己的 icon 图标， 目前只支持 svg 格式 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| --- | --- | --- | --- | --- | \n| name | icon 名称 | string | - | ✓ | \n| svg | 目前支持三种格式的 svg 字符串：<br> 1、base 64<br>2、svg 本地文件<br>3、线上图片地址 | string | - | ✓ | \n \n \n",en:" \n \n## Interaction \n \n| parameter              | illustrate                                                                                                                                                                                                                                                   | type                                           | Defaults                                              |  required | \n| :--------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | :--------------------------------------------- | :---------------------------------------------------- | :-------: | \n| linkFields             | The mark field is a link style, which is used for external link jumps                                                                                                                                                                                        | `string[]`                                     |                                                       |           | \n| selectedCellsSpotlight | Whether to enable the selected highlight spotlight effect                                                                                                                                                                                                    | `boolean`                                      | `false`                                               |           | \n| hoverHighlight         | Highlight the current cell, and the corresponding row and column headers when the mouse hovers                                                                                                                                                               | `boolean\\| { rowHeader?: boolean, colHeader?: boolean, rowCells?: boolean, colCells?: boolean}`                                      | `true`                                                |           | \n| hoverFocus             | After the mouse hovers over the current cell for more than the default 800ms, it will keep the current highlight and display the tooltip. The hovering time is controlled by setting the `duration`                                                          | \\`boolean                                      | {duration: number}\\`                                  |   `true`  | \n| hiddenColumnFields     | It is used to configure the columns that are hidden by default. The pivot table needs to configure the unique id of the column header, and the detail table can be configured with the field field of the column header.                                     | `string[]`                                     |                                                       |           | \n| enableCopy             | Whether to allow copying                                                                                                                                                                                                                                     | `boolean`                                      | `false`                                               |           | \n| copyWithHeader         | Whether to copy data with header information                                                                                                                                                                                                                 | `boolean`                                      | `false`                                               |           | \n| copyWithFormat         | Whether to use the field format format to copy                                                                                                                                                                                                               | `boolean`                                      | `false`                                               |           | \n| customInteractions     | Customize interaction [details](/docs/manual/advanced/interaction/custom)                                                                                                                                                                                 | [CustomInteraction\\[\\]](#custominteraction)    |                                                       |           | \n| scrollSpeedRatio       | Used to control the scroll rate, divided into horizontal and vertical directions, the default is 1                                                                                                                                                           | [ScrollSpeedRatio](#scrollspeedratio)          |                                                       |           | \n| autoResetSheetStyle    | Used to control whether to reset the interactive state when clicking the area outside the table and pressing the esc key                                                                                                                                     | `boolean`                                      | `true`                                                |           | \n| resize                 | Used to control whether the resize hotspot is displayed                                                                                                                                                                                                      | `boolean` \\\\                                   | [ResizeInteractionOptions](#resizeinteractionoptions) |   `true`  | \n| brushSelection         | Whether to allow cells (including row headers, column headers, and value cells) to be selected. Row header, column header selection only supports pivot tables                                                                                               | `boolean \\| [BrushSelection](#brushSelection)` | `true`                                                |           | \n| multiSelection         | Whether to allow multiple selection (including row headers, column headers, and value cells)                                                                                                                                                                 | `boolean`                                      | `true`                                                |           | \n| rangeSelection         | Whether to allow quick multiple selection of intervals                                                                                                                                                                                                       | `boolean`                                      | `true`                                                |           | \n| scrollbarPosition      | Used to control whether the scroll bar is displayed on the edge of the content area or the edge of the canvas                                                                                                                                                | `content` \\\\                                   | `canvas`                                              | `content` | \n| eventListenerOptions   | [Optional configuration](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener) of the event listening function `addEventListener` , which can control whether the event is triggered from the bubbling phase or the capturing phase | `false`                                        |                                                       |           | \n| selectedCellHighlight  | Whether to highlight the column header where the grid is located                                                                                                                                                                                             | `boolean`                                      | `false`                                               |           | \n| overscrollBehavior     | Controls the behavior of scrolling to bounds, which disables the browser's default scrolling behavior. [details](/docs/manual/advanced/interaction/basic/#%E4%BF%AE%E6%94%B9%E6%BB%9A%E5%8A%A8%E8%87%B3%E8%BE%B9%E7%95%8C%E8%A1%8C%E4%B8%BA)              | `auto \\| contain \\| none \\| null`  |  `auto` | \n| hoverAfterScroll                   | Whether to automatically trigger hover performance in the cell where the mouse is currently located after scrolling  | `boolean`  |  `false` | \n \n### CustomInteraction \n \nFunction description: custom interaction, inherit baseEvent: [concrete example](/docs/manual/advanced/interaction/custom) \n \n| parameter   | illustrate                            | type                                                                                   | Defaults | required | \n| ----------- | ------------------------------------- | -------------------------------------------------------------------------------------- | -------- | :------: | \n| key         | unique identifier for the interaction | `string`                                                                               |          |     ✓    | \n| interaction |                                       | [Interaction Constructor](/docs/api/basic-class/interaction#interactionconstructor) |          |     ✓    | \n \n### ScrollSpeedRatio \n \n```js \ninterface ScrollSpeedRatio { \n  horizontal?: number; // 水平滚动速率，默认为 1 \n  vertical?: number; // 垂直滚动速率，默认为 1 \n} \n``` \n \n### ResizeInteractionOptions \n \n| parameter            | illustrate                                                                                                                                                       | type                                                                                       | Defaults | required | \n| -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ | -------- | :------: | \n| rowCellVertical      | Whether to open the line header vertical resize hot zone                                                                                                         | `boolean`                                                                                  | true     |          | \n| cornerCellHorizontal | Whether to enable the resize hotspot in the horizontal direction of the corner head                                                                              | `boolean`                                                                                  | true     |          | \n| colCellHorizontal    | Whether to enable the horizontal resize hotspot of the column header                                                                                             | `boolean`                                                                                  | true     |          | \n| colCellVertical      | Whether to enable the column header vertical resize hot zone (this configuration is invalid when the column header is hidden)                                    | `boolean`                                                                                  | true     |          | \n| rowResizeType        | It is used to control whether the row height resize will take effect for all Cells at the same time, or only for the current row. Applies to all rows by default | `all` \\| `current`                                                                         | `all`    |          | \n| disable              | It is used to control whether the row height resize is effective or not. View example                                                                            | (resizeInfo: [S2CellType](/docs/api/components/sheet-component#resizeinfo) ) => boolean |          |          | \n| visible              | Customize whether the current cell displays the resize hotspot                                                                                                   | (cell: [S2CellType](/docs/api/basic-class/base-cell) ) => boolean                       |          |          | \n \n### brushSelection \n \n| parameter | illustrate                                                                 | type      | Defaults | required | \n| --------- | -------------------------------------------------------------------------- | --------- | -------- | :------: | \n| data      | Whether to allow numerical cell selection                                  | `boolean` | true     |          | \n| row       | Whether to allow row header cell selection (only supports pivot tables)    | `boolean` | false    |          | \n| col       | Whether to allow column header cell selection (only supports pivot tables) | `boolean` | false    |          | \n \n \n"},childrenKey:"demos",order:2},{demos:[{id:"double-click-hide-columns",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/ukpGbSUqFz/double-click.gif",source:"import { TableSheet, BaseEvent, S2Event } from '@antv/s2';\n\nclass HiddenInteraction extends BaseEvent {\n  bindEvents() {\n    // 列头双击\n    this.spreadsheet.on(S2Event.COL_CELL_DOUBLE_CLICK, (event) => {\n      const cell = this.spreadsheet.getCell(event.target);\n      const meta = cell.getMeta();\n      this.spreadsheet.interaction.hideColumns([meta.field]);\n    });\n\n    this.spreadsheet.on(S2Event.LAYOUT_COLS_EXPANDED, (cell) => {\n      console.log('列头展开:', cell);\n    });\n\n    this.spreadsheet.on(\n      S2Event.LAYOUT_COLS_HIDDEN,\n      (currentHiddenColumnsInfo, hiddenColumnsDetail) => {\n        console.log('列头隐藏:', currentHiddenColumnsInfo, hiddenColumnsDetail);\n      },\n    );\n  }\n}\n\nclass ContextMenuInteraction extends BaseEvent {\n  bindEvents() {\n    // 禁止弹出右键菜单\n    this.spreadsheet.on(S2Event.GLOBAL_CONTEXT_MENU, (event) => {\n      event?.preventDefault?.();\n      console.log('右键', event);\n    });\n  }\n}\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        columns: ['type', 'province', 'city', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      tooltip: {\n        showTooltip: true,\n      },\n      interaction: {\n        customInteractions: [\n          {\n            key: 'HiddenInteraction',\n            interaction: HiddenInteraction,\n          },\n          {\n            key: 'ContextMenuInteraction',\n            interaction: ContextMenuInteraction,\n          },\n        ],\n      },\n    };\n\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"双击列头隐藏",en:"Double click hide columns"},filename:"double-click-hide-columns.ts",isNew:!1},{id:"row-col-hover-tooltip",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/c%24ICO1qvb/Kapture%2525202021-12-03%252520at%25252016.30.11.gif",source:"import { PivotSheet, BaseEvent, S2Event } from '@antv/s2';\n\nclass RowColumnHoverTooltipInteraction extends BaseEvent {\n  bindEvents() {\n    // 行头hover\n    this.spreadsheet.on(S2Event.ROW_CELL_HOVER, (event) => {\n      this.showTooltip(event);\n    });\n    // 列头hover\n    this.spreadsheet.on(S2Event.COL_CELL_HOVER, (event) => {\n      this.showTooltip(event);\n    });\n  }\n\n  showTooltip(event) {\n    const cell = this.spreadsheet.getCell(event.target);\n    const meta = cell.getMeta();\n    const content = meta.value;\n\n    this.spreadsheet.tooltip.show({\n      position: {\n        x: event.clientX,\n        y: event.clientY,\n      },\n      content,\n    });\n  }\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      tooltip: {\n        showTooltip: true,\n      },\n      interaction: {\n        customInteractions: [\n          {\n            key: 'RowColumnHoverTooltipInteraction',\n            interaction: RowColumnHoverTooltipInteraction,\n          },\n        ],\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"行列头悬停显示 tooltip",en:"Show tooltip when hover row or column"},filename:"row-col-hover-tooltip.ts",isNew:!1}],icon:"",id:"custom",title:{en:"Custom Interaction",zh:"自定义交互"},api:{zh:" \n \n## Interaction \n \n| 参数    | 说明   | 类型                                        | 默认值   |        必选        | \n| -------- | ----------- |-------------------------------------------| -------- | ---------------- | \n| linkFields  | 标记字段为链接样式，用于外链跳转  | `string[]` \\| (meta: [Node](/docs/api/basic-class/node) \\| ViewMeta) => boolean    |    |    | \n| selectedCellsSpotlight               | 是否开启选中高亮聚光灯效果    | `boolean`                                 | `false`      |                  | \n| hoverHighlight                       | 鼠标悬停时高亮当前单元格，以及所对应的行头，列头<br/>rowHeader：是否高亮悬停格子所在行头<br/>colHeader：是否高亮悬停格子所在列头<br/>rowCells：是否高亮悬停格子所在行<br/>colCells：是否高亮悬停格子所在列<br/>true：同 `{rowHeader: true, colHeader: true, currentRow: true, currentCol: true}`                                                                                                                 | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, rowCells?: boolean, colCells?: boolean}`                                 | `true`                                                |                  | \n| hoverFocus                           | 鼠标悬停在当前单元格超过默认 800ms 后，保持当前高亮，显示 tooltip，悬停时间通过设置 `duration` 来控制   | `boolean  \\| {duration: number}`                                   |      `true`      |       | \n| hiddenColumnFields                   | 用于配置默认隐藏的列，透视表需要配置列头唯一 id, 明细表配置列头 field 字段即可                                                                                          | `string[]`                                |                                                       |                  | \n| enableCopy                           | 是否允许复制                                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| copyWithHeader                       | 复制数据是否带表头信息                                                                                                                            | `boolean`                                 | `false`                                               |                  | \n| copyWithFormat                       | 是否使用 field format 格式复制                                                                                                                 | `boolean`                                 | `false`                                               |                  | \n| customInteractions                   | 自定义交互 [详情](/docs/manual/advanced/interaction/custom)                                                                                | [CustomInteraction[]](#custominteraction) |                                                       |                  | \n| scrollSpeedRatio                     | 用于控制滚动速率，分水平和垂直两个方向，默认为 1                                                                                                              | [ScrollSpeedRatio](#scrollspeedratio)     |                                                       |                  | \n| autoResetSheetStyle                  | 用于控制点击表格外区域和按下 esc 键时是否重置交互状态                                                                                                          | `boolean`                                 | `true`                                                |                  | \n| resize                               | 用于控制 resize 热区是否显示     | `boolean`  \\| [ResizeInteractionOptions](#resizeinteractionoptions) |      `true`      |       | \n| brushSelection         | 是否允许单元格（包含行头，列头，数值单元格）刷选。    | `boolean` \\|  [BrushSelection](#brushSelection)  | `true`                         |     |  1.29.0 后支持 [BrushSelection](#brushSelection)   | \n| multiSelection                       | 是否允许多选 （包含行头，列头，数值单元格）                                                                                                                 | `boolean`                                 | `true`                                                |                  | \n| rangeSelection                       | 是否允许区间快捷多选                                                                                                                             | `boolean`                                 | `true`                                                |                  | \n| scrollbarPosition                    | 用于控制滚动条展示在内容区边缘还是画布边缘                                                                                                                  | `content \\| canvas`                                              |    `content`     |   | \n| eventListenerOptions                 | 事件监听函数 `addEventListener` 的 [可选项配置](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener), 可控制事件从冒泡阶段还是捕获阶段触发 | `false`                                   |                                                       | \n| selectedCellHighlight                | 选中格子后的高亮行为<br/>rowHeader：是否高亮选中格子所在行头<br/>colHeader：是否高亮选中格子所在列头<br/>currentRow：是否高亮选中格子所在行<br/>currentCol：是否高亮选中格子所在列<br/>true：同{rowHeader: true, colHeader: true}     | `boolean \\| { rowHeader?: boolean, colHeader?: boolean, currentRow?: boolean, currentCol?: boolean }` | `false`                                               |                  | \n| overscrollBehavior                   | 控制滚动至边界的行为，可禁用浏览器的默认滚动行为。[详情](/docs/manual/advanced/interaction/basic/#修改滚动至边界行为)  | `auto \\| contain \\| none \\| null`  |  `auto` | \n| hoverAfterScroll                   | 滚动结束后是否在当前鼠标所处单元格自动触发悬停表现  | `boolean`  |  `false` | \n \n### CustomInteraction \n \n功能描述：自定义交互，继承 baseEvent:  [具体例子](/docs/manual/advanced/interaction/custom) \n \n| 参数        | 说明           | 类型                                              | 默认值 | 必选  | \n| ----------- | -------------- | ------------------------------------------------- | ------ | --- | \n| key         | 交互的唯一标识 | `string`                                          |        |   ✓   | \n| interaction |                | [InteractionConstructor](/docs/api/basic-class/interaction#interactionconstructor) |        |   ✓   | \n \n### ScrollSpeedRatio \n \n```js \ninterface ScrollSpeedRatio { \n  horizontal?: number; // 水平滚动速率，默认为 1 \n  vertical?: number; // 垂直滚动速率，默认为 1 \n} \n``` \n \n### ResizeInteractionOptions \n \n| 参数                 | 说明     | 类型    | 默认值 | 必选  | \n| -------------------- | ------- | ----------------- | ------ | --- | \n| rowCellVertical      | 是否开启行头垂直方向 resize 热区                                                   | `boolean`         | true   |       | \n| cornerCellHorizontal | 是否开启角头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellHorizontal    | 是否开启列头水平方向 resize 热区                                                   | `boolean`         | true   |       | \n| colCellVertical      | 是否开启列头垂直方向 resize 热区 （列头隐藏时该配置无效）                                                   | `boolean`         | true   |       | \n| rowResizeType        | 用于控制行高 resize 时是同时对所有 Cell 生效，还是只对当前行生效。默认对所有行生效 | `all`\\| `current` | `all`  |       | \n| disable        | 用于控制行高 resize 是否生效 查看例子 | (resizeInfo: [S2CellType](/docs/api/components/sheet-component#resizeinfo)) => boolean |   |       | \n| visible        | 自定义当前单元格是否显示 resize 热区 | (cell: [S2CellType](/docs/api/basic-class/base-cell)) => boolean |   |       | \n \n### brushSelection \n \n| 参数              | 说明                  | 类型              | 默认值   | 必选  | \n| ----------------- | --------------------- | ----------------- | ------- | --- | \n| data            | 是否允许数值单元格刷选         | `boolean`         | true  |       | \n| row             | 是否允许行头单元格刷选（仅支持透视表） | `boolean`         | false |       | \n| col             | 是否允许列头单元格刷选 | `boolean`         | false |       | \n \n \n",en:" \n \n## Interaction \n \n| parameter              | illustrate                                                                                                                                                                                                                                                   | type                                           | Defaults                                              |  required | \n| :--------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | :--------------------------------------------- | :---------------------------------------------------- | :-------: | \n| linkFields             | The mark field is a link style, which is used for external link jumps                                                                                                                                                                                        | `string[]`                                     |                                                       |           | \n| selectedCellsSpotlight | Whether to enable the selected highlight spotlight effect                                                                                                                                                                                                    | `boolean`                                      | `false`                                               |           | \n| hoverHighlight         | Highlight the current cell, and the corresponding row and column headers when the mouse hovers                                                                                                                                                               | `boolean\\| { rowHeader?: boolean, colHeader?: boolean, rowCells?: boolean, colCells?: boolean}`                                      | `true`                                                |           | \n| hoverFocus             | After the mouse hovers over the current cell for more than the default 800ms, it will keep the current highlight and display the tooltip. The hovering time is controlled by setting the `duration`                                                          | \\`boolean                                      | {duration: number}\\`                                  |   `true`  | \n| hiddenColumnFields     | It is used to configure the columns that are hidden by default. The pivot table needs to configure the unique id of the column header, and the detail table can be configured with the field field of the column header.                                     | `string[]`                                     |                                                       |           | \n| enableCopy             | Whether to allow copying                                                                                                                                                                                                                                     | `boolean`                                      | `false`                                               |           | \n| copyWithHeader         | Whether to copy data with header information                                                                                                                                                                                                                 | `boolean`                                      | `false`                                               |           | \n| copyWithFormat         | Whether to use the field format format to copy                                                                                                                                                                                                               | `boolean`                                      | `false`                                               |           | \n| customInteractions     | Customize interaction [details](/docs/manual/advanced/interaction/custom)                                                                                                                                                                                 | [CustomInteraction\\[\\]](#custominteraction)    |                                                       |           | \n| scrollSpeedRatio       | Used to control the scroll rate, divided into horizontal and vertical directions, the default is 1                                                                                                                                                           | [ScrollSpeedRatio](#scrollspeedratio)          |                                                       |           | \n| autoResetSheetStyle    | Used to control whether to reset the interactive state when clicking the area outside the table and pressing the esc key                                                                                                                                     | `boolean`                                      | `true`                                                |           | \n| resize                 | Used to control whether the resize hotspot is displayed                                                                                                                                                                                                      | `boolean` \\\\                                   | [ResizeInteractionOptions](#resizeinteractionoptions) |   `true`  | \n| brushSelection         | Whether to allow cells (including row headers, column headers, and value cells) to be selected. Row header, column header selection only supports pivot tables                                                                                               | `boolean \\| [BrushSelection](#brushSelection)` | `true`                                                |           | \n| multiSelection         | Whether to allow multiple selection (including row headers, column headers, and value cells)                                                                                                                                                                 | `boolean`                                      | `true`                                                |           | \n| rangeSelection         | Whether to allow quick multiple selection of intervals                                                                                                                                                                                                       | `boolean`                                      | `true`                                                |           | \n| scrollbarPosition      | Used to control whether the scroll bar is displayed on the edge of the content area or the edge of the canvas                                                                                                                                                | `content` \\\\                                   | `canvas`                                              | `content` | \n| eventListenerOptions   | [Optional configuration](https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener) of the event listening function `addEventListener` , which can control whether the event is triggered from the bubbling phase or the capturing phase | `false`                                        |                                                       |           | \n| selectedCellHighlight  | Whether to highlight the column header where the grid is located                                                                                                                                                                                             | `boolean`                                      | `false`                                               |           | \n| overscrollBehavior     | Controls the behavior of scrolling to bounds, which disables the browser's default scrolling behavior. [details](/docs/manual/advanced/interaction/basic/#%E4%BF%AE%E6%94%B9%E6%BB%9A%E5%8A%A8%E8%87%B3%E8%BE%B9%E7%95%8C%E8%A1%8C%E4%B8%BA)              | `auto \\| contain \\| none \\| null`  |  `auto` | \n| hoverAfterScroll                   | Whether to automatically trigger hover performance in the cell where the mouse is currently located after scrolling  | `boolean`  |  `false` | \n \n### CustomInteraction \n \nFunction description: custom interaction, inherit baseEvent: [concrete example](/docs/manual/advanced/interaction/custom) \n \n| parameter   | illustrate                            | type                                                                                   | Defaults | required | \n| ----------- | ------------------------------------- | -------------------------------------------------------------------------------------- | -------- | :------: | \n| key         | unique identifier for the interaction | `string`                                                                               |          |     ✓    | \n| interaction |                                       | [Interaction Constructor](/docs/api/basic-class/interaction#interactionconstructor) |          |     ✓    | \n \n### ScrollSpeedRatio \n \n```js \ninterface ScrollSpeedRatio { \n  horizontal?: number; // 水平滚动速率，默认为 1 \n  vertical?: number; // 垂直滚动速率，默认为 1 \n} \n``` \n \n### ResizeInteractionOptions \n \n| parameter            | illustrate                                                                                                                                                       | type                                                                                       | Defaults | required | \n| -------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ | -------- | :------: | \n| rowCellVertical      | Whether to open the line header vertical resize hot zone                                                                                                         | `boolean`                                                                                  | true     |          | \n| cornerCellHorizontal | Whether to enable the resize hotspot in the horizontal direction of the corner head                                                                              | `boolean`                                                                                  | true     |          | \n| colCellHorizontal    | Whether to enable the horizontal resize hotspot of the column header                                                                                             | `boolean`                                                                                  | true     |          | \n| colCellVertical      | Whether to enable the column header vertical resize hot zone (this configuration is invalid when the column header is hidden)                                    | `boolean`                                                                                  | true     |          | \n| rowResizeType        | It is used to control whether the row height resize will take effect for all Cells at the same time, or only for the current row. Applies to all rows by default | `all` \\| `current`                                                                         | `all`    |          | \n| disable              | It is used to control whether the row height resize is effective or not. View example                                                                            | (resizeInfo: [S2CellType](/docs/api/components/sheet-component#resizeinfo) ) => boolean |          |          | \n| visible              | Customize whether the current cell displays the resize hotspot                                                                                                   | (cell: [S2CellType](/docs/api/basic-class/base-cell) ) => boolean                       |          |          | \n \n### brushSelection \n \n| parameter | illustrate                                                                 | type      | Defaults | required | \n| --------- | -------------------------------------------------------------------------- | --------- | -------- | :------: | \n| data      | Whether to allow numerical cell selection                                  | `boolean` | true     |          | \n| row       | Whether to allow row header cell selection (only supports pivot tables)    | `boolean` | false    |          | \n| col       | Whether to allow column header cell selection (only supports pivot tables) | `boolean` | false    |          | \n \n \n"},childrenKey:"demos",order:3}],childrenKey:"examples"},{id:"analysis",title:{zh:"分析能力",en:"Analysis"},icon:"bulb",examples:[{demos:[{id:"basic",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/S4FZba2BY7/8e25e21c-28d3-4572-8585-f0b7435ab7c8.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/4347c2dd-6554-451b-9d44-15b04e5de657.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      selectedCellsSpotlight: true,\n      hoverHighlight: true,\n      tooltip: {\n        showTooltip: true,\n      },\n      interaction: {\n        enableCopy: true,\n      },\n      // 配置小计总计显示\n      totals: {\n        row: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['province'],\n        },\n        col: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['type'],\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"单度量值",en:"Single Value Totals"},filename:"basic.ts",isNew:!1},{id:"multiple-values",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/3SuoQrkTsR/5657d02f-8e7f-4fbc-8159-7a0e8f772462.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/total-group.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      // 从  @antv/s2 1.53.0-alpha 开始，如果是多度量的场景，我们期望同一个数据里就包含了多个 values 属性，即：\n      // [{province: \"四川\", city: \"成都\", type: \"商品\", price: 100, cost: 80}]\n      // 而不是：\n      // [{province: \"四川\", city: \"成都\", type: \"商品\", price: 100}, {province: \"四川\", city: \"成都\", type: \"商品\", price: 100}]\n      data,\n    };\n\n    \n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      selectedCellsSpotlight: true,\n      hoverHighlight: true,\n      tooltip: {\n        showTooltip: true,\n      },\n      interaction: {\n        enableCopy: true,\n      },\n      // 配置小计总计显示\n      totals: {\n        row: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['province'],\n        },\n        col: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['type'],\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"多度量值",en:"Multiple Value Totals"},filename:"multiple-values.ts",isNew:!1},{id:"dimension-group-row",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*1SDsRpTA_kQAAAAAAAAAAAAADmJ7AQ/original",source:"import { PivotSheet } from '@antv/s2';\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/total-group.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city', 'type'],\n        columns: [],\n        values: ['price' ,'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      // 配置行小计总计显示,且按维度分组（列小计总计同理）\n      totals: {\n        row: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['province'],\n          calcTotals: {\n            // 设置总计汇总计算方式为求和\n            aggregation: 'SUM',\n          },\n          calcSubTotals: {\n            // 设置小计汇总计算方式为求和\n            aggregation: 'SUM',\n          },\n          // 总计分组下，city 城市维度会出现分组\n          totalsGroupDimensions: ['city'],\n          // 小计维度下，type 类别维度下会出现分组\n          subTotalsGroupDimensions: ['type'],\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"行总计小计按维度分组",en:"Total Of Rows Grouped By Dimension"},filename:"dimension-group-row.ts",isNew:!1},{id:"dimension-group-col",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*5PTqQpXXCcsAAAAAAAAAAAAADmJ7AQ/original",source:"import { PivotSheet } from '@antv/s2';\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/total-group.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: [],\n        columns: ['province', 'city', 'type'],\n        values: ['price' ,'cost'],\n        valueInCols: false,\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      // 配置行小计总计显示,且按维度分组（列小计总计同理）\n      totals: {\n        col: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['province'],\n          calcTotals: {\n            // 设置总计汇总计算方式为求和\n            aggregation: 'SUM',\n          },\n          calcSubTotals: {\n            // 设置小计汇总计算方式为求和\n            aggregation: 'SUM',\n          },\n          // 总计分组下，city 城市维度会出现分组\n          totalsGroupDimensions: ['city'],\n          // 小计维度下，type 类别维度下会出现分组\n          subTotalsGroupDimensions: ['type'],\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"列总计小计按维度分组",en:"Total Of Columns Grouped By Dimension"},filename:"dimension-group-col.ts",isNew:!1},{id:"tree",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/fjQwAfmonL/b697e97f-8bfb-49fe-a123-195ce1aa8a82.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/4347c2dd-6554-451b-9d44-15b04e5de657.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      hierarchyType: 'tree',\n      tooltip: {\n        showTooltip: true,\n      },\n      interaction: {\n        enableCopy: true,\n        selectedCellsSpotlight: true,\n        hoverHighlight: true,\n      },\n      totals: {\n        row: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['province'],\n        },\n        col: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['type'],\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"树状模式",en:"Tree Totals"},filename:"tree.ts",isNew:!1},{id:"calculate",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/S4FZba2BY7/8e25e21c-28d3-4572-8585-f0b7435ab7c8.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json001215413-dev-S09001736318/s2/basic.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      // 配置小计总计显示\n      totals: {\n        row: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['province'],\n          calcTotals: {\n            aggregation: 'SUM',\n          },\n          calcSubTotals: {\n            aggregation: 'SUM',\n          },\n        },\n        col: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['type'],\n          calcTotals: {\n            aggregation: 'SUM',\n          },\n          calcSubTotals: {\n            aggregation: 'SUM',\n          },\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"配置计算汇总值",en:"Calculate Totals"},filename:"calculate.ts",isNew:!1},{id:"custom",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/S4FZba2BY7/8e25e21c-28d3-4572-8585-f0b7435ab7c8.png",source:"import { PivotSheet, EXTRA_FIELD } from '@antv/s2';\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n      ],\n      data,\n    };\n\n    const calcFunc = (query, data) => {\n      const sum = data.reduce((pre, next) => {\n        return pre + next[next[EXTRA_FIELD]];\n      }, 0);\n      return sum * 2;\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      // 配置小计总计显示\n      totals: {\n        row: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['province'],\n          calcTotals: {\n            calcFunc,\n          },\n          calcSubTotals: {\n            calcFunc,\n          },\n        },\n        col: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['type'],\n          calcTotals: {\n            calcFunc,\n          },\n          calcSubTotals: {\n            calcFunc,\n          },\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义计算汇总值",en:"Custom Calculate Totals"},filename:"custom.ts",isNew:!1}],icon:"",id:"totals",title:{en:"Totals",zh:"小计总计"},api:{zh:" \n \n## Totals \n \nobject **必选**,_default：null_ 功能描述： 小计总计配置 \n \n| 参数 | 说明   | 类型                                          | 必选  | 默认值 | \n| ---- | ------ | --------------------------------------------- | ---- | ------ | \n| row  | 行总计 | [Total](/docs/api/general/S2Options#total) |       |    | \n| col  | 列总计 | [Total](/docs/api/general/S2Options#total) |       |    | \n \n## Total \n \nobject **必选**,_default：null_ 功能描述： 小计总计配置 \n \n| 参数                | 说明                     | 类型         | 默认值  | 必选  | \n| ------------------- | ------------------------ | ------------ | ------- | ---- | \n| showGrandTotals     | 是否显示总计             | `boolean`    | `false` |      | \n| showSubTotals       | 是否显示小计。当配置为对象时，always 控制是否在子维度不足 2 个时始终展示小计，默认不展示             | `boolean \\| { always: boolean }`    | `false` |      | \n| subTotalsDimensions | 小计的汇总维度           | `string[]`   | `[]`    |      | \n| reverseLayout       | 总计布局位置，默认下或右 | `boolean`    | `false` |      | \n| reverseSubLayout    | 小计布局位置，默认下或右 | `boolean`    | `false` |      | \n| label               | 总计别名                 | `string`     |         |       | \n| subLabel            | 小计别名                 | `string`     |         |       | \n| calcTotals          | 自定义计算总计                 | [CalcTotals](#calctotals) |         |       | \n| calcSubTotals       | 自定义计算小计                 | [CalcTotals](#calctotals) |         |       | \n| totalsGroupDimensions                  | 总计的分组维度                                            |`string[]`    |                    |      | \n| subTotalsGroupDimensions               | 小计的分组维度                                            |  `string[]`            |                    |      | \n \n## CalcTotals \n \nobject **可选**,_default：null_ 功能描述： 计算小计总计配置 \n \n| 参数        | 说明       | 类型                                                                 | 必选  | 默认值 | \n| ----------- | ---------- | -------------------------------------------------------------------- | --- | ------ | \n| aggregation | 聚合方式   | `Aggregation.SUM` \\| `Aggregation.MIN` \\| `Aggregation.MAX` \\| `Aggregation.AVG`                                                                |       |        | \n| calcFunc    | 自定义方法 | `(query: Record<string, any>, arr: Record<string, any>[]) => number` |       |        | \n \n \n",en:" \n \n## Totals \n \nobject **必选**,_default：null_ 功能描述： 小计总计配置 \n \n| 参数 | 说明   | 类型                                          | 必选  | 默认值 | \n| ---- | ------ | --------------------------------------------- | ---- | ------ | \n| row  | 行总计 | [Total](/docs/api/general/S2Options#total) |       |    | \n| col  | 列总计 | [Total](/docs/api/general/S2Options#total) |       |    | \n \n## Total \n \nobject **必选**,_default：null_ 功能描述： 小计总计配置 \n \n| 参数                | 说明                     | 类型         | 默认值  | 必选  | \n| ------------------- | ------------------------ | ------------ | ------- | ---- | \n| showGrandTotals     | 是否显示总计             | `boolean`    | `false` |      | \n| showSubTotals       | 是否显示小计。当配置为对象时，always 控制是否在子维度不足 2 个时始终展示小计，默认不展示             | `boolean \\| { always: boolean }`    | `false` |      | \n| subTotalsDimensions | 小计的汇总维度           | `string[]`   | `[]`    |      | \n| reverseLayout       | 总计布局位置，默认下或右 | `boolean`    | `false` |      | \n| reverseSubLayout    | 小计布局位置，默认下或右 | `boolean`    | `false` |      | \n| label               | 总计别名                 | `string`     |         |       | \n| subLabel            | 小计别名                 | `string`     |         |       | \n| calcTotals          | 自定义计算总计                 | [CalcTotals](#calctotals) |         |       | \n| calcSubTotals       | 自定义计算小计                 | [CalcTotals](#calctotals) |         |       | \n| totalsGroupDimensions                  | 总计的分组维度                                            |`string[]`    |                    |      | \n| subTotalsGroupDimensions               | 小计的分组维度                                            |  `string[]`            |                    |      | \n \n## CalcTotals \n \nobject **可选**,_default：null_ 功能描述： 计算小计总计配置 \n \n| 参数        | 说明       | 类型                                                                 | 必选  | 默认值 | \n| ----------- | ---------- | -------------------------------------------------------------------- | --- | ------ | \n| aggregation | 聚合方式   | `Aggregation.SUM` \\| `Aggregation.MIN` \\| `Aggregation.MAX` \\| `Aggregation.AVG`                                                                |       |        | \n| calcFunc    | 自定义方法 | `(query: Record<string, any>, arr: Record<string, any>[]) => number` |       |        | \n \n \n"},childrenKey:"demos",order:0},{demos:[{id:"table-sort",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/9JQrrIVN8/2021-11-16%25252020.47.11.gif",source:"import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { orderBy } from 'lodash';\nimport { Button } from 'antd';\nimport { SheetComponent } from '@antv/s2-react';\nimport insertCss from 'insert-css';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch('https://assets.antv.antgroup.com/s2/basic-table-mode.json')\n  .then((res) => res.json())\n  .then((res) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    const s2DataConfig = {\n      fields: {\n        columns: ['province', 'city', 'type', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data: res,\n      sortParams: [\n        {\n          sortFieldId: 'price',\n          sortMethod: 'DESC',\n        },\n      ],\n    };\n\n    const App = () => {\n      const [dataCfg, setDataCfg] = useState(s2DataConfig);\n      return (\n        <>\n          <Button\n            onClick={() => {\n              setDataCfg({\n                ...dataCfg,\n                sortParams: [\n                  {\n                    sortFieldId: 'price',\n                    sortMethod: 'DESC',\n                  },\n                ],\n              });\n            }}\n          >\n            使用 sortMethod 排序\n          </Button>\n          <Button\n            onClick={() => {\n              setDataCfg({\n                ...dataCfg,\n                sortParams: [\n                  {\n                    sortFieldId: 'price',\n                    sortMethod: 'DESC',\n                    sortFunc: ({ data, sortFieldId, sortMethod }) => {\n                      return orderBy(data, [sortFieldId], [sortMethod]);\n                    },\n                  },\n                ],\n              });\n            }}\n          >\n            使用 sortFunc 自定义排序\n          </Button>\n          <Button\n            onClick={() => {\n              setDataCfg({\n                ...dataCfg,\n                sortParams: [\n                  {\n                    sortFieldId: 'city',\n                    sortBy: ['白山', '长春', '杭州', '舟山'],\n                  },\n                ],\n              });\n            }}\n          >\n            使用 sortBy 显示指定顺序\n          </Button>\n          <Button\n            onClick={() => {\n              setDataCfg({\n                ...dataCfg,\n                sortParams: [\n                  {\n                    sortFieldId: 'price',\n                    sortMethod: 'DESC',\n                    query: {\n                      province: '浙江',\n                    },\n                  },\n                ],\n              });\n            }}\n          >\n            使用 query 缩小排序范围\n          </Button>\n\n          <SheetComponent\n            dataCfg={dataCfg}\n            options={s2Options}\n            sheetType=\"table\"\n          />\n        </>\n      );\n    };\n\n    ReactDOM.render(<App />, document.getElementById('container'));\n  });\n\n// 我们用 insert-css 演示引入自定义样式\n// 推荐将样式添加到自己的样式文件中\n// 若拷贝官方代码，别忘了 npm install insert-css\ninsertCss(`\n.ant-btn {\n  margin-right: 10px;\n  margin-bottom: 10px;\n}\n`);\n",title:{zh:"明细表排序",en:"Table Sort"},filename:"table-sort.tsx",isNew:!1},{id:"group-sort",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/ljBJH8o6bT/group-sort.gif",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      showDefaultHeaderActionIcon: true, // 默认打开\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        sheetType=\"pivot\"\n        adaptive={false}\n        dataCfg={s2DataConfig}\n        options={s2Options}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"组内排序",en:"Group Sort"},filename:"group-sort.tsx",isNew:!1},{id:"advanced",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/2TmM6qOU%26V/advance.gif",source:"import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport insertCss from 'insert-css';\nimport 'antd/es/cascader/style/index.css';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const defaultSortParams = [\n      { sortFieldId: 'province', sortMethod: 'DESC' },\n      { sortFieldId: 'type', sortBy: ['纸张', '笔'] },\n      {\n        sortFieldId: 'city',\n        sortByMeasure: 'price',\n        sortMethod: 'DESC',\n      },\n    ];\n\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n      ],\n      data,\n      sortParams: defaultSortParams,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    const AdvancedSortDemo = () => {\n      const [dataCfg, setDataCfg] = useState(s2DataConfig);\n      const [sortParams, setSortParams] = React.useState(defaultSortParams);\n\n      return (\n        <div>\n          <SheetComponent\n            sheetType={'pivot'}\n            adaptive={false}\n            dataCfg={dataCfg}\n            options={s2Options}\n            header={{\n              advancedSortCfg: {\n                open: true,\n                sortParams,\n                onSortConfirm: (ruleValues, sortParams) => {\n                  setDataCfg({ ...dataCfg, sortParams });\n                  setSortParams(sortParams);\n                },\n              },\n            }}\n          />\n        </div>\n      );\n    };\n\n    ReactDOM.render(<AdvancedSortDemo />, document.getElementById('container'));\n  });\n\ninsertCss(`\n  .antv-s2-advanced-sort-btn.ant-btn svg path {\n    transition: all 0.3s cubic-bezier(0.645, 0.045, 0.355, 1);\n  }\n  .antv-s2-advanced-sort-btn.ant-btn:hover svg path, .antv-s2-advanced-sort-btn.ant-btn:focus svg path {\n    fill: #873bf4;\n  }\n  .ant-cascader-menu-item {\n    font-size: 12px;\n  }\n  .ant-col {\n    width: 100%;\n  }\n`);\n",title:{zh:"高级排序",en:"Advanced Sort"},filename:"advanced.tsx",isNew:!1},{id:"custom-method",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/jyNQ1WRgiD/7b1170ee-eb8e-477b-9596-a9135c4cab46.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n      sortParams: [\n        { sortFieldId: 'province', sortMethod: 'DESC' },\n        { sortFieldId: 'city', sortMethod: 'ASC' },\n        { sortFieldId: 'type', sortMethod: 'DESC' },\n      ],\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"根据升/降序方法排序",en:"Custom Method Sort"},filename:"custom-method.ts",isNew:!1},{id:"custom-list",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/fAlHqSzqIZ/977d4ac6-0c25-4cbf-85dd-1b9238e961ad.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n      sortParams: [\n        { sortFieldId: 'province', sortBy: ['吉林', '浙江'] },\n        { sortFieldId: 'city', sortBy: ['舟山', '杭州', '白山', '长春'] },\n        { sortFieldId: 'type', sortBy: ['纸张', '笔'] },\n      ],\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"根据维度列表排序",en:"Custom List Sort"},filename:"custom-list.ts",isNew:!1},{id:"custom-measure",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/IR3nwShqY4/8dc07b8a-1526-4078-b63c-23b7b6fddac0.png",source:"import { PivotSheet, EXTRA_FIELD } from '@antv/s2';\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n      sortParams: [\n        {\n          // type 依据 浙江-舟山-price 升序 排序\n          sortFieldId: 'type',\n          sortMethod: 'ASC',\n          sortByMeasure: 'price',\n          query: {\n            province: '浙江',\n            city: '舟山',\n            [EXTRA_FIELD]: 'price',\n          },\n        },\n        {\n          // city 依据 纸张-price 降序 排序\n          sortFieldId: 'city',\n          sortMethod: 'DESC',\n          sortByMeasure: 'price',\n          query: {\n            type: '纸张',\n            [EXTRA_FIELD]: 'price',\n          },\n        },\n      ],\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"根据度量值排序",en:"Custom Measure Sort"},filename:"custom-measure.ts",isNew:!1},{id:"custom-totals",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/eEfDYhd%24uz/da5c134b-c892-4ea8-9a01-6bf738212500.png",source:"import { PivotSheet, EXTRA_FIELD, TOTAL_VALUE } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/4347c2dd-6554-451b-9d44-15b04e5de657.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n      ],\n      data,\n      sortParams: [\n        {\n          // province 依据（ province - 小计 ）&（ 总计 - price ）& 升序 排序\n          sortFieldId: 'province',\n          sortMethod: 'ASC',\n          sortByMeasure: TOTAL_VALUE,\n          query: {\n            [EXTRA_FIELD]: 'price',\n          },\n        },\n        {\n          // type 依据 （ type - 小计 ）&（ price ）& 降序 排序\n          sortFieldId: 'type',\n          sortMethod: 'DESC',\n          sortByMeasure: TOTAL_VALUE,\n          query: {\n            province: '浙江',\n            [EXTRA_FIELD]: 'price',\n          },\n        },\n      ],\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      totals: {\n        row: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['province'],\n        },\n        col: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['type'],\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"根据汇总值排序",en:"Custom Totals Sort"},filename:"custom-totals.ts",isNew:!1},{id:"custom-sort-func",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/mkeXSyNZmk/1a50ecd2-1d81-4858-a106-c0c325e45a59.png",source:"import { PivotSheet, EXTRA_FIELD } from '@antv/s2';\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n      sortParams: [\n        {\n          // sortFieldId 为维度值时，params.data 为维度值列表\n          sortFieldId: 'province',\n          sortFunc: (params) => {\n            const { data } = params;\n            return data?.sort((a, b) => a?.localeCompare(b));\n          },\n        },\n        {\n          // 支持使用度量值进行自定义计算\n          sortFieldId: 'city',\n          sortByMeasure: 'price',\n          // 当使用 sortByMeasure 时，可以传入 query 定位数值列表\n          // 如下方限定 params.data 为 type=纸张, 数值=price 的数据\n          sortFunc: function (params) {\n            const { data, sortByMeasure, sortFieldId } = params || {};\n            return data\n              ?.sort((a, b) => b[sortByMeasure] - a[sortByMeasure])\n              ?.map((item) => item[sortFieldId]);\n          },\n          query: { type: '纸张', [EXTRA_FIELD]: 'price' },\n        },\n      ],\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"根据自定义方法排序",en:"Custom Function Sort"},filename:"custom-sort-func.ts",isNew:!1}],icon:"",id:"sort",title:{en:"Sort",zh:"表格排序"},api:{zh:" \n \n### SortParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`     | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）         | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`                              | -      |      | \n| type          | 组内排序用来显示 icon （透视表适用）          | `string`                              | -      |      | \n| sortFunc      | 自定义排序的 function                        | (params: [SortFuncParam](#sortfuncparam)) => `string[]` | -      |      | \n \n#### SortFuncParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`    | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）      | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`    | -      |      | \n| type          | 组内排序用来显示 icon（透视表适用）             | `string`                              | -      |      | \n| data          | 当前排序数据列表                            | `Array<string \\| Record<string, any>>` | -      |      | \n \n \n",en:" \n \n### SortParam \n \n| parameter     | illustrate                                                              | type                                                     | Defaults | required | \n| :------------ | :---------------------------------------------------------------------- | :------------------------------------------------------- | -------- | :------- | \n| sortFieldId   | Measure Id, the Id to be sorted                                         | `string`                                                 | -        | ✓        | \n| sortMethod    | sort by                                                                 | `ASC` \\| `DESC` \\| `asc` \\| `desc`                       | -        |          | \n| sortBy        | custom sorted list                                                      | `string[]`                                               | -        |          | \n| sortByMeasure | Sort by metric value (numeric value) (for pivot tables)                 | `string`                                                 | -        |          | \n| query         | Filter criteria, narrow the sort range such as: `{city:'白山'}`           | `Record<string, string>`                                 | -        |          | \n| type          | Sorting within the group is used to display the icon (for pivot tables) | `string`                                                 | -        |          | \n| sortFunc      | Function for custom sorting                                             | (params: [SortFuncParam](#sortfuncparam) ) => `string[]` | -        |          | \n \n#### SortFuncParam \n \n| parameter     | illustrate                                                                     | type                               | Defaults                | required | \n| :------------ | :----------------------------------------------------------------------------- | :--------------------------------- | ----------------------- | :------- | \n| sortFieldId   | Measure Id, the Id to be sorted                                                | `string`                           | -                       | ✓        | \n| sortMethod    | sort by                                                                        | `ASC` \\| `DESC` \\| `asc` \\| `desc` | -                       |          | \n| sortBy        | custom sorted list                                                             | `string[]`                         | -                       |          | \n| sortByMeasure | Sort by metric value (numeric value) (for pivot tables)                        | `string`                           | -                       |          | \n| query         | Filter criteria, narrow the sort range such as: `{city:'白山'}`                  | `Record<string, string>`           | -                       |          | \n| type          | Sorting within the group is used to display icons (applicable to pivot tables) | `string`                           | -                       |          | \n| data          | List of currently sorted data                                                  | \\`Array\\<string                    | Record\\<string, any>>\\` | -        | \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"text",screenshot:"https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*50NlSIHAly0AAAAAAAAAAAAAARQnAQ",source:"import { PivotSheet, EXTRA_FIELD, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: true,\n      },\n      conditions: {\n        text: [\n          // 行头\n          {\n            field: 'city',\n            mapping(value, record) {\n              return {\n                // fill 是文本字段标记下唯一必须的字段，用于指定文本颜色\n                fill: '#DB6BCF',\n              };\n            },\n          },\n          // 列头\n          {\n            field: 'sub_type',\n            mapping(value, record) {\n              return {\n                fill: '#025DF4',\n              };\n            },\n          },\n          // 单独控制角头\n          {\n            field: 'type',\n            mapping(value, record) {\n              if (value === '类别') {\n                return {\n                  fill: '#327039',\n                };\n              }\n            },\n          },\n          // 单独配置指标名\n          {\n            field: EXTRA_FIELD,\n            mapping(value, record) {\n              return {\n                fill: '#5B8FF9',\n              };\n            },\n          },\n          // 配置数据单元格\n          {\n            field: 'number',\n            mapping(value, record) {\n              return {\n                fill: '#2498D1',\n              };\n            },\n          },\n        ],\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"文本标记",en:"Text condition"},filename:"text.ts",isNew:!1},{id:"background",screenshot:"https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*izglQq5QCBAAAAAAAAAAAAAAARQnAQ",source:"import { PivotSheet, EXTRA_FIELD, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: false,\n      },\n      conditions: {\n        background: [\n          // 行头\n          {\n            field: 'city',\n            mapping(value, record) {\n              return {\n                // fill 是背景字段下唯一必须的字段，用于指定文本颜色\n                fill: '#DECFEA',\n              };\n            },\n          },\n          // 列头\n          {\n            field: 'sub_type',\n            mapping(value, record) {\n              return {\n                fill: '#BBDEDE',\n              };\n            },\n          },\n          // 单独控制角头\n          {\n            field: 'type',\n            mapping(value, record) {\n              if (value === '类别') {\n                return {\n                  fill: '#FCEBB9',\n                };\n              }\n            },\n          },\n          // 单独配置指标名\n          {\n            field: EXTRA_FIELD,\n            mapping(value, record) {\n              return {\n                fill: '#5B8FF9',\n              };\n            },\n          },\n          // 配置数据单元格\n          {\n            field: 'number',\n            mapping(value, record) {\n              return {\n                fill: '#CDDDFD',\n              };\n            },\n          },\n        ],\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"背景标记",en:"Background condition"},filename:"background.ts",isNew:!1},{id:"icon",screenshot:"https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*fSJ4RIhCddAAAAAAAAAAAAAAARQnAQ",source:"import { PivotSheet, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      showDefaultHeaderActionIcon: true,\n      interaction: {\n        hoverHighlight: true,\n      },\n      conditions: {\n        icon: [\n          // 行头\n          {\n            field: 'city',\n            mapping(value, record) {\n              return {\n                // icon 用于指定图标条件格式所使用的 icon 类型\n                icon: 'Trend',\n                fill: '#DB6BCF',\n              };\n            },\n          },\n          // 列头\n          {\n            field: 'sub_type',\n            mapping(value, record) {\n              if (value !== '子类别') {\n                return {\n                  icon: 'CellDown',\n                  fill: '#025DF4',\n                };\n              }\n            },\n          },\n          // 配置数据单元格\n          {\n            field: 'number',\n            position: 'left',\n            mapping(value, record) {\n              return {\n                icon: 'CellUp',\n                fill: '#2498D1',\n              };\n            },\n          },\n        ],\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"图标标记",en:"Icon condition"},filename:"icon.ts",isNew:!1},{id:"interval",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/ReYpm%24KcI2/b923ab47-cd74-48fe-aae2-1412091d4a31.png",source:"import { PivotSheet, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: true,\n      },\n      conditions: {\n        interval: [\n          {\n            field: 'number',\n            mapping(value, record) {\n              return {\n                fill: '#80BFFF',\n                // 自定义柱状图范围\n                isCompare: true,\n                maxValue: 8000,\n                minValue: 300,\n                fieldValue: value > 7900 ? 10 : value,\n              };\n            },\n          },\n        ],\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"柱状图标记",en:"Interval condition"},filename:"interval.ts",isNew:!1},{id:"table-text",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/jdTsPFc09l/4795d9f3-f55b-4575-99de-829e0e3ab3db.png",source:"import { S2Options, TableSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/986d48ce-cfdf-475d-980c-553762770928.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        columns: ['province', 'city', 'type', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: true,\n      },\n      conditions: {\n        text: [\n          {\n            field: 'price',\n            mapping(value, record) {\n              return {\n                fill: '#30BF78',\n              };\n            },\n          },\n          {\n            field: new RegExp('co*'),\n            mapping(value, record) {\n              return {\n                fill: '#F4664A',\n              };\n            },\n          },\n        ],\n      },\n    };\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"明细表文本标记",en:"Table text condition"},filename:"table-text.ts",isNew:!1},{id:"multi-background",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/lB3TIYL5Lk/624493b6-4d29-429a-a2f7-028d84e128e1.png",source:"import { PivotSheet, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: false,\n      },\n      conditions: {\n        text: [\n          {\n            field: 'number',\n            mapping(value, record) {\n              if (value >= 7000) {\n                return {\n                  fill: '#fff',\n                };\n              }\n            },\n          },\n        ],\n        background: [\n          {\n            field: 'number',\n            mapping(value, record) {\n              if (value <= 1397) {\n                return {\n                  fill: '#B8E1FF',\n                };\n              }\n              if (value <= 2797) {\n                return {\n                  fill: '#9AC5FF',\n                };\n              }\n              if (value <= 4191) {\n                return {\n                  fill: '#7DAAFF',\n                };\n              }\n              if (value <= 5588) {\n                return {\n                  fill: '#5B8FF9',\n                };\n              }\n              if (value <= 6985) {\n                return {\n                  fill: '#3D76DD',\n                };\n              }\n              return {\n                fill: '#085EC0',\n              };\n            },\n          },\n        ],\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"色块图",en:"Color block diagram"},filename:"multi-background.ts",isNew:!1},{id:"gradient-interval",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/y1IafbmC7W/c79f8906-ca2e-4bbd-b384-e663bde759e4.png",source:"import { PivotSheet, S2Options } from '@antv/s2';\n\n// 可借助 tinygradient 完成功能更全面的颜色过渡\nfunction getGradient(rate, startColor, endColor) {\n  function toGgb(color) {\n    color = color.slice(1);\n    const r = parseInt(color.substring(0, 2), 16);\n    const g = parseInt(color.substring(2, 4), 16);\n    const b = parseInt(color.substring(4, 6), 16);\n    return [r, g, b];\n  }\n  const start = toGgb(startColor);\n  const end = toGgb(endColor);\n  const r = start[0] + (end[0] - start[0]) * rate;\n  const g = start[1] + (end[1] - start[1]) * rate;\n  const b = start[2] + (end[2] - start[2]) * rate;\n  return `rgb(${r},${g},${b})`;\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: true,\n      },\n      conditions: {\n        interval: [\n          {\n            field: 'number',\n            mapping(value, record) {\n              const maxValue = 7789;\n              const minValue = 352;\n              const rage = (value - minValue) / (maxValue - minValue);\n\n              const color = getGradient(rage, '#95F0FF', '#3A9DBF');\n              return {\n                fill: `l(0) 0:#95F0FF 1:${color}`,\n                isCompare: true,\n                maxValue,\n              };\n            },\n          },\n        ],\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"渐变柱状图",en:"Interval gradient"},filename:"gradient-interval.ts",isNew:!1},{id:"multi-conditions",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/6FFtlY%240T/792a0865-b01d-4674-a3ef-98da6c5be285.png",source:"import { PivotSheet, S2Options } from '@antv/s2';\n\n// 可借助 tinygradient 完成功能更全面的颜色过渡\nfunction getGradient(rate, startColor, endColor) {\n  function toGgb(color) {\n    color = color.slice(1);\n    const r = parseInt(color.substring(0, 2), 16);\n    const g = parseInt(color.substring(2, 4), 16);\n    const b = parseInt(color.substring(4, 6), 16);\n    return [r, g, b];\n  }\n  const start = toGgb(startColor);\n  const end = toGgb(endColor);\n  const r = start[0] + (end[0] - start[0]) * rate;\n  const g = start[1] + (end[1] - start[1]) * rate;\n  const b = start[2] + (end[2] - start[2]) * rate;\n  return `rgb(${r},${g},${b})`;\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = dataCfg;\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: false,\n      },\n      conditions: {\n        text: [\n          {\n            field: 'number',\n            mapping(value, record) {\n              return {\n                fill: '#142C61',\n              };\n            },\n          },\n        ],\n        icon: [\n          {\n            field: 'number',\n            position: 'right',\n            mapping(value, record) {\n              return {\n                icon: 'Trend',\n                fill: '#142C61',\n              };\n            },\n          },\n        ],\n        background: [\n          {\n            field: 'number',\n            mapping(value, record) {\n              return {\n                fill: '#E0E9FD',\n              };\n            },\n          },\n        ],\n        interval: [\n          {\n            field: 'number',\n            mapping(value, record) {\n              const maxValue = 7789;\n              const minValue = 0;\n              const rage = (value - minValue) / (maxValue - minValue);\n              const color = getGradient(rage, '#5083F5', '#F7B46F');\n\n              return {\n                fill: `l(0) 0:#5083F5 1:${color}`,\n                isCompare: true,\n                maxValue,\n              };\n            },\n          },\n        ],\n      },\n    };\n\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n    s2.setThemeCfg({ name: 'colorful' });\n    s2.render();\n  });\n",title:{zh:"混合字段标记",en:"Multi-conditions"},filename:"multi-conditions.ts",isNew:!1},{id:"bidirectional-interval",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/oUICMHjOA/7fd723cb-fc2a-45a5-a0ab-a2840127a48a.png",source:"import { PivotSheet, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/4e49b398-5121-4f00-9607-4854aedd5a21.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: false,\n      },\n      conditions: {\n        interval: [\n          {\n            field: 'delta',\n            mapping(value, record) {\n              return {\n                fill: value >= 0 ? '#80BFFF' : '#F4664A',\n              };\n            },\n          },\n        ],\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"双向柱状图",en:"Bidirectional interval"},filename:"bidirectional-interval.ts",isNew:!1},{id:"intelligent-background",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*8aotQqx_OWUAAAAAAAAAAAAADmJ7AQ/original",source:"import { PivotSheet, S2Options } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: false,\n      },\n      conditions: {\n        background: [\n          {\n            field: 'number',\n            mapping(value, record) {\n              return {\n                // fill 是背景字段下唯一必须的字段，用于指定文本颜色\n                fill: '#000',\n                intelligentReverseTextColor: true,\n              };\n            },\n          },\n        ],\n      },\n    };\n\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"开启文字智能反色",en:"Intelligent background"},filename:"intelligent-background.ts",isNew:!1},{id:"table-text-row",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*JOuBSp89h3sAAAAAAAAAAAAADmJ7AQ/original",source:"import { S2Options, TableSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/986d48ce-cfdf-475d-980c-553762770928.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        columns: ['province', 'city', 'type', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data,\n    };\n\n    const s2Options: S2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: true,\n      },\n      conditions: {\n        text: [\n          {\n            // 使用正则, 匹配所有数据\n            field: /.*/,\n            mapping(value, record) {\n              console.log(value, record);\n\n              // 如果价格低于 10, 整行标记\n              if (record.price < 10) {\n                return {\n                  fill: '#30BF78',\n                };\n              }\n\n              // 如果价格高于 20, 整行标记\n              if (record.price > 20) {\n                return {\n                  fill: '#FF4D4F',\n                };\n              }\n\n              return '#000';\n            },\n          },\n        ],\n      },\n    };\n\n    // 透视表同理, 请举一反三\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"文本标记 - 标记整行",en:"Row text condition"},filename:"table-text-row.ts",isNew:!1}],icon:"",id:"conditions",title:{en:"Conditions",zh:"字段标记"},api:{zh:' \n \n## Conditions \n \n类型：`object`，**必选**，默认值：`{}` \n \n<description>功能描述： 配置字段标记。分为文本 (text)，背景 (background)，柱状图 (interval)，图标 (icon)。</description> \n \n| 参数       | 说明 | 类型            | 默认值 | 必选  | \n| ---------- | ---------- | ---------------  | ------ | ---- | \n| text       | 文本字段标记   | `Condition[]`     | - |            | \n| background | 背景字段标记   | `Condition[]`    | -      |            | \n| interval   | 柱状图字段标记 | `Condition[]`     | -      |            | \n| icon       | 图标字段标记   | `IconCondition[]` | -  |            | \n \n### Condition \n \n类型：`object`，**必选**，默认值：`undefined` \n \n<description>功能描述： 配置条件格式。包括文本 (text)，背景 (background)，柱状图 (interval)。</description> \n \n| 参数      | 说明                                | 类型         | 默认值      | 必选  | \n|---------|-----------------------------------|------------|----------|-----| \n| field   | 1. 字段 ID <br /> 2. 使用正则表达式匹配字段 ID | `string \\| RegExp` |     | ✓          | \n| mapping | 作用映射函数​                           | `function` |          | ✓   | \n \n#### mapping \n \n```typescript \ntype MappingFunction = ( \n  fieldValue: number | string | null, \n  data: Record<string, any> \n) => { \n  // 仅用于图标字段标记，可选 \n  icon?: string; \n \n  // 背景 ｜ 文本 ｜ 柱状图 | 图标 字段标记颜色填充，必选 \n  fill: string; \n \n  // 仅用于柱状图字段标记，可选 \n  isCompare?: boolean; \n  minValue?: number; \n  maxValue?: number; \n \n  // 仅用于背景字段标记，可选。（当背景颜色较暗，将文本颜色设置为白色。优先级低于 文本字段标记） \n  intelligentReverseTextColor?: boolean; \n} | null | undefined // 返回值为空时，表示当前字段不显示字段标记样式 \n \n``` \n \n**condition 用法示例：** \n \n```javascript \nconst options = { \n  conditions: { \n    text: [ \n      { \n        field: "province", \n        mapping: () => ({ \n          fill: "rgba(0, 0, 0, .65)", \n        }), \n      }, \n    ], \n    interval: [ \n      { \n        field: "sub_type", \n        mapping: () => { \n          return { \n            fill: "green", \n          }; \n        }, \n      }, \n    ], \n    background: [ \n      { \n        field: "count", \n        mapping: () => ({ \n          fill: "#ff00ff", \n        }), \n      }, \n    ], \n  }, \n}; \n \n``` \n \n### IconCondition \n \n类型：`object`，**必选**，默认值：`null` \n \n<description>功能描述： 配置图标 (icon) 条件格式。</description> \n \n| 参数     | 说明 | 类型     | 默认值  | 必选    | \n| -------- | ------------ | -------- | ------- | ----  | \n| field    | 字段 ID       | `string`   |                | ✓    | \n| position | icon 相较于文字的位置 | `left \\| right`   | `right` |         | \n| mapping  | 作用映射函数​ | `function` |                 | ✓    | \n \n**icon condition 用法示例：** \n \n```javascript \n const options = { \n  conditions: { \n    icon: [ \n      { \n        field: "profit", \n        position: "left", \n        mapping: () => { \n          return { \n            icon: "InfoCircle", \n            fill: "red", \n          }; \n        }, \n      }, \n    ], \n  }, \n}; \n \n``` \n \n \n',en:' \n \n## Conditions \n \nType: `object` , **required** , default value: `{}` \n \nFunction description: Configure field marking. Divided into text (text), background (background), histogram (interval), icon (icon). \n \n| parameter  | illustrate              | type              | Defaults | required | \n| ---------- | ----------------------- | ----------------- | -------- | -------- | \n| text       | text field tag          | `Condition[]`     | -        |          | \n| background | background field tag    | `Condition[]`     | -        |          | \n| interval   | Histogram Field Markers | `Condition[]`     | -        |          | \n| icon       | Icon Field Marker       | `IconCondition[]` | -        |          | \n \n### condition \n \nType: `object` , **required** , default value: `undefined` \n \nFunction description: Configure conditional formatting. Including text (text), background (background), histogram (interval). \n \n| parameter | illustrate                                                | type        | Defaults | required | \n| --------- | --------------------------------------------------------- | ----------- | -------- | -------- | \n| field     | 1. Field ID 2. Use regular expressions to match field IDs | `string` \\\\ | `RegExp` |          | \n| mapping   | role mapping function​                                    | `function`  |          | ✓        | \n \n#### mapping \n \n```typescript \ntype MappingFunction = ( \n  fieldValue: number | string | null, \n  data: Record<string, any> \n) => { \n  // 仅用于图标字段标记，可选 \n  icon?: string; \n \n  // 背景 ｜ 文本 ｜ 柱状图 | 图标 字段标记颜色填充，必选 \n  fill: string; \n \n  // 仅用于柱状图字段标记，可选 \n  isCompare?: boolean; \n  minValue?: number; \n  maxValue?: number; \n   \n  // 仅用于背景字段标记，可选。（当背景颜色较暗，将文本颜色设置为白色。优先级低于 文本字段标记） \n  intelligentReverseTextColor?: boolean; \n} | null | undefined // 返回值为空时，表示当前字段不显示字段标记样式 \n``` \n \n**Example usage of condition:** \n \n```javascript \nconst options = { \n  conditions: { \n    text: [ \n      { \n        field: "province", \n        mapping: () => ({ \n          fill: "rgba(0, 0, 0, .65)", \n        }), \n      }, \n    ], \n    interval: [ \n      { \n        field: "sub_type", \n        mapping: () => { \n          return { \n            fill: "green", \n          }; \n        }, \n      }, \n    ], \n    background: [ \n      { \n        field: "count", \n        mapping: () => ({ \n          fill: "#ff00ff", \n        }), \n      }, \n    ], \n  }, \n}; \n``` \n \n### IconCondition \n \nType: `object` , **required** , default value: `null` \n \nFunction description: Configure icon (icon) conditional formatting. \n \n| parameter | illustrate                                    | type              | Defaults | required | \n| --------- | --------------------------------------------- | ----------------- | -------- | -------- | \n| field     | Field ID                                      | `string`          |          | ✓        | \n| position  | The position of the icon relative to the text | `left` \\| `right` | `right`  |          | \n| mapping   | role mapping function​                        | `function`        |          | ✓        | \n \n**Example of icon condition usage:** \n \n```javascript \n const options = { \n  conditions: { \n    icon: [ \n      { \n        field: "profit", \n        position: "left", \n        mapping: () => { \n          return { \n            icon: "InfoCircle", \n            fill: "red", \n          }; \n        }, \n      }, \n    ], \n  }, \n}; \n``` \n \n \n'},childrenKey:"demos",order:2},{demos:[{id:"get-cell-data",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/S4FZba2BY7/8e25e21c-28d3-4572-8585-f0b7435ab7c8.png",source:"import { PivotSheet, EXTRA_FIELD } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/4347c2dd-6554-451b-9d44-15b04e5de657.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      selectedCellsSpotlight: true,\n      hoverHighlight: true,\n      tooltip: {\n        showTooltip: true,\n      },\n      interaction: {\n        enableCopy: true,\n      },\n      // 配置小计总计显示\n      totals: {\n        row: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['province'],\n        },\n        col: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['type'],\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n    s2.render();\n\n    // 获取明细单元格\n    const cellData = s2.dataSet.getCellData({\n      query: {\n        province: '浙江',\n        city: '杭州',\n        type: '笔',\n        [EXTRA_FIELD]: 'price',\n      },\n    });\n\n    console.log('单个数据', cellData);\n\n    // 获取小计数据\n    const subTotalData = s2.dataSet.getCellData({\n      query: {\n        province: '浙江',\n        type: '笔',\n        [EXTRA_FIELD]: 'price',\n      },\n      isTotals: true,\n    });\n\n    console.log('小计数据', subTotalData);\n  });\n",title:{zh:"获取单个单元格数据",en:"Get Single Cell Data"},filename:"get-cell-data.ts",isNew:!1},{id:"get-multi-data",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/S4FZba2BY7/8e25e21c-28d3-4572-8585-f0b7435ab7c8.png",source:"import { PivotSheet, EXTRA_FIELD, QueryDataType } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/4347c2dd-6554-451b-9d44-15b04e5de657.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n      ],\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      selectedCellsSpotlight: true,\n      hoverHighlight: true,\n      tooltip: {\n        showTooltip: true,\n      },\n      interaction: {\n        enableCopy: true,\n      },\n      // 配置小计总计显示\n      totals: {\n        row: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['province'],\n        },\n        col: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          reverseLayout: true,\n          reverseSubLayout: true,\n          subTotalsDimensions: ['type'],\n        },\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n    s2.render();\n\n    // 获取所有浙江下的数据\n    const all = s2.dataSet.getMultiData(\n      {\n        province: '浙江',\n        [EXTRA_FIELD]: 'price',\n      },\n      {\n        queryType: QueryDataType.All,\n      },\n    );\n\n    console.log('所有数据', all);\n\n    // 获取所有浙江下的明细数据\n    const detail = s2.dataSet.getMultiData(\n      {\n        province: '浙江',\n        [EXTRA_FIELD]: 'price',\n      },\n      {\n        queryType: QueryDataType.DetailOnly,\n      },\n    );\n\n    console.log('所有明细数据', detail);\n  });\n",title:{zh:"获取多个单元格数据",en:"Get Multi Cell Data"},filename:"get-multi-data.ts",isNew:!1}],icon:"",id:"get-data",title:{en:"Get Cell Data",zh:"获取单元格数据"},api:{zh:" \n \n功能描述：表格数据集。[详情](https://github.com/antvis/S2/blob/master/packages/s2-core/src/data-set/pivot-data-set.ts) \n \n```ts \ns2.dataSet.getFieldName('type') \n``` \n \n| 参数                                   | 说明                               | 类型                                                                                                                                                                                         | 版本                                        | \n| -------------------------------------- | ---------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------- | \n| fields                                 | 字段信息                           | () => [Fields](/docs/api/general/S2DataConfig#fields)                                                                                                                                        |                                             | \n| meta                                   | 字段元信息，包含有字段名、格式化等 | () => [Meta[]](/docs/api/general/S2DataConfig#meta)                                                                                                                                          |                                             | \n| originData                             | 原始数据                           | () => [DataType[]](#datatype)                                                                                                                                                                |                                             | \n| totalData                              | 汇总数据                           | () => [DataType[]](#datatype)                                                                                                                                                                |                                             | \n| indexesData                            | 多维索引数据                       | () => [DataType[]](#datatype)                                                                                                                                                                |                                             | \n| sortParams                             | 排序配置                           | () => [SortParams](/docs/api/general/S2DataConfig#sortparams)                                                                                                                                |                                             | \n| spreadsheet                            | 表格实例                           | () => [SpreadSheet](/docs/api/basic-class/spreadsheet)                                                                                                                                       |                                             | \n| getFieldMeta                           | 获取字段元数据信息                 | (field: string, meta?: [Meta[]](/docs/api/general/S2DataConfig#meta)) => [Meta](/docs/api/general/S2DataConfig#meta)                                                                         |                                             | \n| getFieldName                           | 获取字段名                         | `() => string`                                                                                                                                                                               |                                             | \n| getFieldFormatter                      | 获取字段格式化函数                 | `() => (v: string) => unknown`                                                                                                                                                               |                                             | \n| getFieldDescription                    | 获取字段描述                       | `() => string`                                                                                                                                                                               |                                             | \n| setDataCfg                             | 设置数据配置                       | `<T extends boolean = false>(dataCfg: T extends true ?` [`S2DataConfig`](/docs/api/general/S2DataConfig) `: Partial<`[`S2DataConfig`](/docs/api/general/S2DataConfig)`>, reset?: T) => void` | `reset` 参数需在 `@antv/s2-v1.34.0`版本使用 | \n| getDisplayDataSet                      | 获取当前显示的数据集               | () => [DataType[]](#datatype)                                                                                                                                                                |                                             | \n| getDimensionValues                     | 获取维值                           | (filed: string, query?: [DataType](#datatype) ) => string[]                                                                                                                                  |                                             | \n| getCellData                            | 获取单个的单元格数据               | (params: [CellDataParams](#celldataparams)) => [DataType[]](#datatype)                                                                                                                       |                                             | \n| getMultiData                           | 获取批量的单元格数据               | (query: [DataType](#datatype),params?: [MultiDataParams](#multidataparams)) => [DataType[]](#datatype)                                                                                       |                                             | \n| <strike>getMultiData<strike>  (已废弃) | 获取批量的单元格数据               | (query: [DataType](#datatype), isTotals?: boolean, isRow?: boolean, drillDownFields?: string[], includeTotalData:boolean) => [DataType[]](#datatype)                                         |                                             | \n| moreThanOneValue                       | 是否超过 1 个数值                  | () => [ViewMeta](#viewmeta)                                                                                                                                                                  |                                             | \n| isEmpty                                | 是否为空数据集                     | () => `boolean`                                                                                                                                                                              | `@antv/s2-v1.51.1`                          | \n \n### DataType \n \n```ts \ntype DataType = Record<string, unknown>; \n``` \n \n### CellDataParams \n \n```ts \ninterface CellDataParams { \n  // search query \n  query: DataType; \n  isTotals?: boolean; \n  // use in part drill-down \n  rowNode?: Node; \n  // mark row's cell \n  isRow?: boolean; \n} \n``` \n \n### MultiDataParams \n \n```ts \ninterface MultiDataParams { \n  drillDownFields?: string[]; // 下钻维度 \n  queryType?: QueryDataType; // 获取数据的类型，默认获取所有的数据 \n} \n \nenum QueryDataType { \n  All = 'all', // 获取所有的数据 \n  DetailOnly = 'detailOnly', // 只需要明细数据 \n} \n``` \n \n \n",en:" \nFunction description: tabular data set. [details](https://github.com/antvis/S2/blob/master/packages/s2-core/src/data-set/pivot-data-set.ts) \n \n```ts \ns2.dataSet.xx() \n``` \n \n| parameter                                 | illustrate                                                     | type                                                                                                                                                                                         | Version                                                              | \n| ----------------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------- | \n| fields                                    | field information                                              | () => [Fields](/docs/api/general/S2DataConfig#fields)                                                                                                                                        |                                                                      | \n| meta                                      | Field meta information, including field name, formatting, etc. | () => [Meta\\[\\]](/docs/api/general/S2DataConfig#meta)                                                                                                                                        |                                                                      | \n| originData                                | Raw data                                                       | () => [DataType\\[\\]](#datatype)                                                                                                                                                              |                                                                      | \n| totalData                                 | summary data                                                   | () => [DataType\\[\\]](#datatype)                                                                                                                                                              |                                                                      | \n| indexesData                               | multidimensional index data                                    | () => [DataType\\[\\]](#datatype)                                                                                                                                                              |                                                                      | \n| sortParams                                | sort configuration                                             | () => [SortParams](/docs/api/general/S2DataConfig#sortparams)                                                                                                                                |                                                                      | \n| spreadsheet                               | Form example                                                   | () => [SpreadSheet](/docs/api/basic-class/spreadsheet)                                                                                                                                       |                                                                      | \n| getFieldMeta                              | Get field metadata information                                 | (field: string, meta?: [Meta\\[\\]](/docs/api/general/S2DataConfig#meta) ) => [Meta](/docs/api/general/S2DataConfig#meta)                                                                      |                                                                      | \n| getFieldName                              | get field name                                                 | `() => string`                                                                                                                                                                               |                                                                      | \n| getFieldFormatter                         | Get the field formatting function                              | `() => (v: string) => unknown`                                                                                                                                                               |                                                                      | \n| getFieldDescription                       | Get field description                                          | `() => string`                                                                                                                                                                               |                                                                      | \n| setDataCfg                                | Set data configuration                                         | `<T extends boolean = false>(dataCfg: T extends true ?` [`S2DataConfig`](/docs/api/general/S2DataConfig) `: Partial<`[`S2DataConfig`](/docs/api/general/S2DataConfig)`>, reset?: T) => void` | The `reset` parameter needs to be used in `@antv/s2-v1.34.0` version | \n| getDisplayDataSet                         | Get the currently displayed dataset                            | () => [DataType\\[\\]](#datatype)                                                                                                                                                              |                                                                      | \n| getDimensionValues                        | get dimension value                                            | (filed: string, query?: [DataType](#datatype) ) => string\\[]                                                                                                                                 |                                                                      | \n| getCellData                               | Get a single cell data                                         | (params: [CellDataParams](#celldataparams) ) => [DataType\\[\\]](#datatype)                                                                                                                    |                                                                      | \n| getMultiData                              | Get bulk cell data                                             | (query: [DataType](#datatype),params?: [MultiDataParams](#multidataparams)) => [DataType[]](#datatype)                                                                                       |                                                                      | \n| <strike>getMultiData</strike>(deprecated) | Get bulk cell data                                             | (query: [DataType](#datatype) , isTotals?: boolean, isRow?: boolean, drillDownFields?: string\\[], includeTotalData:boolean) => [DataType\\[\\]](#datatype)                                     |                                                                      | \n| moreThanOneValue                          | Is there more than 1 value                                     | () => [ViewMeta](#viewmeta)                                                                                                                                                                  |                                                                      | \n \n### DataType \n \n```ts \ntype DataType = Record<string, unknown>; \n``` \n \n### CellDataParams \n \n```ts \ninterface CellDataParams { \n  // search query \n  query: DataType; \n  isTotals?: boolean; \n  // use in part drill-down \n  rowNode?: Node; \n  // mark row's cell \n  isRow?: boolean; \n} \n``` \n \n### MultiDataParams \n \n```ts \ninterface MultiDataParams { \n  drillDownFields?: string[]; // drill down dimensions \n  queryType?: QueryDataType; // query type, get all data by default \n} \n \nenum QueryDataType { \n  All = 'all', // get all data, include total data \n  DetailOnly = 'detailOnly', // only get detail data \n} \n``` \n \n \n"},childrenKey:"demos",order:3}],childrenKey:"examples"},{id:"react-component",title:{zh:"React 组件",en:"React Component"},icon:"build",examples:[{demos:[{id:"pivot",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/6h9nmPdj9b/e4163ac4-2d17-4efd-8556-d5e32fd15b25.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n      pagination: {\n        // API: https://ant.design/components/pagination-cn/#API\n        pageSize: 4,\n        current: 1,\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent dataCfg={dataCfg} options={s2Options} showPagination />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"透视表分页",en:"PivotSheet pagination"},filename:"pivot.tsx",isNew:!1},{id:"table",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/MK67LrYwRh/5e972478-06e4-40fc-bcbe-21c05fd144e5.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch('https://assets.antv.antgroup.com/s2/basic-table-mode.json')\n  .then((res) => res.json())\n  .then((res) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n      pagination: {\n        pageSize: 5,\n        current: 2,\n      },\n    };\n\n    const s2DataConfig = {\n      fields: {\n        columns: ['province', 'city', 'type', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data: res,\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={s2DataConfig}\n        options={s2Options}\n        sheetType=\"table\"\n        showPagination={{\n          onChange: (current, pageSize) => {\n            console.log(current, pageSize);\n          },\n          onShowSizeChange: (current, pageSize) => {\n            console.log(current, pageSize);\n          },\n        }}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"明细表分页",en:"TableSheet pagination"},filename:"table.tsx",isNew:!1}],icon:"",id:"pagination",title:{en:"Pagination",zh:"分页组件"},api:{zh:" \n \n# React 表组件 \n \n基于 `@antv/s2` 封装的 `React` 版开箱即用的组件 `<SheetComponent />` \n \n## SpreadsheetProps \n \n功能描述： React SheetComponent 组件的 props 参数 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 <br> 3. `gridAnalysis`: 网格分析表 <br/> 4. `strategy`: 趋势分析表 | `pivot \\| table \\| gridAnalysis \\| strategy` \\| `pivot` |  | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| dataCfg | 透视表数据映射相关配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions) |  | ✓ | \n| partDrillDown | 维度下钻相关属性 | [PartDrillDown](/docs/api/components/drill-down) |  |  | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (current:number, pageSize: number) => void,<br>onChange?: (current:number, pageSize: number) => void <br>} | `false` |  | \n| themeCfg | 自定义透视表主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n| header | 表头配置项 | [HeaderCfgProps](/docs/api/components/header) |  |  | \n| getSpreadSheet | 获取表实例 (1.29.0 已废弃，请使用 `onMounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onRangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| onRowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellTrendIconClick | 数值单元格的趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onDataCellBrushSelection | 数值单元格刷选事件 | ( dataCells: [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onDataCellSelectMove | 数值单元格键盘方向键移动事件 | (metas: CellMeta[]) => void |  |  | \n| onDataCellEditEnd | 数值单元格编辑完成（暂只支持编辑表） | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onCornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| onRangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| onRangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| onLayoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| onLayoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| onLayoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onLayoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| onCollapseRowsAll | 树状模式下收起全部的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| onBeforeRender | 开始 render 前的事件 | () => void; |  |  | \n| onAfterRender | render 完成的事件 | () => void; |  |  | \n| onMounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onDestroy | 表格销毁事件 | () => void; |  |  | \n| onLayoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseUp | resize 热区鼠标松开事件 | ( event: `MouseEvent`,  resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseMove | resize 热区鼠标移动事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onKeyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| onKeyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| onCopied | 复制事件 | (copyData: string) => void |  |  | \n| onActionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| onActionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| onContextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| onMouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| onSelected | 单元格选中事件 | (cells: ( [Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onReset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| onLinkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| onScroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: [ColCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n| onRowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: [RowCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n \n## SheetComponentOptions \n \nReact 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有两点不同 \n \n- tooltip 的 content 从 `Element | string` 变为了 `ReactNode`, 即可以是任意的 `jsx` 元素 \n- 分页配置从 S2 的分页配置 变为了 `antd` 的分页配置，即支持对 `antd` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps as AntdPaginationProps } from 'antd'; \n \ntype SheetComponentOptions = S2Options< \n  React.ReactNode, \n  Pagination & AntdPaginationProps \n>; \n``` \n \n<br/> \n \n# Vue 表组件 \n \n基于 `@antv/s2` 层封装的 `Vue 3.0` 版开箱即用的组件 `<SheetComponent />` \n \n## props \n \n功能描述： Vue SheetComponent 组件的 props，如 `<SheetComponent :sheetType=\"pivot\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 | `pivot | table` | `pivot` |  | \n| dataCfg | 透视表数据映射配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions-1) |  | ✓ | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (pageSize: number) => void,<br>onChange?: (current: number) => void <br>} | `false` |  | \n| themeCfg | 自定义表格主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n \n## events \n \n功能描述： Vue SheetComponent 组件的 events，`<SheetComponent @rowCellClick=\"handleRowCellClick\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions-1)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| getSpreadSheet | 获取表实例 (1.4.0 已废弃，请使用 `mounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| rangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| rowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellTrendIconClick | 数值趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| dataCellBrushSelection | 数值单元格刷选事件 | (brushRangeDataCells: ( [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| dataCellScroll | 数值单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| cornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| rangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| rangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| layoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| layoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| layoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| layoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| collapseRowsAll | 树状模式下收起全部的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| beforeRender | 开始 render 前的事件 | () => void; |  |  | \n| afterRender | render 完成的事件 | () => void; |  |  | \n| mounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| destroy | 表格销毁事件 | () => void; |  |  | \n| layoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseUp | resize 热区鼠标松开事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseMove | resize 热区鼠标移动事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| keyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| keyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| copied | 复制事件 | (copyData: string) => void |  |  | \n| actionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| actionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| contextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| mouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| selected | 单元格选中事件 | ( cells: ([Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| reset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| linkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| scroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: ColCell[]) => void; |  |  | \n| rowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: RowCell[]) => void; |  |  | \n \n## SheetComponentOptions \n \nVue 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有一点不同 \n \n- 分页配置从 S2 的分页配置 变为了 `antd-vue` 的分页配置，即支持对 `antd-vue` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps } from 'ant-design-vue'; \n \ntype SheetComponentOptions = S2Options< \n  Element | string, \n  Pagination & PaginationProps \n>; \n``` \n \n# 公共对象 \n \n## TargetCellInfo \n \n功能描述：交互回调函数的返回信息。 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| target | 交互作用对象 | [S2CellType](/docs/api/basic-class/base-cell) |  |  | \n| event | 事件 | [Event](#) |  |  | \n| viewMeta | 当前节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n \n \n### SortParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`     | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）         | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`                              | -      |      | \n| type          | 组内排序用来显示 icon （透视表适用）          | `string`                              | -      |      | \n| sortFunc      | 自定义排序的 function                        | (params: [SortFuncParam](#sortfuncparam)) => `string[]` | -      |      | \n \n#### SortFuncParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`    | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）      | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`    | -      |      | \n| type          | 组内排序用来显示 icon（透视表适用）             | `string`                              | -      |      | \n| data          | 当前排序数据列表                            | `Array<string \\| Record<string, any>>` | -      |      | \n \n \n## CellScrollPosition \n \n功能描述：单元格滚动的位置信息。 \n \n| 参数        | 说明         | 类型   | 默认值 | 必选 | \n| ---------- | ----------- | ----- | ----- | ---- | \n| scrollX     | 水平方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n| scrollY     | 垂直方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n \n## HiddenColumnsInfo \n \n功能描述： 开启 [隐藏列头](/docs/manual/advanced/interaction/hide-columns) 后，隐藏列头的节点信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| hideColumnNodes | 当前隐藏的节点信息 | [Node](/docs/api/basic-class/node)[] |  |  | \n| displaySiblingNode | 展示的相邻节点信息 | { prev:[Node](/docs/api/basic-class/node);next: [Node](/docs/api/basic-class/node) } |  |  | \n \n## ResizeParams \n \n功能描述：表格 resize（单元格行高列宽拖动变化）和单元格样式信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| info | resize 配置信息 | [ResizeInfo](#resizeinfo) |  |  | \n| style | options 中样式相关配置 | [style](/docs/api/general/S2Options#style) |  |  | \n \n## ResizeInfo \n \n功能描述：表格 resize（ 单元格行高列宽拖动变化）配置信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| theme | resize 热区配置 | [ResizeArea](/docs/api/general/S2Theme#resizearea) |  |  | \n| type | resize 方向 | `Horizontal` \\| `Vertical` |  |  | \n| offsetX | 横向偏移量 | `number` |  |  | \n| offsetY | 纵向偏移量 | `number` |  |  | \n| width | 拖拽的宽度 | `number` |  |  | \n| height | 拖拽 | `number` |  |  | \n| size | 热区尺寸 | `number` |  |  | \n| effect | 拖拽更改影响的区域 | `Field` \\| `Cell` \\| `Tree` \\| `Series` |  |  | \n| isResizeArea | 是否属于 resize 热区 | `boolean` |  |  | \n| id | 字段 id | `string` |  |  | \n| meta | resize 热区对应单元格节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n| resizedWidth | 拖拽后的宽度 | `number` |  |  | \n| resizedHeight | 拖拽后的高度 | `number` |  |  | \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n \n",en:" \n \n \n \n"},childrenKey:"demos",order:0},{demos:[{id:"pivot",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/J%246aXMmj26/da7d9c24-2958-4d4c-a38f-4ff0dcb22891.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    ReactDOM.render(\n      <SheetComponent dataCfg={dataCfg} options={s2Options} />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"透视表组件",en:"PivotSheet component"},filename:"pivot.tsx",isNew:!1},{id:"table",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/jWifHNLOsB/08db1064-bb09-4d44-b42b-26aed1766545.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://assets.antv.antgroup.com/s2/basic-table-mode.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    const s2DataConfig = {\n      fields: {\n        columns: ['province', 'city', 'type', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data: res,\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={s2DataConfig}\n        options={s2Options}\n        sheetType=\"table\"\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"明细表组件",en:"TableSheet component"},filename:"table.tsx",isNew:!1},{id:"editable",screenshot:"https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*9RoBT5FIJG0AAAAAAAAAAAAAARQnAQ",source:"import { SheetComponent } from '@antv/s2-react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nfetch('https://assets.antv.antgroup.com/s2/basic-table-mode.json')\n  .then((res) => res.json())\n  .then((res) => {\n    const s2DataConfig = {\n      fields: {\n        columns: ['province', 'city', 'type', 'price', 'cost'],\n      },\n      meta: [\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '商品类别',\n        },\n        {\n          field: 'price',\n          name: '价格',\n        },\n        {\n          field: 'cost',\n          name: '成本',\n        },\n      ],\n      data: res,\n    };\n\n    const s2Options = {\n      width: 480,\n      height: 480,\n      showSeriesNumber: true,\n      frozenRowCount: 1, // 行头冻结数量\n      frozenColCount: 1, // 列头冻结数量\n      frozenTrailingRowCount: 1, // 列尾冻结数量\n      frozenTrailingColCount: 1, // 列尾冻结数量\n    };\n\n    const onDataCellEditEnd = (meta) => {\n      console.log('onDataCellEditEnd', meta);\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={s2DataConfig}\n        options={s2Options}\n        sheetType=\"editable\"\n        onDataCellEditEnd={onDataCellEditEnd}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"编辑表",en:"Editable Sheet"},filename:"editable.tsx",isNew:!1},{id:"strategy",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/detasbG55j/5f1c0072-0761-463c-ac44-2fe7b300d041.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent, SheetComponentOptions } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/3c2009ce-8c2a-451d-b29a-619a796c7903.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options: SheetComponentOptions = {\n      width: 600,\n      height: 480,\n      cornerText: '指标层级',\n      hierarchyType: 'customTree',\n      conditions: {\n        text: [\n          {\n            field: 'number',\n            mapping: (value, cellInfo) => {\n              const { meta, colIndex } = cellInfo;\n              if (colIndex === 0 || !value || !meta?.fieldValue) {\n                return {\n                  fill: '#000',\n                };\n              }\n              return {\n                fill: value > 0 ? '#FF4D4F' : '#29A294',\n              };\n            },\n          },\n        ],\n      },\n      style: {\n        cellCfg: {\n          valuesCfg: {\n            // 非必填: 指定原始字段, 用于 导出和 tooltip 展示\n            originalValueField: 'originalValues',\n            // 非必填: 是否显示原始值\n            showOriginalValue: true,\n          },\n        },\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={dataCfg}\n        options={s2Options}\n        sheetType=\"strategy\"\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"趋势分析表组件",en:"StrategySheet component"},filename:"strategy.tsx",isNew:!1},{id:"strategy-mini-chart",screenshot:"https://gw.alipayobjects.com/mdn/rms_56cbb2/afts/img/A*lLfATbGywcEAAAAAAAAAAAAAARQnAQ",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent, SheetComponentOptions } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\n/**\n * 该示例为 React 版本的趋势分析表\n * 如何在普通图表中使用, 请查看: https://s2.antv.antgroup.com/zh/examples/custom/custom-cell#mini-chart\n */\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/b942d973-7364-4fad-a10a-369426a61376.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options: SheetComponentOptions = {\n      width: 1000,\n      height: 480,\n      cornerText: '指标层级',\n      hierarchyType: 'customTree',\n      conditions: {\n        text: [\n          {\n            field: 'number',\n            mapping: (value, cellInfo) => {\n              const { meta, colIndex } = cellInfo;\n              if (colIndex === 0 || !value || !meta?.fieldValue) {\n                return {\n                  fill: '#000',\n                };\n              }\n              return {\n                fill: value > 0 ? '#FF4D4F' : '#29A294',\n              };\n            },\n          },\n        ],\n      },\n      style: {\n        cellCfg: {\n          valuesCfg: {\n            originalValueField: 'originalValues',\n          },\n        },\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={dataCfg}\n        options={s2Options}\n        sheetType=\"strategy\"\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"mini 图表组件",en:"StrategySheet with mini chart"},filename:"strategy-mini-chart.tsx",isNew:!1}],icon:"",id:"sheet",title:{en:"Sheet Component",zh:"表格组件"},api:{zh:" \n \n# React 表组件 \n \n基于 `@antv/s2` 封装的 `React` 版开箱即用的组件 `<SheetComponent />` \n \n## SpreadsheetProps \n \n功能描述： React SheetComponent 组件的 props 参数 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 <br> 3. `gridAnalysis`: 网格分析表 <br/> 4. `strategy`: 趋势分析表 | `pivot \\| table \\| gridAnalysis \\| strategy` \\| `pivot` |  | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| dataCfg | 透视表数据映射相关配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions) |  | ✓ | \n| partDrillDown | 维度下钻相关属性 | [PartDrillDown](/docs/api/components/drill-down) |  |  | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (current:number, pageSize: number) => void,<br>onChange?: (current:number, pageSize: number) => void <br>} | `false` |  | \n| themeCfg | 自定义透视表主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n| header | 表头配置项 | [HeaderCfgProps](/docs/api/components/header) |  |  | \n| getSpreadSheet | 获取表实例 (1.29.0 已废弃，请使用 `onMounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onRangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| onRowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onColCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onDataCellTrendIconClick | 数值单元格的趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onDataCellBrushSelection | 数值单元格刷选事件 | ( dataCells: [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onDataCellSelectMove | 数值单元格键盘方向键移动事件 | (metas: CellMeta[]) => void |  |  | \n| onDataCellEditEnd | 数值单元格编辑完成（暂只支持编辑表） | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| onCornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onCornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onRangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| onRangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| onRangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| onRangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| onLayoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| onLayoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| onLayoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onLayoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| onCollapseRowsAll | 树状模式下收起全部的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | (hierarchyCollapse: `boolean` ) => void; |  |  | \n| onLayoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| onBeforeRender | 开始 render 前的事件 | () => void; |  |  | \n| onAfterRender | render 完成的事件 | () => void; |  |  | \n| onMounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| onDestroy | 表格销毁事件 | () => void; |  |  | \n| onLayoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| onLayoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseUp | resize 热区鼠标松开事件 | ( event: `MouseEvent`,  resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onLayoutResizeMouseMove | resize 热区鼠标移动事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| onKeyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| onKeyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| onCopied | 复制事件 | (copyData: string) => void |  |  | \n| onActionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| onActionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| onContextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| onMouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| onMouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| onSelected | 单元格选中事件 | (cells: ( [Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| onReset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| onLinkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| onScroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| onColCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: [ColCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n| onRowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: [RowCell](/docs/api/basic-class/base-cell)[]) => void; |  |  | \n \n## SheetComponentOptions \n \nReact 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有两点不同 \n \n- tooltip 的 content 从 `Element | string` 变为了 `ReactNode`, 即可以是任意的 `jsx` 元素 \n- 分页配置从 S2 的分页配置 变为了 `antd` 的分页配置，即支持对 `antd` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps as AntdPaginationProps } from 'antd'; \n \ntype SheetComponentOptions = S2Options< \n  React.ReactNode, \n  Pagination & AntdPaginationProps \n>; \n``` \n \n<br/> \n \n# Vue 表组件 \n \n基于 `@antv/s2` 层封装的 `Vue 3.0` 版开箱即用的组件 `<SheetComponent />` \n \n## props \n \n功能描述： Vue SheetComponent 组件的 props，如 `<SheetComponent :sheetType=\"pivot\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 | `pivot | table` | `pivot` |  | \n| dataCfg | 透视表数据映射配置项 | [S2DataConfig](/docs/api/general/S2DataConfig) |  | ✓ | \n| options | 透视表属性配置项 | [SheetComponentOptions](#sheetcomponentoptions-1) |  | ✓ | \n| adaptive | 是否根据窗口大小自适应 | `boolean | { width?: boolean, height?: boolean, getContainer: () => HTMLElement }` | `false` |  | \n| showPagination | 是否显示默认分页<br>（只有在 `options` 配置过 `pagination` 属性才会生效） | `boolean` \\| \\{ <br>onShowSizeChange?: (pageSize: number) => void,<br>onChange?: (current: number) => void <br>} | `false` |  | \n| themeCfg | 自定义表格主题样式 | [ThemeCfg](/docs/api/general/S2Theme) |  |  | \n| loading | 控制表格的加载状态 | `boolean` |  |  | \n \n## events \n \n功能描述： Vue SheetComponent 组件的 events，`<SheetComponent @rowCellClick=\"handleRowCellClick\" />` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| spreadsheet | 自定义表 | (container: `HTMLElement \\| string`, dataCfg:  [S2DataConfig](/docs/api/general/S2DataConfig), options: [SheetComponentOptions](#sheetcomponentoptions-1)) => [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |  | \n| getSpreadSheet | 获取表实例 (1.4.0 已废弃，请使用 `mounted`) [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| rangeSort | 组内排序时触发回调事件 | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellHover | 行头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellClick | 行头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellDoubleClick | 行头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseDown | 行头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseUp | 行头鼠标放开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellMouseMove | 行头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rowCellCollapseTreeRows | 树状结构下点击行头收起展开按钮 | (params: {id: `number`; isCollapsed: `boolean`; node: [Node](/docs/api/basic-class/node)}) => void |  |  | \n| rowCellScroll | 行头单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellHover | 列头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellClick | 列头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellDoubleClick | 列头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseDown | 列头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseUp | 列头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| colCellMouseMove | 列头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellHover | 数值单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellClick | 数值单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellDoubleClick | 数值单元格双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseDown | 数值单元格鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseUp | 数值单元格鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellMouseMove | 数值单元格鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| dataCellTrendIconClick | 数值趋势图 icon 点击事件 | (meta: [ViewMeta](/docs/api/basic-class/node)) => void |  |  | \n| dataCellBrushSelection | 数值单元格刷选事件 | (brushRangeDataCells: ( [DataCell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| dataCellScroll | 数值单元格滚动事件 | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| cornerCellHover | 角头鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellClick | 角头鼠标单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellDoubleClick | 角头鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseUp | 角头鼠标松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| cornerCellMouseMove | 角头鼠标移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsHover | 合并单元格鼠标悬停事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsClick | 合并单元格鼠标点击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellDoubleClick | 合并单元格鼠标双击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseDown | 合并单元格按下事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseUp | 合并单元格松开事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mergedCellsMouseMove | 合并单元格移动事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| rangeSort | 组内排序时触发回调事件（暂只支持透视表） | (params: [SortParam[]](#sortparam) ) => void; |  |  | \n| rangeSorted | 组内排序结束触发回调事件（暂只支持透视表） | (event: CanvasEvent ) => void; |  |  | \n| rangeFilter | 筛选时触发回调事件 | (data: { filterKey: string; filteredValues: string[] } ) => void; |  |  | \n| rangeFiltered | 筛选结束触发回调事件 | (data: DataType[] ) => void; |  |  | \n| layoutAfterHeaderLayout | 表头布局结构准备完成事件 | (layoutResult: [LayoutResult](/docs/api/general/S2Options/#layoutresult) ) => void; |  |  | \n| layoutPagination | 分页事件 | ({ pageSize: number; pageCount: number; total: number; current: number;} ) => void; |  |  | \n| layoutCellScroll | 单元格滚动事件 (**已废弃，请使用 `onScroll` 代替**) | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| layoutAfterCollapseRows | 树状模式下收起行头后的事件回调 | ({collapsedRows: `Record<string, boolean>`, meta: [Node](/docs/api/basic-class/node) ) => void; |  |  | \n| collapseRowsAll | 树状模式下收起全部的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsExpanded | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头展开的事件回调 | ({hierarchyCollapse: boolean ) => void; |  |  | \n| layoutColsHidden | 开启隐藏列头（tooltip.operation.hiddenColumns = true）后，列头隐藏的事件回调 | ({data: { currentHiddenColumnsInfo:[HiddenColumnsInfo](#hiddencolumnsinfo);hiddenColumnsDetail:[HiddenColumnsInfo](#hiddencolumnsinfo)[];} ) => void; |  |  | \n| beforeRender | 开始 render 前的事件 | () => void; |  |  | \n| afterRender | render 完成的事件 | () => void; |  |  | \n| mounted | 表格加载完成事件，可拿到表实例 [详情](/docs/manual/advanced/get-instance) | (spreadsheet: [SpreadSheet](/docs/api/basic-class/spreadsheet)) => void; |  |  | \n| destroy | 表格销毁事件 | () => void; |  |  | \n| layoutResize | 表格整体 changeSize 事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeSeriesWidth | 表格序号行宽事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowWidth | 行头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeRowHeight | 行头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColWidth | 列头单元格宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeColHeight | 列头单元格高度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeTreeWidth | 树状行头整体宽度更改事件 | (params: [ResizeParams](#resizeparams)) => void; |  |  | \n| layoutResizeMouseDown | resize 热区鼠标按下事件 | ( event: `MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseUp | resize 热区鼠标松开事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| layoutResizeMouseMove | resize 热区鼠标移动事件 | ( event:`MouseEvent`, resizeInfo?: [ResizeInfo](#resizeinfo)) => void; |  |  | \n| keyBoardDown | 键盘按下事件 | (event: KeyboardEvent) => void |  |  | \n| keyBoardUp | 键盘松开事件 | (event: KeyboardEvent) => void |  |  | \n| copied | 复制事件 | (copyData: string) => void |  |  | \n| actionIconHover | 行头操作 icon 悬停事件 | (event: CanvasEvent) => void |  |  | \n| actionIconClick | 行头操作 icon 点击事件 | (event: CanvasEvent) => void |  |  | \n| contextMenu | 右键单元格单击事件 | (data: [TargetCellInfo](#targetcellinfo)) => void |  |  | \n| mouseHover | 表格鼠标悬停事件 | (event: CanvasEvent) => void |  |  | \n| mouseUp | 表格鼠标松开事件 | (event: CanvasEvent) => void |  |  | \n| selected | 单元格选中事件 | ( cells: ([Cell](/docs/api/basic-class/base-cell)[] ) => void |  |  | \n| reset | 交互状态重置事件 | (event: KeyboardEvent) => void |  |  | \n| linkFieldJump | 链接字段跳转事件 (cellData: @antv/s2 1.37.0 新增） | (data: { key: string; cellData: [Node](/docs/api/basic-class/node); record: [Data](/docs/api/general/S2DataConfig#data) }) => void |  |  | \n| scroll | 单元格滚动事件 （含行头和数值单元格） | ({position: [CellScrollPosition](#cellscrollposition)} ) => void; |  |  | \n| colCellBrushSelection | 批量选中刷选范围内的列头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息 | (cells: ColCell[]) => void; |  |  | \n| rowCellBrushSelection | 批量选中刷选范围内的行头单元格，刷选过程中，显示刷选范围提示蒙层，刷选完成后，弹出 tooltip, 展示被刷选单元格信息（仅支持透视表） | (cells: RowCell[]) => void; |  |  | \n \n## SheetComponentOptions \n \nVue 组件 的 `options` 继承于 [S2Options](/docs/api/general/S2Options) , 有一点不同 \n \n- 分页配置从 S2 的分页配置 变为了 `antd-vue` 的分页配置，即支持对 `antd-vue` 分页组件 的 api 透传 \n \n```ts \nimport type { Pagination, S2Options } from '@antv/s2'; \nimport type { PaginationProps } from 'ant-design-vue'; \n \ntype SheetComponentOptions = S2Options< \n  Element | string, \n  Pagination & PaginationProps \n>; \n``` \n \n# 公共对象 \n \n## TargetCellInfo \n \n功能描述：交互回调函数的返回信息。 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| target | 交互作用对象 | [S2CellType](/docs/api/basic-class/base-cell) |  |  | \n| event | 事件 | [Event](#) |  |  | \n| viewMeta | 当前节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n \n \n### SortParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`     | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）         | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`                              | -      |      | \n| type          | 组内排序用来显示 icon （透视表适用）          | `string`                              | -      |      | \n| sortFunc      | 自定义排序的 function                        | (params: [SortFuncParam](#sortfuncparam)) => `string[]` | -      |      | \n \n#### SortFuncParam \n \n| 参数          | 说明                                        | 类型                                  | 默认值 | 必选 | \n| ------------ | ------------------------------------------ | ------------------------------------ | ------ | --- | \n| sortFieldId   | 度量 Id，即要被排序的 Id                    | `string`                              | -      | ✓    | \n| sortMethod    | 排序方式                                    | `ASC \\| DESC \\| asc \\| desc`    | -      |      | \n| sortBy        | 自定义排序列表                              | `string[]`                            | -      |      | \n| sortByMeasure | 按照度量值（数值）排序（透视表适用）      | `string`                              | -      |      | \n| query         | 筛选条件，缩小排序范围 如 ：`{city:'白山'}` | `Record<string, string>`    | -      |      | \n| type          | 组内排序用来显示 icon（透视表适用）             | `string`                              | -      |      | \n| data          | 当前排序数据列表                            | `Array<string \\| Record<string, any>>` | -      |      | \n \n \n## CellScrollPosition \n \n功能描述：单元格滚动的位置信息。 \n \n| 参数        | 说明         | 类型   | 默认值 | 必选 | \n| ---------- | ----------- | ----- | ----- | ---- | \n| scrollX     | 水平方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n| scrollY     | 垂直方向滚动偏移量（相对滚动条轨道长度）  | `number` |        |      | \n \n## HiddenColumnsInfo \n \n功能描述： 开启 [隐藏列头](/docs/manual/advanced/interaction/hide-columns) 后，隐藏列头的节点信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| hideColumnNodes | 当前隐藏的节点信息 | [Node](/docs/api/basic-class/node)[] |  |  | \n| displaySiblingNode | 展示的相邻节点信息 | { prev:[Node](/docs/api/basic-class/node);next: [Node](/docs/api/basic-class/node) } |  |  | \n \n## ResizeParams \n \n功能描述：表格 resize（单元格行高列宽拖动变化）和单元格样式信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| info | resize 配置信息 | [ResizeInfo](#resizeinfo) |  |  | \n| style | options 中样式相关配置 | [style](/docs/api/general/S2Options#style) |  |  | \n \n## ResizeInfo \n \n功能描述：表格 resize（ 单元格行高列宽拖动变化）配置信息 \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | --- | \n| theme | resize 热区配置 | [ResizeArea](/docs/api/general/S2Theme#resizearea) |  |  | \n| type | resize 方向 | `Horizontal` \\| `Vertical` |  |  | \n| offsetX | 横向偏移量 | `number` |  |  | \n| offsetY | 纵向偏移量 | `number` |  |  | \n| width | 拖拽的宽度 | `number` |  |  | \n| height | 拖拽 | `number` |  |  | \n| size | 热区尺寸 | `number` |  |  | \n| effect | 拖拽更改影响的区域 | `Field` \\| `Cell` \\| `Tree` \\| `Series` |  |  | \n| isResizeArea | 是否属于 resize 热区 | `boolean` |  |  | \n| id | 字段 id | `string` |  |  | \n| meta | resize 热区对应单元格节点信息 | [Node](/docs/api/basic-class/node) |  |  | \n| resizedWidth | 拖拽后的宽度 | `number` |  |  | \n| resizedHeight | 拖拽后的高度 | `number` |  |  | \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n \n",en:" \n \n \n \n"},childrenKey:"demos",order:0},{demos:[{id:"default",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/dI0e27cdHW/header.gif",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport insertCss from 'insert-css';\nimport { Button } from 'antd';\nimport {\n  SheetComponent,\n  SheetComponentOptions,\n  SheetComponentsProps,\n} from '@antv/s2-react';\nimport { S2DataConfig, SortParams } from '@antv/s2';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const s2Options: SheetComponentOptions = {\n      width: 600,\n      height: 480,\n      interaction: {\n        enableCopy: true,\n      },\n    };\n\n    const s2DataConfig: S2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      meta: res.meta,\n      data: res.data,\n    };\n\n    const SheetHeader = () => {\n      const [dataCfg, setDataCfg] = React.useState<S2DataConfig>(s2DataConfig);\n      const [sortParams, setSortParams] = React.useState<SortParams>([]);\n      const header: SheetComponentsProps['header'] = {\n        title: '表头标题',\n        description: '表头描述',\n        exportCfg: { open: true },\n        advancedSortCfg: {\n          open: true,\n          sortParams,\n          onSortConfirm: (ruleValues, sortParams) => {\n            setDataCfg({ ...dataCfg, sortParams });\n            setSortParams(sortParams);\n          },\n        },\n        switcherCfg: { open: true },\n        extra: (\n          <Button size={'small'} style={{ verticalAlign: 'top' }}>\n            自定义按钮\n          </Button>\n        ),\n      };\n\n      return (\n        <SheetComponent\n          dataCfg={dataCfg}\n          options={s2Options}\n          header={header}\n          adaptive={false}\n        />\n      );\n    };\n\n    ReactDOM.render(<SheetHeader />, document.getElementById('container'));\n  });\n\ninsertCss(`\n  .s2-header {\n    margin:0px !important;\n  }\n`);\n",title:{zh:"表头组件",en:"Header component"},filename:"default.tsx",isNew:!1}],icon:"",id:"header",title:{en:"Header Component",zh:"表头组件"},api:{zh:" \n \n### HeaderCfgProps \n \n| 参数            | 说明                 | 类型                   | 默认值 | 必选 | \n| --------------- | ------------------ | ---------------------- | ------ | ---- | \n| title           | 自定义标题           | `React.ReactNode`      | -      |      | \n| description     | 自定义说明           | `React.ReactNode`               | -      |      | \n| className       | 表头类名             | `string`               | -      |      | \n| style           | 表头样式             | `React.CSSProperties`  | -      |      | \n| extra           | 自定义表头右侧操作区   |  `React.ReactNode`         | -       |      | \n| advancedSortCfg | 配置高级排序         | [AdvancedSortCfgProps](/docs/api/components/advanced-sort) | `{open: false}` |      | \n| exportCfg       | 配置导出             | [ExportCfgProps](/docs/api/components/export)  | `{open: false}` |      | \n| switcherCfg       | 配置维度切换             | [SwitcherCfgProps](/docs/api/components/switcher#switchercfgprops)  | `{open: false}` |      | \n \n \n",en:" \n \n### HeaderCfgProps \n \n**optional** *HeaderCfgProps* default: `{}` \n \n| parameter       | illustrate                                                         | type                                                                  | Defaults        | required | \n| --------------- | ------------------------------------------------------------------ | --------------------------------------------------------------------- | --------------- | -------- | \n| title           | custom title                                                       | `React.ReactNode`                                                     | -               |          | \n| description     | custom description                                                 | `React.ReactNode`                                                     | -               |          | \n| className       | header class name                                                  | `string`                                                              | -               |          | \n| style           | header style                                                       | `React.CSSProperties`                                                 | -               |          | \n| extra           | Customize the operation area on the right side of the table header | `React.ReactNode`                                                     | -               |          | \n| advancedSortCfg | Configure advanced sorting                                         | [AdvancedSortCfgProps](/docs/api/components/advanced-sort)         | `{open: false}` |          | \n| exportCfg       | configuration export                                               | [ExportCfgProps](/docs/api/components/export)                      | `{open: false}` |          | \n| switcherCfg     | Configure indicator switching                                      | [SwitcherCfgProps](/docs/api/components/switcher#switchercfgprops) | `{open: false}` |          | \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"basic-panel",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/3DoOlPsFYh/drill.gif",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DrillDown } from '@antv/s2-react';\n\nconst disabledFields = ['name'];\nconst clearButtonText = '清除';\n\nconst dataSet = [\n  {\n    name: '性别',\n    value: 'sex',\n    type: 'text',\n  },\n  {\n    name: '姓名',\n    value: 'name',\n    type: 'text',\n  },\n  {\n    name: '城市',\n    value: 'city',\n    type: 'location',\n  },\n  {\n    name: '日期',\n    value: 'date',\n    type: 'date',\n  },\n];\n\nReactDOM.render(\n  <DrillDown\n    disabledFields={disabledFields}\n    clearButtonText={clearButtonText}\n    dataSet={dataSet}\n  />,\n  document.getElementById('container'),\n);\n",title:{zh:"维度下钻组件",en:"DrillDown component"},filename:"basic-panel.tsx",isNew:!1},{id:"for-pivot",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/i%240oG9GFEV/xiazuan.gif",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n      hierarchyType: 'tree',\n    };\n\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      meta: res.meta,\n      data: res.data,\n    };\n\n    const sex = ['男', '女'];\n\n    const PartDrillDown = {\n      drillConfig: {\n        dataSet: [\n          {\n            name: '客户性别',\n            value: 'sex',\n            type: 'text',\n          },\n        ],\n      },\n\n      fetchData: (meta, drillFields) =>\n        new Promise((resolve) => {\n          const dataSet = meta.spreadsheet.dataSet;\n          const field = drillFields[0];\n          const rowDatas = dataSet.getMultiData(meta.query);\n          const drillDownData = [];\n          rowDatas.forEach((data) => {\n            const { city, number, province, sub_type: subType, type } = data;\n            const number0 = Math.ceil(Math.random() * (number - 50)) + 50;\n            const number1 = number - number0;\n            const dataItem0 = {\n              city,\n              number: number0,\n              province,\n              sub_type: subType,\n              type,\n              [field]: sex[0],\n            };\n            drillDownData.push(dataItem0);\n            const dataItem1 = {\n              city,\n              number: number1,\n              province,\n              sub_type: subType,\n              type,\n              [field]: sex[1],\n            };\n\n            drillDownData.push(dataItem1);\n          });\n\n          resolve({\n            drillField: field,\n            drillData: drillDownData,\n          });\n        }),\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={s2DataConfig}\n        options={s2Options}\n        partDrillDown={PartDrillDown}\n        adaptive={false}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"透视表维度下钻组件",en:"DrillDown in pivot sheet"},filename:"for-pivot.tsx",isNew:!1}],icon:"",id:"drill-down",title:{en:"DrillDwon",zh:"下钻组件"},api:{zh:' \n \n## React 下钻组件 \n \n```jsx \nconst s2Options = { \n  width: 600, \n  height: 480, \n  hierarchyType: \'tree\', // 树形结构 \n}; \n \n<SheetComponent \n  options={s2Options} \n  partDrillDown={PartDrillDown} \n  sheetType="pivot"  // 透视模式 \n/> \n``` \n \n​📊 查看 [React 版下钻 demo](/examples/react-component/drill-down#for-pivot) \n \n## Vue 下钻组件 \n \n下钻组件只有在表格，透视模式才能使用。 \n \n```vue \nconst s2Options = { \n  width: 600, \n  height: 480, \n  hierarchyType: \'tree\', \n}; \n \n<template> \n <SheetComponent \n    ref="s2" \n    :sheetType="pivot" \n    :partDrillDown="partDrillDown" \n    :options="s2Options" \n  /> \n</template> \n``` \n \n​📊 查看 [Vue 版下钻 demo](https://codesandbox.io/s/vue-drilldown-demo-8p1lmv?file=/src/App.vue:6385-6396) \n \n## 公共 API \n \n<description>功能描述：配置维度下钻，当前仅支持透视模式的树形结构下，行头维度下钻</description> \n \n### PartDrillDown \n \n类型：`object`，**可选**，默认值：`{}` \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | 备注                | 版本 | \n| --- | --- | --- | --- | --- |-------------------| --- | \n| drillConfig | 下钻菜单组件配置项 | [DrillDownProps](#drilldownprops) | - | ✓ |     | | \n| drillItemsNum | 下钻完成后展示的个数，默认全部展示 | `number` | -1 |  |                   | | \n| fetchData | 点击下钻后的回调 | [FetchCallBack](#fetchcallback) | - | ✓ |                   | | \n| clearDrillDown | 清除下钻信息，当有指定的 rowId 传递时清除对应 rowId 的下钻信息；如果参数是 空对象 {}，则清空所有的下钻信息 | `{rowId: string;}` | - |  | 仅 `React` 组件支持此属性 | | \n| displayCondition | 配置下钻 `icon` 的展示条件， 同 HeaderActionIcon | `(meta: Node, iconName: string) => boolean` | - |  | 仅 `React` 组件支持此属性 | `1.26.0` 回传 `iconName` 并按单个 icon 控制显隐 | \n \n注意：PartDrillDown 中 `drillConfig`、`displayCondition` 字段会影响下钻模式的重渲，请注意使用 memo 或 state 控制其可变性。 \n \n#### FetchCallBack \n \n```js \n(meta: Node, drillFields: string[]) => Promise<PartDrillDownInfo> \n``` \n \n功能描述：点击下钻后的回调参数：[PartDrillDownInfo](#partdrilldowninfo) \n \n##### PartDrillDownInfo \n \n类型：`object`，**必选**，默认值：`{}` \n \n<description>功能描述：下钻数据请求参数配置</description> \n \n| 参数 | 说明 | 类型 | 必选 | 默认值 | \n| --- | --- | --- | --- | --- | \n| drillData | 下钻的数据 | <code class="language-text">Record<string, string \\| number>[] </code> | ✓ |  | \n| drillField | 下钻维度 value 值 | `string` | ✓ |  | \n \n#### DrillDownProps \n \n类型：`object`，**必选**，默认值：`{}` \n \n<description>功能描述：下钻菜单组件配置项</description> \n \n| 参数 | 说明                                    | 类型 | 默认值 | 必选 | 备注 | \n| --- |---------------------------------------| --- | --- | --- | ---  | \n| dataSet | 下钻数据源配置                               | [DataSet[]](#dataset) |  | ✓ |  | \n| className | 透传样式名                                 | `string` |  |  |  | \n| titleText | 标题                                    | `string` |  |  |  | \n| searchText | 搜索框文案                                 | `string` |  |  |  | \n| clearButtonText | 重置按钮文案                                | `string` |  |  |  | \n| disabledFields | 不允许下钻的维度                              | `string[]` |  |  |  | \n| getDrillFields | 内部获取当前下钻维度的回调                         | `Function` |  |  |  | \n| setDrillFields | 内部设置当前下钻维度的回调                         | `Function` |  |  |  | \n| extra | 自定义插入的节点，插入在搜索框和下钻菜单中间 | `ReactNode` |  |  | 仅 `React` 组件支持此属性 | \n| drillFields | 允许下钻的维度      | `string[]` |  |  | 仅 `React` 组件支持此属性  | \n \n##### DataSet \n \n类型：`object`，**必选**，默认值：`{}` \n \n<description>功能描述：下钻数据源配置</description> \n \n| 参数 | 说明 | 类型 | 默认值 | 必选 | \n| --- | --- | --- | --- | --- | \n| name | 展示名字 | `string` |  | ✓ | \n| value | 具体值 | `string` |  | ✓ | \n| type | 维度类型，不同类型对应 icon 不同 | `text` \\| `location` \\| `date` |  |  | \n| disabled | 是否允许选择 | `boolean` |  |  | \n| icon | 列表 item 的 icon | `ReactNode` |  |  | \n \n \n',en:' \n \n## React Drilldown Components \n \n```jsx \nconst s2Options = { \n  width: 600, \n  height: 480, \n  hierarchyType: \'tree\', // 树形结构 \n}; \n \n<SheetComponent \n  options={s2Options} \n  partDrillDown={PartDrillDown} \n  sheetType="pivot"  // 透视模式 \n/> \n``` \n \n​📊 Check out [the React version of the drilldown demo](/examples/react-component/drill-dwon#for-pivot) \n \n## Vue drilldown component \n \nThe drill-down component can only be used in table and perspective mode. \n \n```vue \nconst s2Options = { \n  width: 600, \n  height: 480, \n  hierarchyType: \'tree\', \n}; \n \n<template> \n <SheetComponent \n    ref="s2" \n    :sheetType="pivot" \n    :partDrillDown="partDrillDown" \n    :options="s2Options" \n  /> \n</template> \n``` \n \n​📊 Check out [the Vue version of the drilldown demo](https://codesandbox.io/s/vue-drilldown-demo-8p1lmv?file=/src/App.vue:6385-6396) \n \n## public API \n \nFunction description: Configure dimension drill-down, currently only supports drill-down in the perspective mode tree structure, row header dimension drill-down \n \n### Part Drill Down \n \nType: `object` , **optional** , default: `{}` \n \n| parameter        | illustrate                                                                                                                                                                                                      | type                                        | Defaults | required | Remark                                        | Version                                                                                     | \n| ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------- | -------- | -------- | --------------------------------------------- | ------------------------------------------------------------------------------------------- | \n| drillConfig      | Drill down menu component configuration items                                                                                                                                                                   | \\[DrillDownProps] (#drilldownprops)         | -        | ✓        |                                               |                                                                                             | \n| drillItemsNum    | The number of displayed items after the drill-down is completed, and all are displayed by default                                                                                                               | `number`                                    | -1       |          |                                               |                                                                                             | \n| fetchData        | Callback after clicking the drilldown                                                                                                                                                                           | [FetchCallBack](#fetchcallback)             | -        | ✓        |                                               |                                                                                             | \n| clearDrillDown   | Clear the drill-down information. When the specified rowId is passed, clear the drill-down information corresponding to the rowId; if the parameter is an empty object {}, clear all the drill-down information | `{rowId: string;}`                          | -        |          | Only `React` components support this property |                                                                                             | \n| displayCondition | Configure the display conditions of the drilldown `icon` , same as HeaderActionIcon                                                                                                                             | `(meta: Node, iconName: string) => boolean` | -        |          | Only `React` components support this property | `1.26.0` returns the `iconName` and presses a single icon to control the display and hiding | \n \nNote: The `drillConfig` and `displayCondition` fields in PartDrillDown will affect the re-rendering of the drill-down mode, please note that use memo or state to control its variability. \n \n#### FetchCallBack \n \n```js \n(meta: Node, drillFields: string[]) => Promise<PartDrillDownInfo> \n``` \n \nFunction description: Callback parameters after clicking the drilldown: [PartDrillDownInfo](#partdrilldowninfo) \n \n##### PartDrillDownInfo \n \nType: `object` , **required** , default value: `{}` \n \nFunction description: Drill down data request parameter configuration \n \n| parameter  | illustrate                       | type                                 | required | Defaults | \n| ---------- | -------------------------------- | ------------------------------------ | -------- | -------- | \n| drillData  | drill down data                  | `Record<string, string \\| number>[]` | ✓        |          | \n| drillField | Drill down dimension value value | `string`                             | ✓        |          | \n \n#### DrillDownProps \n \nType: `object` , **required** , default value: `{}` \n \nFunction description: Drill down menu component configuration items \n \n| parameter       | illustrate                                                                           | type                    | Defaults | required | Remark                                        | \n| --------------- | ------------------------------------------------------------------------------------ | ----------------------- | -------- | -------- | --------------------------------------------- | \n| dataSet         | Drill down to data source configuration                                              | [DataSet\\[\\]](#dataset) |          | ✓        |                                               | \n| className       | Transparent style name                                                               | `string`                |          |          |                                               | \n| titleText       | title                                                                                | `string`                |          |          |                                               | \n| searchText      | Search Box Copywriting                                                               | `string`                |          |          |                                               | \n| clearButtonText | reset button copy                                                                    | `string`                |          |          |                                               | \n| disabledFields  | Dimensions that do not allow drill-down                                              | `string[]`              |          |          |                                               | \n| getDrillFields  | Internally get the callback of the current drill-down dimension                      | `Function`              |          |          |                                               | \n| setDrillFields  | Internally set the callback of the current drill-down dimension                      | `Function`              |          |          |                                               | \n| extra           | Customize the inserted node, inserted between the search box and the drill-down menu | `ReactNode`             |          |          | Only `React` components support this property | \n| drillFields     | Dimensions that allow drill-down                                                     | `string[]`              |          |          | Only `React` components support this property | \n \n##### DataSet \n \nType: `object` , **required** , default value: `{}` \n \nFunction description: drill down data source configuration \n \n| parameter | illustrate                                                    | type                           | Defaults | required | \n| --------- | ------------------------------------------------------------- | ------------------------------ | -------- | -------- | \n| name      | show name                                                     | `string`                       |          | ✓        | \n| value     | specific value                                                | `string`                       |          | ✓        | \n| type      | Dimension type, different types correspond to different icons | `text` \\| `location` \\| `date` |          |          | \n| disabled  | Is it allowed to choose                                       | `boolean`                      |          |          | \n| icon      | The icon of the list item                                     | `React.ReactNode`              |          |          | \n \n \n'},childrenKey:"demos",order:2},{demos:[{id:"basic",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/UuEx0wndW7/efa70cc6-5106-4d81-9957-25c99b4fad32.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n      tooltip: {\n        showTooltip: true,\n        row: {\n          showTooltip: false,\n        },\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        sheetType=\"pivot\"\n        adaptive={false}\n        dataCfg={dataCfg}\n        options={s2Options}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"基本展示",en:"Basic Show"},filename:"basic.tsx",isNew:!1},{id:"operation",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/HRIacdrQje/4455252e-bed7-4265-8fee-90ed85a6ae11.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n      tooltip: {\n        operation: {\n          trend: true,\n        },\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        sheetType=\"pivot\"\n        adaptive={false}\n        dataCfg={dataCfg}\n        options={s2Options}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"操作项",en:"Operation"},filename:"operation.tsx",isNew:!1},{id:"custom-operation",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/le1o4zCn9/d5fd21d4-95bb-448e-9c10-92a1dd4495ae.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n      tooltip: {\n        operation: {\n          menus: [\n            {\n              key: 'custom-a',\n              text: '操作1',\n              icon: 'Trend',\n              onClick: (cell) => {\n                console.log('操作1点击', cell);\n              },\n              children: [\n                {\n                  key: 'custom-a-a',\n                  text: '操作 1-1',\n                  icon: 'Trend',\n                  onClick: () => {\n                    console.log('操作 1-1 点击');\n                  },\n                },\n              ],\n            },\n            {\n              key: 'custom-b',\n              text: '操作2',\n              icon: 'EyeOutlined',\n              onClick: () => {\n                console.log('操作2点击');\n              },\n            },\n            {\n              key: 'custom-c',\n              text: '操作3',\n              icon: 'EyeOutlined',\n              visible: false,\n              onClick: () => {\n                console.log('操作3点击');\n              },\n            },\n            {\n              key: 'custom-c',\n              text: '操作4',\n              icon: 'EyeOutlined',\n              visible: (cell) => {\n                // 叶子节点才显示\n                const meta = cell.getMeta();\n                return meta.isLeaf;\n              },\n              onClick: () => {\n                console.log('操作4点击');\n              },\n            },\n          ],\n        },\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        sheetType=\"pivot\"\n        adaptive={false}\n        dataCfg={dataCfg}\n        options={s2Options}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"自定义操作项",en:"Custom Operation"},filename:"custom-operation.tsx",isNew:!1},{id:"custom-content",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/j1fkyyIDdh/939fb3ed-b1c7-48a4-a329-bd1d64ddcb9c.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Button } from 'antd';\nimport { SheetComponent } from '@antv/s2-react';\nimport insertCss from 'insert-css';\nimport '@antv/s2-react/dist/style.min.css';\n\nconst CustomTooltip = <div className=\"tooltip-custom-component\">content</div>;\n\nconst RowTooltip = ({ title }) => (\n  <div className=\"tooltip-custom-component\">{title}</div>\n);\n\nconst ColTooltip = () => {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <div className=\"tooltip-custom-component\">\n      <Button\n        onClick={() => {\n          setOpen(!open);\n        }}\n      >\n        切换\n      </Button>\n      <span style={{ marginLeft: 4 }}>\n        {open ? 'colTooltip1' : 'colTooltip2'}\n      </span>\n    </div>\n  );\n};\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n      tooltip: {\n        content: CustomTooltip,\n        row: {\n          content: (cell, defaultTooltipShowOptions) => {\n            console.log('当前单元格：', cell);\n            console.log('默认 tooltip 详细信息：', defaultTooltipShowOptions);\n\n            const meta = cell.getMeta();\n\n            return <RowTooltip title={meta.label} />;\n          },\n        },\n        col: {\n          content: <ColTooltip />,\n        },\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        sheetType=\"pivot\"\n        adaptive={false}\n        dataCfg={dataCfg}\n        options={s2Options}\n      />,\n      document.getElementById('container'),\n    );\n  });\n\ninsertCss(`\n  .tooltip-custom-component {\n    padding: 12px;\n    height: 50px;\n  }\n`);\n",title:{zh:"自定义 Tooltip 内容",en:"Custom Tooltip Content"},filename:"custom-content.tsx",isNew:!1},{id:"custom-tooltip",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/j1fkyyIDdh/939fb3ed-b1c7-48a4-a329-bd1d64ddcb9c.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BaseTooltip } from '@antv/s2';\nimport { SheetComponent } from '@antv/s2-react';\nimport insertCss from 'insert-css';\nimport '@antv/s2-react/dist/style.min.css';\n\nconst MyCustomTooltipContent = () => (\n  <div className=\"tooltip-custom-component\">我是自定义 tooltip 内容</div>\n);\n\nclass CustomTooltip extends BaseTooltip {\n  constructor(spreadsheet) {\n    super(spreadsheet);\n  }\n\n  renderContent() {\n    ReactDOM.render(<MyCustomTooltipContent />, this.container);\n  }\n\n  show(options) {\n    super.show(options);\n    console.log('options: ', options);\n  }\n\n  destroy() {\n    console.log('tooltip destroy');\n\n    super.destroy();\n    if (this.container) {\n      ReactDOM.unmountComponentAtNode(this.container);\n    }\n  }\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n      tooltip: {\n        showTooltip: true,\n        renderTooltip: (spreadsheet) => new CustomTooltip(spreadsheet),\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        sheetType=\"pivot\"\n        adaptive={false}\n        dataCfg={dataCfg}\n        options={s2Options}\n      />,\n      document.getElementById('container'),\n    );\n  });\n\ninsertCss(`\n  .tooltip-custom-component {\n    padding: 12px;\n    height: 50px;\n  }\n`);\n",title:{zh:"自定义 Tooltip",en:"Custom Tooltip"},filename:"custom-tooltip.tsx",isNew:!1},{id:"custom-show-tooltip",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/sSx1H%24pJOs/6305fe29-5640-4d4d-b1ef-577cc6a32eb3.png",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport insertCss from 'insert-css';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={dataCfg}\n        options={s2Options}\n        onMounted={(instance) => {\n          instance.showTooltip = (tooltipOptions) => {\n            const { position, data = {}, options } = tooltipOptions;\n            const name = `${data.name} - 测试`; // 只有单元格中文案被省略才显示\n            const infos = '按住 Shift 多选或框选，查看多个数据点';\n            const tips = '说明：这是个说明';\n            const customSummaries = (data.summaries || []).map((item) => {\n              return { ...item, name: `${item.name} - 测试` };\n            });\n            const { cols = [], rows = [] } = data.headInfo || {};\n            const customCols = cols.map((item) => {\n              return { ...item, value: `${item.value} - 测试` };\n            });\n            const customDetails = (data.details || []).map((item) => {\n              return {\n                name: `${item.name} - 测试`,\n                value: `${item.value} - w`,\n              };\n            });\n            const customOperator = {\n              onClick: ({ key }) => {\n                console.log('任意菜单项点击', key);\n              },\n              menus: [\n                {\n                  id: 'trend',\n                  icon: 'trend',\n                  text: '趋势',\n                  onClick: () => {\n                    console.log('当前菜单项点击');\n                  },\n                },\n              ],\n            };\n            const customOptions = {\n              ...tooltipOptions,\n              position: { x: position.x + 1, y: position.y + 1 },\n              data: {\n                ...data,\n                name: data.name ? name : '',\n                infos,\n                tips,\n                summaries: customSummaries,\n                headInfo: { rows, cols: customCols },\n                details: customDetails,\n              },\n              options: {\n                ...options,\n                operator: customOperator,\n              },\n            };\n            instance.tooltip.show(customOptions);\n          };\n        }}\n      />,\n      document.getElementById('container'),\n    );\n  });\n\ninsertCss(`\n  .tooltip-custom-component {\n    padding: 12px;\n    height: 50px;\n  }\n`);\n",title:{zh:"重写展示方法",en:"Custom Show Tooltip"},filename:"custom-show-tooltip.tsx",isNew:!1},{id:"custom-click-show-tooltip",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/kpvnavJgo0/tooltip.gif",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nconst CustomColCellTooltip = () => <div>col cell</div>;\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n      tooltip: {\n        showTooltip: true,\n      },\n    };\n\n    const onColCellClick = ({ viewMeta, event }) => {\n      if (!viewMeta) {\n        return;\n      }\n      const { spreadsheet, id } = viewMeta;\n\n      // 点击列头的 [家具] 试试\n      if (id === 'root[&]家具') {\n        const position = {\n          x: event.clientX,\n          y: event.clientY,\n        };\n\n        // 查看更多配置项: https://s2.antv.antgroup.com/api/basic-class/base-tooltip#tooltipshowoptions\n        spreadsheet.showTooltip({\n          position,\n          content: <CustomColCellTooltip />,\n          options: {\n            operator: {\n              menus: [\n                {\n                  key: 'custom-a',\n                  text: '操作1',\n                  icon: 'Trend',\n                  onClick: (cell) => {\n                    console.log('操作1点击', cell);\n                  },\n                  children: [\n                    {\n                      key: 'custom-a-a',\n                      text: '操作 1-1',\n                      icon: 'Trend',\n                      onClick: (cell) => {\n                        console.log('操作 1-1 点击', cell);\n                      },\n                    },\n                  ],\n                },\n              ],\n            },\n          },\n        });\n      }\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        sheetType=\"pivot\"\n        adaptive={false}\n        dataCfg={dataCfg}\n        options={s2Options}\n        onColCellClick={onColCellClick}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"自定义点击显示 Tooltip",en:"Custom Click Show Tooltip"},filename:"custom-click-show-tooltip.tsx",isNew:!1},{id:"custom-hover-show-tooltip",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/c%24ICO1qvb/Kapture%2525202021-12-03%252520at%25252016.30.11.gif",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n      tooltip: {\n        showTooltip: true,\n      },\n      interaction: {\n        // 禁用默认的悬停聚焦效果, 防止出现默认的 tooltip (hover 在数值单元格 800ms 后, 会显示 tooltip)\n        hoverFocus: false,\n      },\n    };\n\n    const CustomColCellTooltip = () => <div>col cell tooltip</div>;\n    const CustomRowCellTooltip = () => <div>row cell tooltip</div>;\n    const CustomDataCellTooltip = () => <div>data cell tooltip</div>;\n\n    const onColCellHover = ({ event, viewMeta }) => {\n      // 查看更多配置项: https://s2.antv.antgroup.com/api/basic-class/base-tooltip#tooltipshowoptions\n      viewMeta.spreadsheet.tooltip.show({\n        position: {\n          x: event.clientX,\n          y: event.clientY,\n        },\n        content: <CustomColCellTooltip />,\n        // 自定义操作项\n        options: {\n          operator: {\n            menus: [\n              {\n                key: 'custom-a',\n                text: '操作1',\n                icon: 'Trend',\n                onClick: (cell) => {\n                  console.log('操作1点击', cell);\n                },\n                children: [\n                  {\n                    key: 'custom-a-a',\n                    text: '操作 1-1',\n                    icon: 'Trend',\n                    onClick: (cell) => {\n                      console.log('操作 1-1 点击', cell);\n                    },\n                  },\n                ],\n              },\n            ],\n          },\n        },\n      });\n    };\n\n    const onRowCellHover = ({ event, viewMeta }) => {\n      viewMeta.spreadsheet.tooltip.show({\n        position: {\n          x: event.clientX,\n          y: event.clientY,\n        },\n        content: <CustomRowCellTooltip />,\n      });\n    };\n\n    const onDataCellHover = ({ event, viewMeta }) => {\n      viewMeta.spreadsheet.tooltip.show({\n        position: {\n          x: event.clientX,\n          y: event.clientY,\n        },\n        content: <CustomDataCellTooltip />,\n      });\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        sheetType=\"pivot\"\n        adaptive={false}\n        dataCfg={dataCfg}\n        options={s2Options}\n        onColCellHover={onColCellHover}\n        onRowCellHover={onRowCellHover}\n        onDataCellHover={onDataCellHover}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"自定义悬停显示 Tooltip",en:"Custom Hover Show Tooltip"},filename:"custom-hover-show-tooltip.tsx",isNew:!1},{id:"custom-description",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/Z8%24cg%24so%24/Kapture%2525202022-07-07%252520at%25252017.28.31.gif",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch('https://render.alipay.com/p/yuyan/180020010001215413/s2/basic.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const dataCfg = {\n      meta: [\n        {\n          field: 'price',\n          name: '价格',\n          description: '价格说明。。',\n        },\n        {\n          field: 'province',\n          name: '省份',\n          description: '省份说明。。',\n        },\n        {\n          field: 'city',\n          name: '城市',\n          description: '城市说明。。',\n        },\n        {\n          field: 'type',\n          name: '类别',\n          description: '类别说明。。',\n        },\n      ],\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type'],\n        values: ['price'],\n        valueInCols: true,\n      },\n      data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      tooltip: {\n        showTooltip: true,\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        sheetType=\"pivot\"\n        dataCfg={dataCfg}\n        options={s2Options}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"Tooltip 中显示字段描述",en:"Custom Field Description"},filename:"custom-description.tsx",isNew:!1}],icon:"",id:"tooltip",title:{en:"Tooltip Component",zh:"Tooltip 组件"},api:{zh:"",en:""},childrenKey:"demos",order:2},{demos:[{id:"export",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/LuLsxJzuq/2021-11-16%25252022.15.51.gif",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        enableCopy: true,\n      },\n    };\n\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      meta: res.meta,\n      data: res.data,\n    };\n\n    ReactDOM.render(\n      <SheetComponent\n        dataCfg={s2DataConfig}\n        options={s2Options}\n        header={{\n          exportCfg: {\n            open: true,\n          },\n        }}\n        adaptive={false}\n      />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"导出组件",en:"Export component"},filename:"export.tsx",isNew:!1}],icon:"",id:"export",title:{en:"Export",zh:"导出组件"},api:{zh:" \n \n## React 导出组件 \n \n```tsx \n<SheetComponent \n  dataCfg={dataCfg} \n  options={options} \n  header={{ exportCfg: { open: true } }} \n/> \n``` \n \n### ExportCfgProps \n \n| 属性 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | -- | \n| open | 开启组件 | `boolean` | `false` | ✓ | \n| className | 类名 | `string` |  |  | \n| icon | 展示图标 | `ReactNode` |  |  | \n| copyOriginalText | 复制原始数据文案 | `string` |  |  | \n| copyFormatText | 复制格式化数据文案 | `string` |  |  | \n| downloadOriginalText | 下载原始数据文案 | `string` |  |  | \n| downloadFormatText | 下载格式化数据文案 | `string` |  |  | \n| successText | 操作成功文案 | `string` |  |  | \n| errorText | 操作失败文案 | `string` |  |  | \n| fileName | 自定义下载文件名 | `string` | `sheet` |  | \n| syncCopy | 同步复制数据 （默认异步） | `boolean` | `false` |  | \n| dropdown | 下拉菜单配置，透传给 `antd` 的 `Dropdown` 组件 | [DropdownProps](https://ant.design/components/dropdown-cn/#API) | | | \n \n \n## 原始导出方法 \n \n组件层的复制，导出等功能，基于核心层 `@antv/s2` 透出的一系列工具方法封装，可以根据实际业务，基于工具方法自行封装 \n \n```ts \nimport { copyData, copyToClipboard, download, registerTransformer, CopyMIMEType } from '@antv/s2' \n \n// 拿到复制数据 （选中的单元格） \nconst data = copyData(spreadsheet, '\\t', false) \n \n// 复制数据到剪贴板 \n// 同步复制：copyToClipboard(data, false) \ncopyToClipboard(data) \n  .then(() => { \n    console.log('复制成功') \n  }) \n  .catch(() => { \n    console.log('复制失败') \n  }) \n \n// 导出数据 (filename.csv) \ndownload(data, 'filename') \n \n// 自定义复制导出转换 （复制到 word、语雀等场景会成为一个空表格） \nregisterTransformer(CopyMIMEType.HTML, (matrix) => { \n  return `<td></td>` \n}) \n \nconst data = copyData(spreadsheet, '\\t', false) \n \n``` \n \n### copyData \n \n| 参数          | 说明     | 类型     | 默认值      | 必选 | \n| ------------| ------------------ | ------------- | --------------------------- | --- | \n| spreadsheet | s2 实例       | [SpreadSheet](/docs/api/basic-class/spreadsheet)          |                            | ✓    | \n| split       | 分隔符    | `string`    |     | ✓    | \n| formatOptions  | 是否格式化，可以分别对数据单元格和行列头进行格式化，传布尔值会同时对单元格和行列头生效。 |  <code> boolean \\|  { isFormatHeader?: boolean, isFormatData?: boolean} </code>    | `false` |      | \n \n### copyToClipboard \n \n| 参数 | 说明     | 类型     | 默认值 | 必选 | \n| --- | --- | ------- | ----- | --- | \n| data | 数据源 | `string` |        | ✓    | \n| sync | 是否同步复制数据 （默认异步） | `boolean` |   `false`     |     | \n \n### download \n \n| 参数     | 说明     | 类型     | 默认值 | 必选 | \n| ------- | ------- | ------- | ----- | --- | \n| data     | 数据源 | `string` |        | ✓    | \n| filename | 文件名称 | `string` |        | ✓    | \n \n### registerTransformer \n \n```ts \nenum CopyMIMEType { \n  PLAIN = 'text/plain', \n  HTML = 'text/html', \n} \n \ntype MatrixTransformer = (data: string[][]) => CopyableItem; \n \ntype CopyableItem = { \n  type: CopyMIMEType; \n  content: string; \n}; \n``` \n \n| 参数 | 说明     | 类型     | 默认值 | 必选 | \n| --- | --- | ------- | ----- | --- | \n| type | 复制内容的 MIMEType | `CopyMIMEType` |        | ✓    | \n| transformer | 处理函数 | `MatrixTransformer` |      |   ✓   | \n \n \n## Vue 导出组件 \n \n开发中，敬请期待 \n \n \n",en:" \n \n## React export components \n \n```tsx \n<SheetComponent \n  dataCfg={dataCfg} \n  options={options} \n  header={{ exportCfg: { open: true } }} \n/> \n``` \n \n### ExportCfgProps \n \n| Attributes           | illustrate                                                                              | type                                                            | Defaults | required | \n| :------------------- | :-------------------------------------------------------------------------------------- | :-------------------------------------------------------------- | :------- | :------- | \n| open                 | open component                                                                          | `boolean`                                                       | `false`  | ✓        | \n| className            | class name                                                                              | `string`                                                        |          |          | \n| icon                 | display icon                                                                            | `ReactNode`                                                     |          |          | \n| copyOriginalText     | Copy original data copy                                                                 | `string`                                                        |          |          | \n| copyFormatText       | copy formatted data copy                                                                | `string`                                                        |          |          | \n| downloadOriginalText | Download the original data copy                                                         | `string`                                                        |          |          | \n| downloadFormatText   | Download formatted data copy                                                            | `string`                                                        |          |          | \n| successText          | Successful operation copy                                                               | `string`                                                        |          |          | \n| errorText            | Operation failure copy                                                                  | `string`                                                        |          |          | \n| fileName             | Customize the download file name                                                        | `string`                                                        | `sheet`  |          | \n| syncCopy             | Copy data synchronously (default is asynchronous)                                       | `boolean`                                                       | `false`  |          | \n| drop down            | Dropdown menu configuration, transparently passed to the `Dropdown` component of `antd` | [DropdownProps](https://ant.design/components/dropdown-cn/#API) |          |          | \n \n \n## 原始导出方法 \n \n组件层的复制，导出等功能，基于核心层 `@antv/s2` 透出的一系列工具方法封装，可以根据实际业务，基于工具方法自行封装 \n \n```ts \nimport { copyData, copyToClipboard, download, registerTransformer, CopyMIMEType } from '@antv/s2' \n \n// 拿到复制数据 （选中的单元格） \nconst data = copyData(spreadsheet, '\\t', false) \n \n// 复制数据到剪贴板 \n// 同步复制：copyToClipboard(data, false) \ncopyToClipboard(data) \n  .then(() => { \n    console.log('复制成功') \n  }) \n  .catch(() => { \n    console.log('复制失败') \n  }) \n \n// 导出数据 (filename.csv) \ndownload(data, 'filename') \n \n// 自定义复制导出转换 （复制到 word、语雀等场景会成为一个空表格） \nregisterTransformer(CopyMIMEType.HTML, (matrix) => { \n  return `<td></td>` \n}) \n \nconst data = copyData(spreadsheet, '\\t', false) \n \n``` \n \n### copyData \n \n| 参数          | 说明     | 类型     | 默认值      | 必选 | \n| ------------| ------------------ | ------------- | --------------------------- | --- | \n| spreadsheet | s2 实例       | [SpreadSheet](/docs/api/basic-class/spreadsheet)          |                            | ✓    | \n| split       | 分隔符    | `string`    |     | ✓    | \n| formatOptions  | 是否格式化，可以分别对数据单元格和行列头进行格式化，传布尔值会同时对单元格和行列头生效。 |  <code> boolean \\|  { isFormatHeader?: boolean, isFormatData?: boolean} </code>    | `false` |      | \n \n### copyToClipboard \n \n| 参数 | 说明     | 类型     | 默认值 | 必选 | \n| --- | --- | ------- | ----- | --- | \n| data | 数据源 | `string` |        | ✓    | \n| sync | 是否同步复制数据 （默认异步） | `boolean` |   `false`     |     | \n \n### download \n \n| 参数     | 说明     | 类型     | 默认值 | 必选 | \n| ------- | ------- | ------- | ----- | --- | \n| data     | 数据源 | `string` |        | ✓    | \n| filename | 文件名称 | `string` |        | ✓    | \n \n### registerTransformer \n \n```ts \nenum CopyMIMEType { \n  PLAIN = 'text/plain', \n  HTML = 'text/html', \n} \n \ntype MatrixTransformer = (data: string[][]) => CopyableItem; \n \ntype CopyableItem = { \n  type: CopyMIMEType; \n  content: string; \n}; \n``` \n \n| 参数 | 说明     | 类型     | 默认值 | 必选 | \n| --- | --- | ------- | ----- | --- | \n| type | 复制内容的 MIMEType | `CopyMIMEType` |        | ✓    | \n| transformer | 处理函数 | `MatrixTransformer` |      |   ✓   | \n \n \n## Vue export component \n \nIn development, please look forward to \n \n \n"},childrenKey:"demos",order:3},{demos:[{id:"pure-switcher",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/tiVXaKTKB/2021-11-16%25252022.18.52.gif",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Switcher } from '@antv/s2-react';\n\nconst switcherFields = {\n  rows: {\n    items: [{ id: 'province' }, { id: 'city' }],\n    allowEmpty: false,\n  },\n  columns: {\n    items: [{ id: 'type', displayName: '类型 (type)' }],\n  },\n  values: {\n    selectable: true,\n    items: [\n      { id: 'price', checked: true },\n      { id: 'cost', checked: false },\n    ],\n  },\n};\n\nconst onSubmit = (result) => {\n  console.log('result:', result);\n};\n\nReactDOM.render(\n  <Switcher {...switcherFields} onSubmit={onSubmit} />,\n  document.getElementById('container'),\n);\n",title:{zh:"维度切换组件",en:"Switcher component"},filename:"pure-switcher.tsx",isNew:!1},{id:"pivot-header",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/aBR%26EXlQb/2021-12-02%25252015.19.58.gif",source:"import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport insertCss from 'insert-css';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/total-group.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    const fields = {\n      rows: ['province', 'city'],\n      columns: ['type'],\n      values: ['price', 'cost'],\n    };\n\n    const SwitcherDemo = () => {\n      return (\n        <div>\n          <SheetComponent\n            sheetType={'pivot'}\n            adaptive={false}\n            dataCfg={{ data, fields }}\n            options={s2Options}\n            header={{ switcherCfg: { open: true } }}\n          />\n        </div>\n      );\n    };\n\n    ReactDOM.render(<SwitcherDemo />, document.getElementById('container'));\n  });\n\ninsertCss(`\n  .antv-s2-switcher-item.checkable-item {\n    align-items: center;\n  }\n`);\n",title:{zh:"维度切换头部组件",en:"Switcher header component"},filename:"pivot-header.tsx",isNew:!1},{id:"pivot",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/WaJLe8CSf/2021-11-16%25252022.19.04.gif",source:"import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent, Switcher } from '@antv/s2-react';\nimport insertCss from 'insert-css';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/total-group.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    const defaultFields = {\n      rows: ['province', 'city'],\n      columns: ['type'],\n      values: ['price', 'cost'],\n    };\n\n    const defaultSwitcherFields = {\n      rows: {\n        items: [{ id: 'province' }, { id: 'city' }],\n      },\n      columns: {\n        items: [{ id: 'type' }],\n      },\n      values: {\n        selectable: true,\n        items: [{ id: 'price' }, { id: 'cost' }],\n      },\n    };\n\n    // 生成 switcher 所需要的 fields 结构\n    function generateSwitcherFields(updatedResult) {\n      return {\n        rows: { items: updatedResult.rows.items },\n        columns: { items: updatedResult.columns.items },\n        values: {\n          selectable: true,\n          items: updatedResult.values.items,\n        },\n      };\n    }\n\n    // 生成 dataCfg fields 结构\n    function generateFields(updatedResult) {\n      return {\n        rows: updatedResult.rows.items.map((i) => i.id),\n        columns: updatedResult.columns.items.map((i) => i.id),\n        values: updatedResult.values.items\n          .filter(\n            (i) =>\n              !updatedResult.values.hideItems.find((hide) => hide.id === i.id),\n          )\n          .map((i) => i.id),\n      };\n    }\n\n    const SwitcherDemo = () => {\n      const [fields, setFields] = useState(defaultFields);\n      const [switcherFields, setSwitcherFields] = useState(\n        defaultSwitcherFields,\n      );\n\n      const onSubmit = (result) => {\n        console.log('result:', result);\n        setFields(generateFields(result));\n        setSwitcherFields(generateSwitcherFields(result));\n      };\n\n      return (\n        <div>\n          <Switcher {...switcherFields} onSubmit={onSubmit} />\n          <SheetComponent\n            sheetType={'pivot'}\n            adaptive={false}\n            dataCfg={{ data, fields }}\n            options={s2Options}\n          />\n        </div>\n      );\n    };\n\n    ReactDOM.render(<SwitcherDemo />, document.getElementById('container'));\n  });\n\ninsertCss(`\n  .antv-s2-switcher-item.checkable-item {\n    align-items: center;\n  }\n`);\n",title:{zh:"透视表维度切换",en:"Switcher in pivot sheet"},filename:"pivot.tsx",isNew:!1},{id:"pivot-with-children",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/EMriYgmG5/2021-11-16%25252022.20.42.gif",source:"import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent, Switcher } from '@antv/s2-react';\nimport insertCss from 'insert-css';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/pivot-switcher-with-chidlren.json',\n)\n  .then((res) => res.json())\n  .then((data) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    const defaultFields = {\n      rows: ['province', 'city'],\n      columns: ['type'],\n      values: ['price', 'price-ac', 'price-rc', 'cost', 'cost-ac', 'cost-rc'],\n    };\n\n    const defaultSwitcherFields = {\n      rows: {\n        items: [{ id: 'province' }, { id: 'city' }],\n      },\n      columns: {\n        items: [{ id: 'type' }],\n      },\n      values: {\n        expandable: true,\n        selectable: true,\n        items: [\n          { id: 'price', children: [{ id: 'price-ac' }, { id: 'price-rc' }] },\n          { id: 'cost', children: [{ id: 'cost-ac' }, { id: 'cost-rc' }] },\n        ],\n      },\n    };\n\n    // 生成 switcher 所需要的 fields 结构\n    function generateSwitcherFields(updatedResult) {\n      const values = updatedResult.values.items.reduce((result, item) => {\n        if (defaultSwitcherFields.values.items.find((i) => i.id === item.id)) {\n          result.push(item);\n        } else {\n          const parent = result[result.length - 1];\n          parent.children = parent.children ? parent.children : [];\n          parent.children.push(item);\n        }\n        return result;\n      }, []);\n\n      return {\n        rows: { items: updatedResult.rows.items },\n        columns: { items: updatedResult.columns.items },\n        values: {\n          selectable: true,\n          expandable: true,\n          items: values,\n        },\n      };\n    }\n\n    // 生成 dataCfg fields 结构\n    function generateFields(updatedResult) {\n      return {\n        rows: updatedResult.rows.items.map((i) => i.id),\n        columns: updatedResult.columns.items.map((i) => i.id),\n        values: updatedResult.values.items\n          .filter(\n            (i) =>\n              !updatedResult.values.hideItems.find((hide) => hide.id === i.id),\n          )\n          .map((i) => i.id),\n      };\n    }\n\n    const SwitcherDemo = () => {\n      const [fields, setFields] = useState(defaultFields);\n      const [switcherFields, setSwitcherFields] = useState(\n        defaultSwitcherFields,\n      );\n\n      const onSubmit = (result) => {\n        setFields(generateFields(result));\n        setSwitcherFields(generateSwitcherFields(result));\n      };\n\n      return (\n        <div>\n          <Switcher\n            {...switcherFields}\n            // 是否允许指标在行列维度之间相互切换\n            allowExchangeHeader={true}\n            onSubmit={onSubmit}\n          />\n          <SheetComponent\n            sheetType={'pivot'}\n            adaptive={false}\n            dataCfg={{ data, fields }}\n            options={s2Options}\n          />\n        </div>\n      );\n    };\n\n    ReactDOM.render(<SwitcherDemo />, document.getElementById('container'));\n  });\n\ninsertCss(`\n  .antv-s2-switcher-item.checkable-item {\n    align-items: center;\n  }\n`);\n",title:{zh:"透视表子维度切换",en:"Switcher with children in pivot sheet"},filename:"pivot-with-children.tsx",isNew:!1},{id:"table",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/%24Z5M%26Kfq9%26/switcher.gif",source:"import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent, Switcher } from '@antv/s2-react';\nimport insertCss from 'insert-css';\nimport '@antv/s2-react/dist/style.min.css';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    // 明细表只需要 columns 字段\n    const defaultFields = {\n      columns: ['province', 'city', 'type', 'sub_type', 'number'],\n    };\n\n    const defaultSwitcherFields = {\n      columns: {\n        selectable: true,\n        items: [\n          { id: 'province', displayName: '省份 (province)' },\n          { id: 'city', displayName: '城市 (city)' },\n          { id: 'type', displayName: '类别 (type)' },\n          { id: 'sub_type', displayName: '子类别 (sub_type)' },\n          { id: 'number', displayName: '数量 (number)' },\n        ],\n      },\n    };\n\n    // 生成 switcher 所需要的 fields 结构\n    function generateSwitcherFields(updatedResult) {\n      return {\n        columns: {\n          selectable: true,\n          items: updatedResult.columns.items,\n        },\n      };\n    }\n\n    // 生成 dataCfg fields 结构\n    function generateFields(updatedResult) {\n      return {\n        columns: updatedResult.columns.items.map((i) => i.id),\n      };\n    }\n\n    const SwitcherDemo = () => {\n      const [fields, setFields] = useState(defaultFields);\n      const [hiddenColumnFields, setHiddenColumnFields] = useState([]);\n      const [switcherFields, setSwitcherFields] = useState(\n        defaultSwitcherFields,\n      );\n\n      const onSubmit = (result) => {\n        setFields(generateFields(result));\n        setSwitcherFields(generateSwitcherFields(result));\n        setHiddenColumnFields(result.columns.hideItems.map((i) => i.id));\n      };\n\n      return (\n        <div>\n          <Switcher sheetType=\"table\" {...switcherFields} onSubmit={onSubmit} />\n          <SheetComponent\n            sheetType=\"table\"\n            adaptive={false}\n            dataCfg={{ ...dataCfg, fields }}\n            options={{ ...s2Options, interaction: { hiddenColumnFields } }}\n          />\n        </div>\n      );\n    };\n\n    ReactDOM.render(<SwitcherDemo />, document.getElementById('container'));\n  });\n\ninsertCss(`\n  .antv-s2-switcher-item.checkable-item {\n    align-items: center;\n  }\n`);\n",title:{zh:"明细表维度切换",en:"Switcher in table sheet"},filename:"table.tsx",isNew:!1}],icon:"",id:"switcher",title:{en:"Switcher",zh:"维度切换组件"},api:{zh:" \n \n# React 维度切换组件 \n \n## Switcher 组件 Props \n \n| 属性 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | -- | \n| rows | 行头配置描述 | [SwitcherField](#switcherfield) |  |  | \n| columns | 列头配置描述 | [SwitcherField](#switcherfield) |  |  | \n| values | 指标配置描述 | [SwitcherField](#switcherfield) |  |  | \n| disabled | 是否禁用 | `boolean` | `false` |  | \n| title | 打开切换弹窗的触发节点 | `ReactNode` |  |  | \n| contentTitleText | 弹窗默认标题文字 | `string` | 行列切换 |  | \n| resetText | 重置按钮文字 | `string` | 恢复默认 |  | \n| innerContentClassName | 弹出框内容样式名 | `string` |  |  | \n| allowExchangeHeader| 是否允许指标在行列维度之间相互切换 | `boolean` |  |  `true`| \n| onSubmit | 关闭弹窗后，处理行列切换结果的回调函数 | `(result:` [SwitcherResult](#switcherresult)`) => void` |  |  | \n| popover | 弹窗配置，透传给 `antd` 的 `Popover` 组件 | [PopoverProps](https://ant.design/components/popover-cn/#API) |  |  | \n \n## SwitcherField \n \n行列头以及指标值的配置描述对象 \n \n| 属性 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | -- | \n| items | 配置字段对象 | [SwitcherItem](#switcheritem)`[]` | - | ✓ | \n| expandable | 是否打开展开子项的 checkbox 用于控制展开和隐藏子项 | `boolean` | `false` |  | \n| expandText | 展开子项的 checkbox 对应的文字 | `string` | `展开子项` |  | \n| selectable | 是否打开字段的 checkbox 用于控制显隐 | `boolean` | `false` |  | \n| allowEmpty | 当前维度是否可以将全部子项拖出 | `boolean` | `true` |  | \n \n## SwitcherItem \n \n配置字段对象 \n \n| 属性 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | -- | \n| id | 字段 id | `string` | - | ✓ | \n| displayName | 字段显示名字，该字段不存在时直接显示 id | `string` | - |  | \n| checked | 字段是否需要显示 | `boolean` | `true` |  | \n| children | 如果字段存在关联子项（如：同环比），使用该属性配置子项 | [SwitcherItem](#switcheritem)`[]` | `[]` |  | \n \n## SwitcherResult \n \n关闭弹窗后，处理行列切换结果的回调函数的参数 \n \n| 属性 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | -- | \n| rows | 所有行头字段操作结果 | [SwitcherResultItem](#switcherresultitem) |  |  | \n| columns | 所有列头字段操作结果 | [SwitcherResultItem](#switcherresultitem) |  |  | \n| values | 所有指标字段操作结果 | [SwitcherResultItem](#switcherresultitem) |  |  | \n \n## SwitcherResultItem \n \n关闭弹窗后，每个维度结果的描述对象 \n \n| 属性 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | -- | \n| items | 全部字段的被**扁平化**集合，按拖拽后顺序排序 | [SwitcherItem](#switcheritem)`[]` | `[]` |  | \n| hideItems | 所有需要隐藏字段被**扁平化**的集合，按拖拽后顺序排序 | [SwitcherItem](#switcheritem)`[]` | `[]` |  | \n \n## SwitcherCfgProps \n \n内置 header 组件配置参数，本质上是 Switcher 组件 Props 的子集 \n \n| 属性 | 说明 | 类型 | 默认值 | 必选 | \n| -- | -- | -- | -- | -- | \n| sheetType | 表格类型：<br/> 1. `pivot`: 透视表 <br/> 2. `table`: 明细表 <br> 3. `gridAnalysis`: 网格分析表 <br/> 4. `strategy`: 趋势分析表 | `pivot | table | gridAnalysis | strategy` | `pivot` |  |  |  | \n| title | 打开切换弹窗的触发节点 | `ReactNode` |  |  | \n| contentTitleText | 弹窗默认标题文字 | `string` | 行列切换 |  | \n| resetText | 重置按钮文字 | `string` | 恢复默认 |  | \n| innerContentClassName | 弹出框内容样式名 | `string` |  |  | \n| popover | 弹窗配置，透传给 `antd` 的 `Popover` 组件 | [PopoverProps](https://ant.design/components/popover-cn/#API) | \n| disabled | 是否禁用 | `boolean` | `false` |  | \n \n# Vue 维度切换组件 \n \n开发中，敬请期待 \n \n \n",en:" \n \n## React Dimension Toggle Component \n \n### Switcher Component Props \n \n| Attributes            | illustrate                                                                                                 | type                                                          | Defaults                 | required | \n| :-------------------- | :--------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------ | :----------------------- | :------- | \n| rows                  | Header configuration description                                                                           | [SwitcherField](#switcherfield)                               |                          |          | \n| columns               | Column Header Configuration Description                                                                    | [SwitcherField](#switcherfield)                               |                          |          | \n| values                | Indicator configuration description                                                                        | [SwitcherField](#switcherfield)                               |                          |          | \n| disabled              | Whether to disable                                                                                         | `boolean`                                                     | `false`                  |          | \n| title                 | Open the trigger node of the toggle popup window                                                           | `ReactNode`                                                   |                          |          | \n| contentTitleText      | Popup window default title text                                                                            | `string`                                                      | Row and column switching |          | \n| resetText             | reset button text                                                                                          | `string`                                                      | reset                    |          | \n| innerContentClassName | Popup box content style name                                                                               | `string`                                                      |                          |          | \n| allowExchangeHeader   | Whether to allow indicators to switch between row and column dimensions                                    | `boolean`                                                     |                          | `true`   | \n| onSubmit              | After the popup window is closed, the callback function for processing the row and column switching result | `(result:` [SwitcherResult](#switcherresult) `) => void`      |                          |          | \n| popover               | Popup window configuration, transparently passed to the `antd` component of `Popover`                      | [PopoverProps](https://ant.design/components/popover-cn/#API) |                          |          | \n \n### SwitcherField \n \nRow and column headers and index value configuration description objects \n \n| Attributes | illustrate                                                                                                  | type                               | Defaults | required | \n| :--------- | :---------------------------------------------------------------------------------------------------------- | :--------------------------------- | :------- | :------- | \n| items      | Configure field objects                                                                                     | [SwitcherItem](#switcheritem) `[]` | -        | ✓        | \n| expandable | Whether to open the checkbox for expanding subitems is used to control the expansion and hiding of subitems | `boolean`                          | `false`  |          | \n| expandText | Expand the text corresponding to the checkbox of the subitem                                                | `string`                           | `展开子项`   |          | \n| selectable | Whether to open the checkbox of the field to control the display and hiding                                 | `boolean`                          | `false`  |          | \n| allowEmpty | Whether the current dimension can drag out all sub-items                                                    | `boolean`                          | `true`   |          | \n \n### SwitcherItem \n \nConfigure field objects \n \n| Attributes  | illustrate                                                                                                     | type                               | Defaults | required | \n| :---------- | :------------------------------------------------------------------------------------------------------------- | :--------------------------------- | :------- | :------- | \n| id          | field id                                                                                                       | `string`                           | -        | ✓        | \n| displayName | The name of the field is displayed, and the id is displayed directly when the field does not exist             | `string`                           | -        |          | \n| checked     | Whether the field needs to be displayed                                                                        | `boolean`                          | `true`   |          | \n| children    | If the field has associated sub-items (such as: same-ring ratio), use this property to configure the sub-items | [SwitcherItem](#switcheritem) `[]` | `[]`     |          | \n \n### SwitcherResult \n \nAfter the popup window is closed, the parameter of the callback function that processes the row and column switching result \n \n| Attributes | illustrate                                | type                                      | Defaults | required | \n| :--------- | :---------------------------------------- | :---------------------------------------- | :------- | :------- | \n| rows       | All line header field operation results   | [SwitcherResultItem](#switcherresultitem) |          |          | \n| columns    | All column header field operation results | [SwitcherResultItem](#switcherresultitem) |          |          | \n| values     | All indicator field operation results     | [SwitcherResultItem](#switcherresultitem) |          |          | \n \n### SwitcherResultItem \n \nAfter closing the pop-up window, the description object of each dimension result \n \n| Attributes | illustrate                                                                                       | type                               | Defaults | required | \n| :--------- | :----------------------------------------------------------------------------------------------- | :--------------------------------- | :------- | :------- | \n| items      | A **flattened** collection of all fields, sorted in order after dragging                         | [SwitcherItem](#switcheritem) `[]` | `[]`     |          | \n| hideItems  | All collections that need to be **flattened with** hidden fields, sorted in order after dragging | [SwitcherItem](#switcheritem) `[]` | `[]`     |          | \n \n### SwitcherCfgProps \n \nBuilt-in header component configuration parameters, essentially a subset of Switcher component Props \n \n\\| Attribute | Description | Type | Default | Required| | :-- | :-- | :-- | :-- | :-- | --- | --- | --- | --- | --- | | sheetType | Sheet type:\\ \n1\\. `pivot` : pivot table\\ \n2\\. `table` : detailed list\\ \n3\\. `gridAnalysis` : grid analysis table\\ \n4\\. `strategy` : trend analysis table | `string` `pivot | table | gridAnalysis | strategy` | `pivot` | | | | `ReactNode` | switch | | | `Popover` | reset button text | `string` | restore default | | | `antd` | popup box content style name | `string` | | | [](https://ant.design/components/popover-cn/#API)| | disabled | whether to disable | `boolean` | `false` | | \n \n## Vue Dimension Toggle Component \n \nIn development, please look forward to \n \n \n"},childrenKey:"demos",order:4}],childrenKey:"examples"},{id:"custom",title:{zh:"自定义",en:"Custom Hooks"},icon:"edit",examples:[{demos:[{id:"custom-layout-arrange",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/iw1AQBleoJ/634d1162-b4a4-472c-9bf5-76eca25c6b50.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      data: res.data,\n      meta: [\n        {\n          field: 'number',\n          name: '数量',\n        },\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '类别',\n        },\n        {\n          field: 'sub_type',\n          name: '子类别',\n        },\n      ],\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      layoutArrange: (s2, parent, field, fieldValues) => {\n        console.log(fieldValues);\n        if (field === 'city' && parent.label === '浙江省') {\n          // layoutArrange 可手动设置行、列顺序，适用于局部调整，非规则调整。\n          // 手动设置浙江省内部市的顺序，比如指定「宁波市」在第一位。\n          const keyIndex = fieldValues.indexOf('宁波市');\n          fieldValues.splice(keyIndex, 1);\n          fieldValues.unshift('宁波市');\n        }\n        return fieldValues;\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义行列顺序",en:"Custom Layout Arrange"},filename:"custom-layout-arrange.ts",isNew:!1},{id:"custom-coordinate",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/VGuJd4OP2J/a21c6e22-05c0-4da1-860d-75be53afc43b.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      data: res.data,\n      meta: [\n        {\n          field: 'number',\n          name: '数量',\n        },\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '类别',\n        },\n        {\n          field: 'sub_type',\n          name: '子类别',\n        },\n      ],\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      layoutCoordinate: (facetCfg, rowNode, colNode) => {\n        // layoutCoordinate 用于改变行列叶子结点的尺寸（长、宽）和坐标（x、y）\n        // 改变「宁波市」节点高度\n        console.log(rowNode);\n        console.log(colNode);\n        if (rowNode?.label === '宁波市') {\n          rowNode.height = 100;\n        }\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义行列坐标",en:"Custom Coordinate"},filename:"custom-coordinate.ts",isNew:!1},{id:"custom-data-position",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/SeGpS6Mf3p/c8b32cff-49bd-49f0-a2e8-03c5a769fa4c.png",source:"import { PivotSheet, VALUE_FIELD, EXTRA_FIELD } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      data: res.data,\n      meta: [\n        {\n          field: 'number',\n          name: '数量',\n        },\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '类别',\n        },\n        {\n          field: 'sub_type',\n          name: '子类别',\n        },\n      ],\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      layoutDataPosition: (s2, getCellData) => {\n        // layoutDataPosition 动态改变数据的定位，确定修订某个或者某些格子的值\n        // 下面以更改「浙江省-宁波市-家具-桌子」的单元格数据为例\n        const getCellMeta = (rowIndex, colIndex) => {\n          const viewMeta = getCellData(rowIndex, colIndex);\n          if (rowIndex === 2 && colIndex === 0) {\n            return {\n              ...viewMeta,\n              data: {\n                province: '浙江省',\n                city: '宁波市',\n                type: '家具',\n                sub_type: '桌子',\n                number: 999,\n                [EXTRA_FIELD]: 'number',\n                [VALUE_FIELD]: 999,\n              },\n              fieldValue: 999,\n            };\n          }\n          return viewMeta;\n        };\n        return getCellMeta;\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义数据位置",en:"Custom Layout Data Position"},filename:"custom-data-position.ts",isNew:!1},{id:"custom-layout-hierarchy",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/s33%26UjDslN/fed91224-4700-455a-b50f-8adc5cad8abd.png",source:"import { PivotSheet, Node, generateId } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      data: [\n        ...res.data,\n        ...[\n          {\n            province: '浙江省',\n            city: '宁波A',\n            type: '家具',\n            sub_type: '桌子',\n            number: 1001,\n          },\n          {\n            province: '浙江省',\n            city: '宁波A',\n            type: '家具',\n            sub_type: '沙发',\n            number: 1002,\n          },\n          {\n            province: '浙江省',\n            city: '宁波A',\n            type: '办公用品',\n            sub_type: '笔',\n            number: 1003,\n          },\n          {\n            province: '浙江省',\n            city: '宁波A',\n            type: '办公用品',\n            sub_type: '纸张',\n            number: 1004,\n          },\n        ],\n      ],\n      meta: [\n        {\n          field: 'number',\n          name: '数量',\n        },\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '类别',\n        },\n        {\n          field: 'sub_type',\n          name: '子类别',\n        },\n      ],\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      layoutHierarchy: (s2, node) => {\n        // layoutHierarchy 用于手动控制行列结构的增加、删除的特殊场景。\n        // 以 「宁波市」为例，删除其节点，增加宁波A和宁波B节点。\n        const { field, label } = node;\n        if (field === 'city' && label === '宁波市') {\n          const preLabel = '宁波A';\n          const nextLabel = '宁波B';\n\n          const parentNode = node.parent;\n          const preUniqueId = generateId(parentNode.id, preLabel);\n          const nextUniqueId = generateId(parentNode.id, nextLabel);\n          const preNode = new Node({\n            ...node,\n            ...node.config,\n            id: preUniqueId,\n            label: preLabel,\n            value: preLabel,\n            query: { ...parentNode.query, [node.key]: preLabel },\n          });\n\n          const nextNode = new Node({\n            ...node,\n            ...node.config,\n            id: nextUniqueId,\n            label: nextLabel,\n            value: nextLabel,\n            query: { ...parentNode.query, [node.key]: nextLabel },\n          });\n\n          return {\n            push: [nextNode],\n            unshift: [preNode],\n            delete: true,\n          };\n        }\n        return null;\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义层级结构",en:"Custom Layout Hierarchy"},filename:"custom-layout-hierarchy.ts",isNew:!1},{id:"custom-value-order",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*Ofk_QYa4eE0AAAAAAAAAAAAADmJ7AQ/fmt.avif",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n        valueInCols: true,\n        // 自定义指标属性层级顺序, 即 fields.values 的顺序 (从 0 开始)\n        customValueOrder: 1,\n      },\n      data: res.data,\n      meta: [\n        {\n          field: 'number',\n          name: '数量',\n        },\n        {\n          field: 'province',\n          name: '省份',\n        },\n        {\n          field: 'city',\n          name: '城市',\n        },\n        {\n          field: 'type',\n          name: '类别',\n        },\n        {\n          field: 'sub_type',\n          name: '子类别',\n        },\n      ],\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n    };\n\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义指标维度层级顺序",en:"Custom Value Order"},filename:"custom-value-order.ts",isNew:!1}],icon:"",id:"custom-layout",title:{en:"Custom Layout",zh:"自定义布局"},api:{zh:" \n \n## LayoutArrange \n \n```js \nLayoutArrange = (spreadsheet: SpreadSheet, parent: Node, field: string, fieldValues: string[]) => string[]; \n``` \n \n功能描述：自定义顺序 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| node | [Node](/docs/api/basic-class/node) | ✓ |  |   当前渲染的 node 节点 | \n| field | `string` | ✓ |  |   当前的字段名 | \n| fieldValues | `string[]` | ✓ |  |   当前字段值 | \n \n \n## LayoutCoordinate \n \n```js \nLayoutCoordinate = (spreadsheet: SpreadSheet, rowNode: Node, colNode: Node) => void \n``` \n \n功能描述：自定义坐标 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| rowNode | [Node](/docs/api/basic-class/node) | ✓ |    | 行节点 | \n| colNode | [Node](/docs/api/basic-class/node) | ✓ |    | 列节点 | \n \n \n \n## LayoutDataPosition \n \n```js \nLayoutDataPosition = (spreadsheet: SpreadSheet, getCellData: GetCellMeta) => GetCellMeta \n``` \n \n功能描述：自定义数据 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | --- | ---  | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| getCellData | [GetCellMeta](#viewmeta) | ✓ |    | 获取单元格数据和位置等信息| \n \n```ts \ntype GetCellMeta = (rowIndex?: number, colIndex?: number) => ViewMeta; \n``` \n \n \n \n## LayoutHierarchy \n \n```js \nLayoutHierarchy = (spreadsheet: SpreadSheet, node: Node) => LayoutHierarchyReturnType; \n``` \n \n功能描述：自定义层级结构 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| node | [Node](/docs/api/basic-class/node) | ✓ |  |   当前渲染的 node 节点 | \n \n```ts \ninterface LayoutHierarchyReturnType { \n  push?: Node[]; \n  unshift?: Node[]; \n  delete?: boolean; \n} \n``` \n \n \n",en:" \n \n## LayoutArrange \n \n```js \nLayoutArrange = (spreadsheet: SpreadSheet, parent: Node, field: string, fieldValues: string[]) => string[]; \n``` \n \nFunction description: custom order \n \n| parameter   | type                                                | required | Defaults | Functional description                                               | \n| ----------- | --------------------------------------------------- | :------: | -------- | -------------------------------------------------------------------- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |     ✓    |          | Table class instance, which can access any configuration information | \n| node        | [node](/docs/api/basic-class/node)               |     ✓    |          | The currently rendered node node                                     | \n| field       | `string`                                            |     ✓    |          | current field name                                                   | \n| fieldValues | `string[]`                                          |     ✓    |          | current field value                                                  | \n \n \n \n## LayoutCoordinate \n \n```js \nLayoutCoordinate = (spreadsheet: SpreadSheet, rowNode: Node, colNode: Node) => void \n``` \n \nFunction description: custom coordinates \n \n| parameter   | type                                                | required | Defaults | Functional description                                               | \n| ----------- | --------------------------------------------------- | :------: | -------- | -------------------------------------------------------------------- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |     ✓    |          | Table class instance, which can access any configuration information | \n| rowNode     | [node](/docs/api/basic-class/node)               |     ✓    |          | row node                                                             | \n| colNode     | [node](/docs/api/basic-class/node)               |     ✓    |          | column node                                                          | \n \n \n \n## LayoutDataPosition \n \n```js \nLayoutDataPosition = (spreadsheet: SpreadSheet, getCellData: GetCellMeta) => GetCellMeta \n``` \n \nFunction description: custom data \n \n| parameter   | type                                                | required | Defaults | Functional description                                               | \n| ----------- | --------------------------------------------------- | :------: | -------- | -------------------------------------------------------------------- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |     ✓    |          | Table class instance, which can access any configuration information | \n| getCellData | [GetCellMeta](#viewmeta)                            |     ✓    |          | Get information such as cell data and position                       | \n \n```ts \ntype GetCellMeta = (rowIndex?: number, colIndex?: number) => ViewMeta; \n``` \n \n \n \n## Layout Hierarchy \n \n```js \nLayoutHierarchy = (spreadsheet: SpreadSheet, node: Node) => LayoutHierarchyReturnType; \n``` \n \nFunction description: custom hierarchical structure \n \n| parameter   | type                                                | required | Defaults | Functional description                                               | \n| ----------- | --------------------------------------------------- | :------: | -------- | -------------------------------------------------------------------- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |     ✓    |          | Table class instance, which can access any configuration information | \n| node        | [node](/docs/api/basic-class/node)               |     ✓    |          | The currently rendered node node                                     | \n \n```ts \ninterface LayoutHierarchyReturnType { \n  push?: Node[]; \n  unshift?: Node[]; \n  delete?: boolean; \n} \n``` \n \n \n"},childrenKey:"demos",order:1},{demos:[{id:"custom-svg-icon",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/%24KQ3JqKkrA/67f074b6-739b-4a61-a5c5-b18488a65797.png",source:'import { PivotSheet, Node } from \'@antv/s2\';\n\nfetch(\n  \'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json\',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById(\'container\');\n    const s2DataConfig = {\n      fields: {\n        rows: [\'province\', \'city\'],\n        columns: [\'type\', \'sub_type\'],\n        values: [\'number\'],\n      },\n      meta: res.meta,\n      data: res.data,\n    };\n    const s2Options = {\n      width: 600,\n      height: 480,\n      customSVGIcons: [\n        {\n          name: \'customKingIcon\',\n          // svg 为 url 地址或字符串\n          // svg: `<?xml version="1.0" encoding="UTF-8"?><svg t="1634603945212" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="558" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M605.61 884.79h-24.26c-21.34 0-38.66 17.32-38.66 38.66 0 21.34 17.32 38.66 38.66 38.66h24.26c21.34 0 38.66-17.32 38.66-38.66 0-21.35-17.32-38.66-38.66-38.66z" fill="#040000" p-id="559"></path><path d="M950.47 419.76c-22.17-15.48-51.17-16.01-73.92-1.33L715.7 522.53 573.09 223.42c-10.95-22.98-33.55-37.43-58.97-37.75h-0.85c-25.09 0-47.67 13.84-59.05 36.29L302.25 521.82 154.9 419.61c-22-15.18-50.71-15.73-73.27-1.46-22.53 14.32-34.23 40.57-29.8 66.9l70.9 421.76c5.33 32.04 32.82 55.3 65.31 55.3h272.43c21.34 0 38.66-17.32 38.66-38.66 0-21.34-17.32-38.66-38.66-38.66H197.44l-64.99-386.62 136.17 94.46a66.14 66.14 0 0 0 54.01 9.79 66.097 66.097 0 0 0 42.81-34.28l147.54-291.11 138.35 290.2c8.21 17.19 23.41 30.03 41.76 35.19 18.37 5.24 38 2.21 53.99-8.1l148.62-96.17-87.74 386.65h-60.1c-21.34 0-38.66 17.32-38.66 38.66 0 21.34 17.32 38.66 38.66 38.66h68.96c31.16 0 57.71-21.22 64.58-51.57l95.72-421.86c5.97-26.39-4.47-53.42-26.65-68.93zM514.74 151.68c28.08 0 50.85-22.76 50.85-50.85s-22.77-50.85-50.85-50.85c-28.09 0-50.85 22.76-50.85 50.85s22.77 50.85 50.85 50.85zM973.15 277.37c-28.08 0-50.85 22.77-50.85 50.85 0 28.09 22.76 50.85 50.85 50.85 28.08 0 50.85-22.76 50.85-50.85 0-28.08-22.77-50.85-50.85-50.85zM101.69 328.22c0-28.08-22.76-50.85-50.85-50.85S0 300.14 0 328.22c0 28.09 22.76 50.85 50.85 50.85s50.84-22.77 50.84-50.85z" fill="#040000" p-id="560"></path></svg>`,\n          svg: \'https://gw.alipayobjects.com/zos/bmw-prod/f44eb1f5-7cea-45df-875e-76e825a6e0ab.svg\',\n        },\n      ],\n      // 使用刚定义的 icon\n      headerActionIcons: [\n        {\n          iconNames: [\'customKingIcon\'],\n          belongsCell: \'rowCell\',\n        },\n      ],\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    // 使用\n    s2.render();\n  });\n',title:{zh:"自定义SVG图标",en:"custom svg icon"},filename:"custom-svg-icon.ts",isNew:!1},{id:"custom-header-action-icon",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/pBAAuAlwEB/custom.gif",source:"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SheetComponent } from '@antv/s2-react';\nimport '@antv/s2-react/dist/style.min.css';\n\nconst CornerTooltip = <div>CornerTooltip</div>;\n\nconst RowTooltip = <div>RowTooltip</div>;\n\nconst ColTooltip = <div>ColTooltip</div>;\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const s2Options = {\n      width: 600,\n      height: 480,\n      customSVGIcons: [\n        {\n          name: 'Filter',\n          svg: 'https://gw.alipayobjects.com/zos/antfincdn/gu1Fsz3fw0/filter%26sort_filter.svg',\n        },\n      ],\n      showDefaultHeaderActionIcon: false,\n      headerActionIcons: [\n        {\n          iconNames: ['SortDown'],\n          belongsCell: 'colCell',\n          displayCondition: (meta) => meta.level > 0,\n          action: (props) => {\n            const { meta, event } = props;\n            console.log(meta);\n            meta.spreadsheet.handleGroupSort(event, meta);\n          },\n        },\n        {\n          iconNames: ['Filter'],\n          belongsCell: 'colCell',\n          displayCondition: (meta) => meta.id === 'root[&]家具',\n          action: (props) => {\n            const { meta, event } = props;\n            meta.spreadsheet.tooltip.show({\n              position: { x: event.clientX, y: event.clientY },\n              content: ColTooltip,\n            });\n          },\n        },\n        {\n          iconNames: ['SortUp'],\n          belongsCell: 'cornerCell',\n          action: (props) => {\n            const { meta, event } = props;\n            meta.spreadsheet.tooltip.show({\n              position: { x: event.clientX, y: event.clientY },\n              content: CornerTooltip,\n            });\n          },\n        },\n        {\n          iconNames: ['DrillDownIcon'],\n          belongsCell: 'rowCell',\n          action: (props) => {\n            const { meta, event } = props;\n            meta.spreadsheet.tooltip.show({\n              position: { x: event.clientX, y: event.clientY },\n              content: RowTooltip,\n            });\n          },\n        },\n      ],\n      style: {\n        colCfg: {\n          hideMeasureColumn: true,\n        },\n      },\n    };\n\n    ReactDOM.render(\n      <SheetComponent dataCfg={dataCfg} options={s2Options} />,\n      document.getElementById('container'),\n    );\n  });\n",title:{zh:"自定义行列头操作图标",en:"Custom header action icons"},filename:"custom-header-action-icon.tsx",isNew:!1},{id:"custom-data-cell-icon",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/5a0Ad8vz3/2689a04f-7965-4e30-be6f-9aaefc007482.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/2a5dbbc8-d0a7-4d02-b7c9-34f6ca63cff6.json',\n)\n  .then((res) => res.json())\n  .then((dataCfg) => {\n    const container = document.getElementById('container');\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: false,\n      },\n      // 自定义icon\n      customSVGIcons: [\n        {\n          name: 'Filter',\n          svg: 'https://gw.alipayobjects.com/zos/antfincdn/gu1Fsz3fw0/filter%26sort_filter.svg',\n        },\n      ],\n      conditions: {\n        icon: [\n          {\n            field: 'number',\n            mapping(fieldValue, data) {\n              return {\n                // icon 用于指定图标条件格式所使用的 icon 类型\n                icon: 'Filter',\n                fill: '#30BF78',\n              };\n            },\n          },\n          {\n            field: 'cost',\n            position: 'left',\n            mapping(fieldValue, data) {\n              return {\n                icon: 'CellDown',\n                fill: '#F4664A',\n              };\n            },\n          },\n        ],\n      },\n    };\n    const s2 = new PivotSheet(container, dataCfg, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义单元格图标",en:"Custom data cell icons"},filename:"custom-data-cell-icon.tsx",isNew:!1}],icon:"",id:"custom-icon",title:{en:"custom-icon",zh:"自定义图标"},api:{zh:" \n## CustomSVGIcon \n \n功能描述：用于用户注册自己的 `icon` 图标， 目前只支持 `svg` 格式 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| name | string | ✓ |    | icon 名称 | \n| svg | string | ✓ |    | 目前支持三种格式的svg字符串：base64、svg本地文件、线上图片地址 | \n \n \n \n## HeaderActionIcon \n \n功能描述：为表格行列头角头注册自定义操作 `icon`。如果该配置位空，则展示透视表默认操作icon。 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | 版本 | \n| --- | --- | ---  | --- | --- | --- | \n| iconNames | string[] | ✓ |    | 已经注册的 icon 名称，或用户通过 customSVGIcons 注册的 icon 名称 | | \n| belongsCell | string[] | ✓ | |   需要增加操作图标的单元格名称 cornerCell、colCell、rowCell | | \n| defaultHide | boolean \\| (mete: Node, iconName: string)=> boolean  |  |  |   是否默认隐藏, 如果为 true 则为 hover 后再显示；false 则始终显示  | `1.26.0` 支持配置为一个函数 | \n| displayCondition | (mete: Node, iconName: string)=> boolean |  |  | 展示的过滤条件，可以通过该回调函数用户自定义行列头哪些层级或单元格需要展示 icon。 所有返回值为 true 的 icon 会展示给用户。 | `1.26.0` 回传 `iconName` 并按单个 icon 控制显隐 | \n| action | (headerActionIconProps: HeaderActionIconProps) => void; | ✓ |  | icon 点击之后的执行函数 | 已废弃，请使用 `onClick` | \n| onClick    | `(headerIconClickParams: HeaderIconClickParams) => void;` |   ✓      |     |    | `1.26.0` | \n| onHover   | `(headerIconHoverParams: HeaderIconHoverParams) => void;` |        |     |    | `1.26.0` | \n \n \n",en:" \n \n## CustomSVGIcon \n \nFunction description: It is used for users to register their own `icon` , currently only supports `svg` format \n \n| parameter | type   | required | Defaults | Functional description                                                                      | \n| --------- | ------ | :------: | -------- | ------------------------------------------------------------------------------------------- | \n| name      | string |     ✓    |          | icon name                                                                                   | \n| svg       | string |     ✓    |          | Currently supports svg strings in three formats: base64, svg local files, online image URLs | \n \n \n \n## HeaderActionIcon \n \nFunction description: Register a custom operation `icon` for the row, column, and corner headers of the table. If the configuration bit is empty, the default action icon of the pivot table will be displayed. \n \n| parameter        | type                                                      | required | Defaults | Functional description                                                                                                                                                    | Version                                                                                     | \n| ---------------- | --------------------------------------------------------- | :------: | -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------- | \n| iconNames        | string\\[]                                                 |     ✓    |          | The name of the registered icon, or the name of the icon registered by the user through customSVGIcons                                                                    |                                                                                             | \n| belongs to Cell  | string\\[]                                                 |     ✓    |          | The cell names that need to add operation icons cornerCell, colCell, rowCell                                                                                              |                                                                                             | \n| defaultHide      | boolean \\| (mete: Node, iconName: string) => boolean      |          |          | Whether to hide by default, if it is true, it will be displayed after hover; if false, it will always be displayed                                                        | `1.26.0` supports configuration as a function                                               | \n| displayCondition | (mete: Node, iconName: string) => boolean                 |          |          | Display filter conditions, user-defined which levels or cells need to display icons through this callback function. All icons that return true will be shown to the user. | `1.26.0` returns the `iconName` and presses a single icon to control the display and hiding | \n| action           | (headerActionIconProps: HeaderActionIconProps) => void;   |     ✓    |          | Execution function after icon click                                                                                                                                       | Deprecated, please use `onClick`                                                            | \n| onClick          | `(headerIconClickParams: HeaderIconClickParams) => void;` |     ✓    |          |                                                                                                                                                                           | `1.26.0`                                                                                    | \n| onHover          | `(headerIconHoverParams: HeaderIconHoverParams) => void;` |          |          |                                                                                                                                                                           | `1.26.0`                                                                                    | \n \n \n"},childrenKey:"demos",order:6},{demos:[{id:"custom-tree",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/tSqlcOkaF/ee66a55f-32ea-4b33-8275-30b92439e00b.png",source:"import { PivotSheet } from '@antv/s2';\n\nfetch(\n  'https://render.alipay.com/p/yuyan/180020010001215413/s2/custom-tree.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: [],\n        columns: ['type', 'sub_type'],\n        values: [\n          'measure-a',\n          'measure-b',\n          'measure-c',\n          'measure-d',\n          'measure-e',\n          'measure-f',\n        ],\n        customTreeItems: res.customTreeItem,\n        valueInCols: false,\n      },\n      data: res.data,\n    };\n    const s2Options = {\n      width: 600,\n      height: 480,\n      hierarchyType: 'customTree',\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n    s2.render();\n  });\n",title:{zh:"自定义目录树",en:"custom tree"},filename:"custom-tree.ts",isNew:!1}],icon:"",id:"custom-tree",title:{en:"custom tree",zh:"自定义目录树"},api:{zh:" \n### CustomTreeItem \n \n[详细说明](/docs/manual/advanced/custom/category-tree) [例子](/examples/custom/custom-tree#custom-tree) \n \n功能描述：自定义树状结构的配置，兼容 [antd Tree](https://ant.design/components/tree-cn/) 数据配置项； \n \n| 参数 | 说明 | 类型 | 默认值 | 必选  | \n| --- | --- | --- | --- | ---  | \n| key | 当前节点唯一标识 | `string` |    | ✓ | \n| title | 当前节点展示名 | `string` |    | ✓ | \n| collapsed | 节点是否收起（只会在自身代表非叶子节点生效） | `boolean` |  `false`  |  | \n| description | 节点的额外描述信息，在对应行头的 tooltip 中展示 | `string` |    |  | \n| children | 子节点 | [CustomTreeItem[]](#custom-tree-item) |    |  | \n \n \n",en:" \n \n## DataCellCallback \n \n```js \nDataCellCallback = (viewMeta: ViewMeta, s2: Spreadsheet) => G.Group; \n``` \n \nFunction description: custom value cell, [ViewMeta](#viewmeta) \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n \n## CellCallback \n \n```js \nCellCallback = (node: Node, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => G.Group; \n``` \n \n功能描述：自定义单元格 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| node | [Node](#node) | ✓ |    | 当前渲染的 node 节点 | \n| spreadsheet | [SpreadSheet](#spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| restOptions | `unknown[]` |  |    | 不定参数，传递额外的信息 | \n \n \n## CornerHeaderCallback \n \n```js \nCornerHeaderCallback = (parent: S2CellType, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => void; \n``` \n \nFunction description: custom corner head \n \n| parameter   | type                        | required | Defaults | Functional description                                               | \n| ----------- | --------------------------- | :------: | -------- | -------------------------------------------------------------------- | \n| parents     | [S2CellType](#s2celltype)   |     ✓    |          | parent cell                                                          | \n| spreadsheet | [SpreadSheet](#spreadsheet) |     ✓    |          | Table class instance, which can access any configuration information | \n| restOptions | `unknown[]`                 |          |          | Indeterminate parameters, pass additional information                | \n \n \n"},childrenKey:"demos",order:7},{demos:[{id:"data-cell",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/v3rnigo9e%24/6862c027-eb75-49e4-88e4-40b9855202a1.png",source:"import { DataCell, PivotSheet } from '@antv/s2';\n\n/**\n * 自定义 DataCell，给数值单元格添加背景图\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/cell/data-cell.ts\n */\nclass CustomDataCell extends DataCell {\n  // 重写绘制背景方法, 添加一个背景图片\n  drawBackgroundShape() {\n    this.backgroundShape = this.addShape('image', {\n      attrs: {\n        ...this.getCellArea(),\n        img: 'https://gw.alipayobjects.com/zos/antfincdn/og1XQOMyyj/1e3a8de1-3b42-405d-9f82-f92cb1c10413.png',\n      },\n    });\n  }\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container')!;\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      meta: res.meta,\n      data: res.data,\n    };\n\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: false, // 关闭 hover 十字高亮, 为了视觉效果，可不设置\n      },\n      dataCell: (viewMeta) => {\n        return new CustomDataCell(viewMeta, viewMeta?.spreadsheet);\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义数据单元格",en:"custom data cell"},filename:"data-cell.ts",isNew:!1},{id:"row-cell",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/OIp1I47w2P/c7f38d27-4025-4f05-abed-1d5b47b98145.png",source:"import { PivotSheet, RowCell } from '@antv/s2';\n\n/**\n * 自定义 RowCell，给行头添加背景图\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/cell/row-cell.ts\n */\nclass CustomRowCell extends RowCell {\n  // 覆盖背景绘制，可覆盖或者增加绘制方法\n  drawBackgroundShape() {\n    this.backgroundShape = this.addShape('image', {\n      attrs: {\n        ...this.getCellArea(),\n        img: 'https://gw.alipayobjects.com/zos/antfincdn/og1XQOMyyj/1e3a8de1-3b42-405d-9f82-f92cb1c10413.png',\n      },\n    });\n  }\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      meta: res.meta,\n      data: res.data,\n    };\n    const s2Options = {\n      width: 600,\n      height: 480,\n      rowCell: (node, s2, headConfig) => {\n        return new CustomRowCell(node, s2, headConfig);\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    // 使用\n    s2.render();\n  });\n",title:{zh:"自定义行头单元格",en:"custom row cell"},filename:"row-cell.ts",isNew:!1},{id:"col-cell",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/8gdiktjp8c/3e2453cb-f218-4435-9a24-2f0758bdad62.png",source:"import { PivotSheet, ColCell } from '@antv/s2';\n\n/**\n * 自定义 ColCell，给列头添加背景图\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/cell/col-cell.ts\n */\nclass CustomColCell extends ColCell {\n  // 覆盖背景绘制，可覆盖或者增加绘制方法\n  drawBackgroundShape() {\n    this.backgroundShape = this.addShape('image', {\n      attrs: {\n        ...this.getCellArea(),\n        img: 'https://gw.alipayobjects.com/zos/antfincdn/og1XQOMyyj/1e3a8de1-3b42-405d-9f82-f92cb1c10413.png',\n      },\n    });\n  }\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      meta: res.meta,\n      data: res.data,\n    };\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: false,\n      },\n      colCell: (node, s2, headConfig) => {\n        return new CustomColCell(node, s2, headConfig);\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    // 使用\n    s2.render();\n  });\n",title:{zh:"自定义列头单元格",en:"custom col cell"},filename:"col-cell.ts",isNew:!1},{id:"corner-cell",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/0FL74ArooA/df0a2454-476c-4999-885f-e2a49c740334.png",source:"import { PivotSheet, CornerCell } from '@antv/s2';\n\n/**\n * 自定义 CornerCell，给角头添加背景图\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/cell/corner-cell.ts\n */\nclass CustomCornerCell extends CornerCell {\n  drawBackgroundShape() {\n    this.addShape('image', {\n      attrs: {\n        ...this.getCellArea(),\n        img: 'https://gw.alipayobjects.com/zos/antfincdn/og1XQOMyyj/1e3a8de1-3b42-405d-9f82-f92cb1c10413.png',\n      },\n    });\n  }\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      meta: res.meta,\n      data: res.data,\n    };\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: false,\n      },\n      cornerCell: (node, s2, headConfig) => {\n        return new CustomCornerCell(node, s2, headConfig);\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    // 使用\n    s2.render();\n  });\n",title:{zh:"自定义角头单元格",en:"custom corner cell"},filename:"corner-cell.ts",isNew:!1},{id:"corner-header",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/KH6us7hvnV/a0860c18-3d00-48f9-8483-1b29de6cb149.png",source:"import { PivotSheet } from '@antv/s2';\nimport { Group } from '@antv/g-canvas';\nimport { get } from 'lodash';\n\n/**\n * 自定义整个角头, 添加文字和背景色\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/facet/header/corner.ts\n */\nclass CustomCornerHeader extends Group {\n  node;\n\n  backgroundShape;\n\n  textShape;\n\n  constructor(node) {\n    super({});\n    this.node = node;\n    this.initCornerHeader();\n  }\n\n  initCornerHeader() {\n    this.initBg();\n    this.initText();\n  }\n\n  initBg() {\n    this.backgroundShape = this.addShape('image', {\n      attrs: {\n        x: 0,\n        y: 0,\n        width: get(this.node, 'headerConfig.width'),\n        height: get(this.node, 'headerConfig.height'),\n        img: 'https://gw.alipayobjects.com/zos/antfincdn/og1XQOMyyj/1e3a8de1-3b42-405d-9f82-f92cb1c10413.png',\n      },\n    });\n    this.node.add(this.backgroundShape);\n  }\n\n  initText() {\n    this.textShape = this.addShape('text', {\n      zIndex: 100,\n      attrs: {\n        x: 50,\n        y: 70,\n        text: 'corner in S2',\n        fontFamily: 'PingFang SC',\n        fontSize: 20,\n        fill: 'black',\n        stroke: 'black',\n      },\n    });\n    this.node.add(this.textShape);\n  }\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      meta: res.meta,\n      data: res.data,\n    };\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: false,\n      },\n      cornerHeader: (node, s2, headConfig) => {\n        return new CustomCornerHeader(node);\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义角头",en:"custom corner header"},filename:"corner-header.ts",isNew:!1},{id:"totals-cell",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/W22O8FkKz/8ab7d837-4d91-49c1-81a5-66d6de619206.png",source:"import { PivotSheet, RowCell, renderRect } from '@antv/s2';\n\n/**\n * 继承 RowCell, 单独修改行小计/行总计的背景色和文字颜色 (继承 ColCell, 列小计/列总计 同理)\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/cell/row-cell.ts\n */\nclass CustomTotalsRowCell extends RowCell {\n  // 背景色\n  drawBackgroundShape() {\n    // 总计\n    if (this.meta.isGrandTotals) {\n      this.backgroundShape = renderRect(this, {\n        ...this.getCellArea(),\n        fill: '#f63',\n        fillOpacity: 0.9,\n      });\n      return;\n    }\n\n    // 小计\n    if (this.meta.isSubTotals) {\n      this.backgroundShape = renderRect(this, {\n        ...this.getCellArea(),\n        fill: '#06a',\n        fillOpacity: 0.9,\n      });\n      return;\n    }\n\n    return super.drawBackgroundShape();\n  }\n\n  // 文字\n  getTextStyle() {\n    const originTextStyle = super.getTextStyle();\n\n    // 总计\n    if (this.meta.isGrandTotals) {\n      return {\n        ...originTextStyle,\n        fill: '#fff',\n        fontWeight: 800,\n        fontSize: 16,\n      };\n    }\n\n    // 小计\n    if (this.meta.isSubTotals) {\n      return {\n        ...originTextStyle,\n        fill: '#fff',\n        fontWeight: 800,\n        fontSize: 12,\n      };\n    }\n\n    return super.getTextStyle();\n  }\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      meta: res.meta,\n      data: res.data,\n    };\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: false,\n      },\n      totals: {\n        row: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          subTotalsDimensions: ['province'],\n        },\n        col: {\n          showGrandTotals: true,\n          showSubTotals: true,\n          subTotalsDimensions: ['type'],\n        },\n      },\n      rowCell: (node, s2, headConfig) => {\n        return new CustomTotalsRowCell(node, s2, headConfig);\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义小计/总计单元格",en:"custom totals cell"},filename:"totals-cell.ts",isNew:!1},{id:"custom-specified-cell",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*GSh4R6qdC5IAAAAAAAAAAAAADmJ7AQ/original",source:"/* eslint-disable max-classes-per-file */\nimport { PivotSheet, DataCell, ColCell, CornerCell, RowCell } from '@antv/s2';\n\n/**\n * 自定义 DataCell，通过复写基类方法, 给特定单元格设置背景色, 文字大小, 颜色等...\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/cell/data-cell.ts\n */\nclass CustomDataCell extends DataCell {\n  getBackgroundColor() {\n    // 特定数据\n    if (this.meta.fieldValue >= 6000) {\n      return {\n        backgroundColor: 'red',\n        backgroundColorOpacity: 0.2,\n      };\n    }\n\n    return super.getBackgroundColor();\n  }\n\n  getTextStyle() {\n    const defaultTextStyle = super.getTextStyle();\n\n    // 指定列\n    if (this.meta.rowIndex % 2 === 0) {\n      return {\n        ...defaultTextStyle,\n        fontSize: 16,\n        fill: '#396',\n        textAlign: 'left',\n      };\n    }\n\n    // 指定数据\n    if (this.meta.fieldValue >= 600) {\n      return {\n        ...defaultTextStyle,\n        fontSize: 14,\n        fontWeight: 700,\n        fill: '#f63',\n        textAlign: 'center',\n      };\n    }\n\n    // 指定单元格\n    if (\n      this.meta.id === 'root[&]四川省[&]乐山市-root[&]办公用品[&]纸张[&]number'\n    ) {\n      return {\n        ...defaultTextStyle,\n        fontSize: 12,\n        fontWeight: 200,\n        fill: '#dcdcdc',\n        opacity: 0.9,\n        textAlign: 'right',\n      };\n    }\n\n    // 使用默认处理\n    return super.getTextStyle();\n  }\n}\n\n/**\n * 自定义 ColCell, 通过复写基类方法, 给特定单元格设置文字大小, 颜色等...\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/cell/col-cell.ts\n */\nclass CustomColCell extends ColCell {\n  getTextStyle() {\n    const defaultTextStyle = super.getTextStyle();\n\n    // 指定列\n    if (this.meta.colIndex % 2 === 0) {\n      return {\n        ...defaultTextStyle,\n        fontSize: 16,\n        fill: '#396',\n        textAlign: 'left',\n      };\n    }\n\n    // 指定层级\n    if (this.meta.level >= 1) {\n      return {\n        ...defaultTextStyle,\n        fill: 'pink',\n        textAlign: 'center',\n      };\n    }\n\n    // 指定文本\n    if (this.meta.label === '办公用品') {\n      return {\n        ...defaultTextStyle,\n        fontSize: 22,\n        textAlign: 'right',\n      };\n    }\n\n    // 使用默认处理\n    return super.getTextStyle();\n  }\n}\n\n/**\n * 自定义 CornerCell, 通过复写基类方法, 给特定单元格设置文字大小, 颜色等...\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/cell/corner-cell.ts\n */\nclass CustomCornerCell extends CornerCell {\n  getBackgroundColor() {\n    // 特定数据\n    if (this.meta.field === 'province') {\n      return {\n        backgroundColor: 'red',\n        backgroundColorOpacity: 0.2,\n      };\n    }\n\n    return super.getBackgroundColor();\n  }\n\n  getTextStyle() {\n    const defaultTextStyle = super.getTextStyle();\n\n    if (this.meta.field === 'type') {\n      return {\n        ...defaultTextStyle,\n        fill: '#06a',\n        fontSize: 20,\n        fontWeight: 200,\n      };\n    }\n\n    return super.getTextStyle();\n  }\n}\n\n/**\n * 自定义 RowCell, 通过复写基类方法, 给特定单元格设置文字大小, 颜色等...\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/cell/row-cell.ts\n */\nclass CustomRowCell extends RowCell {\n  getBackgroundColor() {\n    // 特定数据\n    if (this.meta.field === 'province') {\n      return {\n        backgroundColor: 'red',\n        backgroundColorOpacity: 0.2,\n      };\n    }\n\n    return super.getBackgroundColor();\n  }\n\n  getTextStyle() {\n    const defaultTextStyle = super.getTextStyle();\n\n    if (this.meta.field === 'type') {\n      return {\n        ...defaultTextStyle,\n        fill: '#06a',\n        fontSize: 20,\n        fontWeight: 200,\n      };\n    }\n\n    if (this.meta.rowIndex >= 1) {\n      return {\n        ...defaultTextStyle,\n        fill: '#dcdcdc',\n        fontSize: 20,\n        fontWeight: 700,\n      };\n    }\n\n    return super.getTextStyle();\n  }\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      meta: res.meta,\n      data: res.data,\n    };\n    const s2Options = {\n      width: 600,\n      height: 480,\n      cornerCell: (node, spreadsheet, headerConfig) => {\n        return new CustomCornerCell(node, spreadsheet, headerConfig);\n      },\n      colCell: (node, spreadsheet, headerConfig) => {\n        return new CustomColCell(node, spreadsheet, headerConfig);\n      },\n      rowCell: (node, spreadsheet, headerConfig) => {\n        return new CustomRowCell(node, spreadsheet, headerConfig);\n      },\n      dataCell: (viewMeta) => {\n        return new CustomDataCell(viewMeta, viewMeta?.spreadsheet);\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义特定单元格",en:"custom specified cell"},filename:"custom-specified-cell.ts",isNew:!1},{id:"custom-merged-cell",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*B7mTTZYFjv8AAAAAAAAAAAAADmJ7AQ/original",source:"import { PivotSheet, MergedCell } from '@antv/s2';\n\n/**\n * 自定义 MergedCell，改变背景色\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/cell/merged-cell.ts\n */\nclass CustomMergedCell extends MergedCell {\n  // 覆盖背景绘制，可覆盖或者增加绘制方法\n  drawBackgroundShape() {\n    super.drawBackgroundShape();\n    this.backgroundShape.attr('fill', 'red');\n  }\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      meta: res.meta,\n      data: res.data,\n    };\n    const s2Options = {\n      width: 600,\n      height: 480,\n      interaction: {\n        hoverHighlight: false,\n      },\n      mergedCellsInfo: [\n        [\n          { colIndex: 1, rowIndex: 1, showText: true }, // 此单元格的 meta 信息将作为合并单元的 meta 信息\n          { colIndex: 1, rowIndex: 2 },\n          { colIndex: 2, rowIndex: 1 },\n          { colIndex: 2, rowIndex: 2 },\n        ],\n      ],\n      mergedCell: (spreadsheet, cells, meta) =>\n        new CustomMergedCell(spreadsheet, cells, meta),\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    // 使用\n    s2.render();\n  });\n",title:{zh:"自定义合并单元格",en:"custom merged cell"},filename:"custom-merged-cell.ts",isNew:!1},{id:"custom-table-cell",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*-uLETb4gK9AAAAAAAAAAAAAADmJ7AQ/original",source:"/* eslint-disable max-classes-per-file */\nimport { TableColCell, TableDataCell, TableSheet } from '@antv/s2';\n\n/**\n * 自定义 DataCell，通过复写基类方法, 给特定单元格设置背景色, 文字大小, 颜色等...\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/cell/table-data-cell.ts\n */\nclass CustomDataCell extends TableDataCell {\n  getBackgroundColor() {\n    // 特定数据\n    if (this.meta.fieldValue >= 6000) {\n      return {\n        backgroundColor: 'red',\n        backgroundColorOpacity: 0.2,\n      };\n    }\n\n    return super.getBackgroundColor();\n  }\n\n  getTextStyle() {\n    const defaultTextStyle = super.getTextStyle();\n    // 序号\n\n    if (this.meta.colIndex === 0) {\n      return {\n        ...defaultTextStyle,\n        fontWeight: 600,\n        textAlign: 'center',\n      };\n    }\n\n    // 指定列\n    if (this.meta.rowIndex % 2 === 0 && this.meta.colIndex > 0) {\n      return {\n        ...defaultTextStyle,\n        fontSize: 16,\n        fill: '#396',\n        textAlign: 'left',\n      };\n    }\n\n    // 指定数据\n    if (this.meta.fieldValue >= 600 || this.meta.fieldValue === '沙发') {\n      return {\n        ...defaultTextStyle,\n        fontSize: 14,\n        fontWeight: 700,\n        fill: '#f63',\n        textAlign: 'center',\n      };\n    }\n\n    // 指定单元格\n    if (this.meta.id === '7-root[&]省份') {\n      return {\n        ...defaultTextStyle,\n        fontSize: 12,\n        fontWeight: 200,\n        fill: '#dcdcdc',\n        opacity: 0.9,\n        textAlign: 'right',\n      };\n    }\n\n    // 使用默认处理\n    return super.getTextStyle();\n  }\n}\n\n/**\n * 自定义 ColCell, 通过复写基类方法, 给特定单元格设置文字大小, 颜色等...\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/cell/table-col-cell.ts\n */\nclass CustomColCell extends TableColCell {\n  getTextStyle() {\n    const defaultTextStyle = super.getTextStyle();\n\n    // 指定列\n    if (this.meta.colIndex % 2 === 0) {\n      return {\n        ...defaultTextStyle,\n        fontSize: 16,\n        fill: '#396',\n        textAlign: 'left',\n      };\n    }\n\n    // 指定层级\n    if (this.meta.level >= 0) {\n      return {\n        ...defaultTextStyle,\n        fill: 'pink',\n        textAlign: 'center',\n      };\n    }\n\n    // 指定文本\n    if (this.meta.label === '子类别') {\n      return {\n        ...defaultTextStyle,\n        fontSize: 22,\n        textAlign: 'right',\n      };\n    }\n\n    // 使用默认处理\n    return super.getTextStyle();\n  }\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        columns: ['province', 'city', 'type', 'sub_type', 'number'],\n      },\n      meta: res.meta,\n      data: res.data,\n    };\n    const s2Options = {\n      width: 600,\n      height: 480,\n      showSeriesNumber: true,\n      colCell: (node, spreadsheet, headerConfig) => {\n        return new CustomColCell(node, spreadsheet, headerConfig);\n      },\n      dataCell: (viewMeta) => {\n        return new CustomDataCell(viewMeta, viewMeta?.spreadsheet);\n      },\n    };\n    const s2 = new TableSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义明细表单元格",en:"custom table cell"},filename:"custom-table-cell.ts",isNew:!1},{id:"mini-chart",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*apnIT4KXP3YAAAAAAAAAAAAADmJ7AQ/original",source:"import { PivotSheet, DataCell, drawObjectText } from '@antv/s2';\nimport { isArray, isObject } from 'lodash';\n\n/**\n * 自定义 DataCell，使用 drawObjectText 绘制简易的 mini 图\n * 查看更多方法 https://github.com/antvis/S2/blob/master/packages/s2-core/src/cell/data-cell.ts\n */\nclass CustomDataCell extends DataCell {\n  // 当数值为对象时，完全接管绘制, 使用内置的 `drawObjectText` 根据不同的数据结构 (见下方) 绘制不同的图形\n  drawTextShape() {\n    const { fieldValue } = this.getMeta();\n\n    if (isObject(fieldValue) || isArray(fieldValue)) {\n      drawObjectText(this);\n      return;\n    }\n\n    super.drawTextShape();\n  }\n}\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container')!;\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      meta: res.meta,\n      data: [\n        // 用于绘制 mini 图的数据, 数据结构请查阅: https://s2.antv.antgroup.com/manual/basic/analysis/strategy#%E9%85%8D%E7%BD%AE-mini-%E5%9B%BE\n        {\n          province: '海南省',\n          city: '三亚市',\n          type: '家具',\n          sub_type: '桌子',\n          number: {\n            // 折线图\n            values: {\n              type: 'line',\n              data: [\n                {\n                  year: '2017',\n                  value: -368,\n                },\n                {\n                  year: '2018',\n                  value: 368,\n                },\n                {\n                  year: '2019',\n                  value: 368,\n                },\n                {\n                  year: '2020',\n                  value: 368,\n                },\n                {\n                  year: '2021',\n                  value: 268,\n                },\n                {\n                  year: '2022',\n                  value: 168,\n                },\n              ],\n              encode: { x: 'year', y: 'value' },\n            },\n          },\n        },\n        {\n          province: '海南省',\n          city: '三亚市',\n          type: '家具',\n          sub_type: '沙发',\n          number: {\n            // 柱状图\n            values: {\n              type: 'bar',\n              data: [\n                {\n                  year: '2017',\n                  value: -368,\n                },\n                {\n                  year: '2018',\n                  value: 328,\n                },\n                {\n                  year: '2019',\n                  value: 38,\n                },\n                {\n                  year: '2020',\n                  value: 168,\n                },\n                {\n                  year: '2021',\n                  value: 268,\n                },\n                {\n                  year: '2022',\n                  value: 368,\n                },\n              ],\n              encode: { x: 'year', y: 'value' },\n            },\n          },\n        },\n        {\n          province: '海南省',\n          city: '三亚市',\n          type: '办公用品',\n          sub_type: '笔',\n          number: {\n            // 多列文本\n            values: [\n              [3877, -4324, '42%'],\n              [3877, 4324, '-42%'],\n            ],\n          },\n        },\n        {\n          province: '海南省',\n          city: '三亚市',\n          type: '办公用品',\n          sub_type: '纸张',\n          number: {\n            // 子弹图\n            values: {\n              measure: 0.3,\n              target: 0.76,\n            },\n          },\n        },\n        ...res.data,\n      ],\n    };\n\n    const s2Options = {\n      width: 1000,\n      height: 680,\n      style: {\n        cellCfg: {\n          height: 40,\n        },\n      },\n      conditions: {\n        text: [\n          {\n            field: 'number',\n            mapping: (value, cellInfo) => {\n              const { meta, colIndex } = cellInfo || {};\n              if (colIndex === 0 || !value || !meta?.fieldValue) {\n                return {\n                  fill: '#000',\n                };\n              }\n              return {\n                fill: value > 0 ? '#FF4D4F' : '#29A294',\n              };\n            },\n          },\n        ],\n      },\n      dataCell: (viewMeta) => {\n        return new CustomDataCell(viewMeta, viewMeta?.spreadsheet);\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义 mini 图",en:"custom mini chart"},filename:"mini-chart.ts",isNew:!1},{id:"data-cell-placeholder",screenshot:"https://mdn.alipayobjects.com/huamei_qa8qxu/afts/img/A*B-VMT7kCWL0AAAAAAAAAAAAADmJ7AQ/original",source:"import { PivotSheet, CornerCell } from '@antv/s2';\n\nfetch(\n  'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n)\n  .then((res) => res.json())\n  .then((res) => {\n    const container = document.getElementById('container');\n    const s2DataConfig = {\n      fields: {\n        rows: ['province', 'city'],\n        columns: ['type', 'sub_type'],\n        values: ['number'],\n      },\n      meta: res.meta,\n      data: res.data.map((item, i) => {\n        return {\n          ...item,\n          number: i < 5 ? item.number : null,\n        };\n      }),\n    };\n    const s2Options = {\n      width: 600,\n      height: 480,\n      // 默认 \"-\"\n      // placeholder: '',\n      placeholder: (cell) => {\n        // 或者根据当前单元格动态设置\n        console.log('cell: ', cell);\n        if (cell.cellType === 'dataCell') {\n          return '*****';\n        }\n\n        // 返回 null, 使用默认值 (\"-\")\n        return null;\n      },\n    };\n    const s2 = new PivotSheet(container, s2DataConfig, s2Options);\n\n    s2.render();\n  });\n",title:{zh:"自定义空数据单元格占位符",en:"custom cell placeholder"},filename:"data-cell-placeholder.ts",isNew:!1}],icon:"",id:"custom-cell",title:{en:"custom cell",zh:"自定义单元格"},api:{zh:" \n \n## DataCellCallback \n \n```js \nDataCellCallback = (viewMeta: ViewMeta, s2: Spreadsheet) => G.Group; \n``` \n \n功能描述：自定义数值单元格，[ViewMeta](#viewmeta) \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n \n## CellCallback \n \n```js \nCellCallback = (node: Node, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => G.Group; \n``` \n \n功能描述：自定义单元格 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| node | [Node](#node) | ✓ |    | 当前渲染的 node 节点 | \n| spreadsheet | [SpreadSheet](#spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| restOptions | `unknown[]` |  |    | 不定参数，传递额外的信息 | \n \n \n## CornerHeaderCallback \n \n```js \nCornerHeaderCallback = (parent: S2CellType, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => void; \n``` \n \n功能描述：自定义角头 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| parent | [S2CellType](#s2celltype) | ✓ |  |   父级单元格 | \n| spreadsheet | [SpreadSheet](#spreadsheet) | ✓   |  | 表类实例，可以访问任意的配置信息 | \n| restOptions | `unknown[]` |  |  |   不定参数，传递额外的信息 | \n \n \n",en:" \n \n## DataCellCallback \n \n```js \nDataCellCallback = (viewMeta: ViewMeta, s2: Spreadsheet) => G.Group; \n``` \n \nFunction description: custom value cell, [ViewMeta](#viewmeta) \n \n \n## ViewMeta \n \nobject 必选，_default：{}_ 功能描述：单元格数据和位置等信息 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| spreadsheet | [SpreadSheet](/docs/api/basic-class/spreadsheet) |  |   | 表类实例，可以访问任意的配置信息 | \n| id | `string` |  |   | 单元格唯一标识 | \n| x | `number` |  |   | 单元格 x 坐标 | \n| y | `number` |  |   | 单元格 y 坐标 | \n| width | `number` |   |  | 单元格宽度 | \n| height | `number` |    |  | 单元格高度 | \n| data | `Record<string, any>` |    |  | 单元格原始数据度量 | \n| rowIndex | `number` |  |  |   单元格在行叶子节点中的索引 | \n| colIndex | `number` |  |  |   单元格在列叶子节点中的索引 | \n| valueField | `string` |  |    | 度量 id | \n| fieldValue | [DataItem](#dataitem) |  |    | 度量展示的真实值 | \n| isTotals | `boolean` |  |    |   是否为总计：true 为总计  false 为小计 | \n| rowQuery | `Record<string, any>`|   |  | 行查询条件 | \n| colQuery | `Record<string, any>` |    |  | 列查询条件 | \n| rowId | `string` |  |  |   单元格的行 id | \n| colId | `string` |  |  |   单元格的列 id | \n \n \n \n## CellCallback \n \n```js \nCellCallback = (node: Node, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => G.Group; \n``` \n \n功能描述：自定义单元格 \n \n| 参数 | 类型 | 必选  | 默认值 | 功能描述 | \n| --- | --- | ---  | --- | --- | \n| node | [Node](#node) | ✓ |    | 当前渲染的 node 节点 | \n| spreadsheet | [SpreadSheet](#spreadsheet) | ✓ |    | 表类实例，可以访问任意的配置信息 | \n| restOptions | `unknown[]` |  |    | 不定参数，传递额外的信息 | \n \n \n## CornerHeaderCallback \n \n```js \nCornerHeaderCallback = (parent: S2CellType, spreadsheet: SpreadSheet, ...restOptions: unknown[]) => void; \n``` \n \nFunction description: custom corner head \n \n| parameter   | type                        | required | Defaults | Functional description                                               | \n| ----------- | --------------------------- | :------: | -------- | -------------------------------------------------------------------- | \n| parents     | [S2CellType](#s2celltype)   |     ✓    |          | parent cell                                                          | \n| spreadsheet | [SpreadSheet](#spreadsheet) |     ✓    |          | Table class instance, which can access any configuration information | \n| restOptions | `unknown[]`                 |          |          | Indeterminate parameters, pass additional information                | \n \n \n"},childrenKey:"demos",order:8},{demos:[{id:"custom-order",screenshot:"https://gw.alipayobjects.com/zos/antfincdn/oOiZ02mZJ/zidingyipaixu.gif",source:"import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { SheetComponent } from \"@antv/s2-react\";\n\nconst SortMethodType = {\n    asc: 'asc',\n    desc: 'desc',\n    none: 'none',\n    custom: 'custom'\n}\n\nconst MENUS = [\n    { key: SortMethodType.none, text: '不排序' },\n    { key: SortMethodType.asc, text: '升序', icon: 'GroupAsc' },\n    { key: SortMethodType.desc, text: '降序', icon: 'GroupDesc' },\n    { key: SortMethodType.custom, text: '自定义排序', icon: 'Trend' },\n];\nconst s2DataConfig = {\n    fields: {\n        rows: [ 'province', 'city' ],\n        columns: [ 'type', 'sub_type' ],\n        values: [ 'number' ],\n    },\n    meta: undefined,\n    data: undefined\n};\n\nconst s2Options = {\n    width: 600,\n    height: 480,\n    // 关闭默认icon\n    showDefaultHeaderActionIcon: false,\n    // 自定义 icon\n    customSVGIcons: [\n        {\n            name: 'customKingIcon',\n            svg: 'https://gw.alipayobjects.com/zos/bmw-prod/f44eb1f5-7cea-45df-875e-76e825a6e0ab.svg',\n        },\n    ],\n    tooltip: {\n        showTooltip: true,\n    },\n};\n\nconst useDataCfg = () => {\n    const [ res, setRes ] = useState({ meta: undefined, data: undefined });\n    const [ dataCfg, setDataCfg ] = useState(s2DataConfig);\n\n    useEffect(() => {\n        fetch(\n            'https://gw.alipayobjects.com/os/bmw-prod/cd9814d0-6dfa-42a6-8455-5a6bd0ff93ca.json',\n        )\n            .then((res) => res.json())\n            .then((res) => setRes(res));\n    }, []);\n\n    useEffect(() => {\n        setDataCfg({\n            ...s2DataConfig,\n            meta: res.meta,\n            data: res.data,\n        });\n    }, [ res ])\n\n    return dataCfg;\n}\n\nconst App = () => {\n    const dataCfg = useDataCfg();\n    const [ sortParams, setSortParams ] = useState([]);\n\n    // 设置自定义 `icon` 的展示条件\n    const headerActionIcons = [\n        {\n            // 选择icon,可以是 S2 自带的，也可以是自定义的 icon\n            iconNames: [ 'customKingIcon' ],\n            // 通过 belongsCell + displayCondition 设置 icon 的展示位置\n            belongsCell: 'colCell',\n            displayCondition: (meta) => meta.level === 2,\n            // icon 点击之后的执行函数\n            action: (props) => {\n                const { meta, event } = props;\n                const operator = {\n                    onClick: ({ key }) => {\n                        handleSortCallback(meta, key);\n                        meta.spreadsheet.hideTooltip();\n                    },\n                    menus: MENUS,\n                };\n                // 自定义 tooltip 配置，展示 toolTip\n                meta.spreadsheet.showTooltipWithInfo(event, [], {\n                    operator,\n                    showSingleTips: true,\n                    onlyMenu: true,\n                });\n            },\n        },\n    ];\n\n    // 执行自定义排序回调\n    const handleSortCallback = (meta, key) => {\n        if (key === SortMethodType.custom) {\n            const sortParams = [\n                { sortFieldId: 'type', sortBy: [ '办公用品', '家具' ] },\n                { sortFieldId: 'city', sortMethod: 'ASC' },\n            ];\n            setSortParams(sortParams)\n            console.log('可以在这里实现你手动排序的交互和逻辑哟', sortParams)\n        } else {\n            // 使用 S2 提供的组内排序方式\n            meta.spreadsheet.groupSortByMethod(key, meta);\n        }\n    }\n\n    return <SheetComponent dataCfg={ { ...dataCfg, sortParams: sortParams } } options={ {...s2Options, headerActionIcons} }/>;\n}\n\n// 使用\nReactDOM.render(\n    <App/>,\n    document.getElementById('container'),\n);\n\n",title:{zh:"自定义排序功能",en:"custom order"},filename:"custom-order.tsx",isNew:!1}],icon:"",id:"custom-order",title:{en:"custom-order",zh:"自定义排序功能"},api:{zh:" \n",en:" \n"},childrenKey:"demos",order:9}],childrenKey:"examples"}]}},children:n})}}}]);